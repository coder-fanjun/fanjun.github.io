<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[非root用户开启tomcat报错Permission denied]]></title>
      <url>/2018/01/18/%E9%9D%9Eroot%E7%94%A8%E6%88%B7%E5%BC%80%E5%90%AFtomcat%E6%8A%A5%E9%94%99Permission%20denied/</url>
      <content type="html"><![CDATA[<p>开启tomcat失败，报错提示 <code>Permission denied</code> 报错信息如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Caused by: java.net.SocketException: Permission denied</div><div class="line">        at sun.nio.ch.Net.bind0(Native Method)</div><div class="line">        at sun.nio.ch.Net.bind(Net.java:433)</div><div class="line">        at sun.nio.ch.Net.bind(Net.java:425)</div><div class="line">        at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:223)</div><div class="line">        at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:74)</div><div class="line">        at org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:210)</div><div class="line">        at org.apache.tomcat.util.net.AbstractEndpoint.init(AbstractEndpoint.java:1082)</div><div class="line">        at org.apache.tomcat.util.net.AbstractJsseEndpoint.init(AbstractJsseEndpoint.java:267)</div><div class="line">        at org.apache.coyote.AbstractProtocol.init(AbstractProtocol.java:581)</div><div class="line">        at org.apache.coyote.http11.AbstractHttp11Protocol.init(AbstractHttp11Protocol.java:66)</div><div class="line">        at org.apache.catalina.connector.Connector.initInternal(Connector.java:993)</div></pre></td></tr></table></figure>
<p>原因是在Centos7 中，非root用户不能开启1024以下的端口。比如我用twilight用户开启tomcat，就会报错。解决方法是通过iptables防火墙重定向端口，将80端口重定向到8080端口上去。<br>在Centos7中，默认的防火墙是 firewalld 需要先挂关闭它，再使用iptables防火墙。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">关闭firewall防火墙</div><div class="line">systemctl stop firewalld.service</div><div class="line">关闭firewall开机自启</div><div class="line">systemctl disable firewalld.service</div></pre></td></tr></table></figure></p>
<p>接着安装iptables<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install iptables-services</div></pre></td></tr></table></figure></p>
<p>开放端口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 查看现有的iptables 规则</div><div class="line">iptables -L -n</div><div class="line"></div><div class="line">// 开放端口，临时的，重启会失效</div><div class="line">iptables -I OUTPUT -p tcp --dport 22 -m state --state NEW -j ACCEPT</div><div class="line">iptables -I INPUT -p tcp --dport 22 -m state --state NEW -j ACCEPT</div></pre></td></tr></table></figure></p>
<p>将80 端口 重定向到8080<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080</div></pre></td></tr></table></figure></p>
<p>永久保存iptable配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 保存</div><div class="line">iptables-save &gt; /etc/sysconfig/iptables</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hibernate 映射]]></title>
      <url>/2018/01/09/Hibernate-%E6%98%A0%E5%B0%84/</url>
      <content type="html"><![CDATA[<p>表的结构如下：<br>出版社表 publisher<br><img src="http://otbrtx8bw.bkt.clouddn.com/hibernate%E6%98%A0%E5%B0%84-publisher.PNG" alt=""></p>
<p>书籍表 book<br><img src="http://otbrtx8bw.bkt.clouddn.com/hibernate%E6%98%A0%E5%B0%84-book%E8%A1%A8.PNG" alt=""></p>
<h1 id="单向-N-1-关联"><a href="#单向-N-1-关联" class="headerlink" title="单向 N-1 关联"></a>单向 N-1 关联</h1><h2 id="无连接表的单向-N-1-关联"><a href="#无连接表的单向-N-1-关联" class="headerlink" title="无连接表的单向 N-1 关联"></a>无连接表的单向 N-1 关联</h2><p>JoinColumn 表示book表中的外键字段的名字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@ManyToOne(targetEntity=Publisher.class,fetch=FetchType.EAGER)</div><div class="line">@JoinColumn(name=&quot;publisherid&quot;)</div><div class="line">private Publisher publish;</div></pre></td></tr></table></figure></p>
<h2 id="有连接表的单向-N-1-关联"><a href="#有连接表的单向-N-1-关联" class="headerlink" title="有连接表的单向 N-1 关联"></a>有连接表的单向 N-1 关联</h2><h1 id="单向-1-1-关联"><a href="#单向-1-1-关联" class="headerlink" title="单向 1-1 关联"></a>单向 1-1 关联</h1><h2 id="外键单向-1-1-关联"><a href="#外键单向-1-1-关联" class="headerlink" title="外键单向 1-1 关联"></a>外键单向 1-1 关联</h2><h2 id="有连接表的单向-1-1-关联"><a href="#有连接表的单向-1-1-关联" class="headerlink" title="有连接表的单向 1-1 关联"></a>有连接表的单向 1-1 关联</h2><h1 id="单向-1-N"><a href="#单向-1-N" class="headerlink" title="单向 1-N"></a>单向 1-N</h1><h2 id="无连接表的-1-N-关联"><a href="#无连接表的-1-N-关联" class="headerlink" title="无连接表的 1-N 关联"></a>无连接表的 1-N 关联</h2><h2 id="有连接表的-1-N-关联"><a href="#有连接表的-1-N-关联" class="headerlink" title="有连接表的 1-N 关联"></a>有连接表的 1-N 关联</h2><h1 id="双向-1-N-关联"><a href="#双向-1-N-关联" class="headerlink" title="双向 1-N 关联"></a>双向 1-N 关联</h1><h2 id="无连接表的双向-1-N"><a href="#无连接表的双向-1-N" class="headerlink" title="无连接表的双向 1-N"></a>无连接表的双向 1-N</h2><h2 id="有连接表的双向-1-N"><a href="#有连接表的双向-1-N" class="headerlink" title="有连接表的双向 1-N"></a>有连接表的双向 1-N</h2><h1 id="双向-N-N-关联"><a href="#双向-N-N-关联" class="headerlink" title="双向 N-N 关联"></a>双向 N-N 关联</h1><h1 id="双向-1-1-关联"><a href="#双向-1-1-关联" class="headerlink" title="双向 1-1 关联"></a>双向 1-1 关联</h1><h2 id="外键双向-1-1-关联"><a href="#外键双向-1-1-关联" class="headerlink" title="外键双向 1-1 关联"></a>外键双向 1-1 关联</h2><h2 id="有连接表的-双向-1-1-关联"><a href="#有连接表的-双向-1-1-关联" class="headerlink" title="有连接表的 双向 1-1 关联"></a>有连接表的 双向 1-1 关联</h2>]]></content>
      
        <categories>
            
            <category> Hibernate </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hibernate </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Centos7安装Hadoop]]></title>
      <url>/2018/01/05/Centos7%E5%AE%89%E8%A3%85Hadoop/</url>
      <content type="html"><![CDATA[<h1 id="修改-Centos7为字符界面"><a href="#修改-Centos7为字符界面" class="headerlink" title="修改 Centos7为字符界面"></a>修改 Centos7为字符界面</h1><p>Centos7取消了之前的 inittab文件的作用，改用命令实现，</p>
<ul>
<li><code>systemctl get-default</code> ： 获得默认启动方式</li>
<li><code>systemctl set-default multi-user.target</code> ： 设置字符界面启动方式(level3)</li>
<li><code>systemctl set-default graphical.target</code> ： 设置图形化启动方式(level5)</li>
</ul>
<h1 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h1><ul>
<li>Centos7 中 ：<code>hostnamectl set-hostname xxx</code></li>
<li>Centos6 修改 network文件即可 ：<code>vim /etc/sysconfig/network</code></li>
</ul>
<h2 id="修改hosts文件保证三台机器可以ping通"><a href="#修改hosts文件保证三台机器可以ping通" class="headerlink" title="修改hosts文件保证三台机器可以ping通"></a>修改hosts文件保证三台机器可以ping通</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hadoop-master 192.168.178.1</div><div class="line">slave1 192.168.178.1</div><div class="line">slave2 192.168.178.1</div></pre></td></tr></table></figure>
<h1 id="安装SSH"><a href="#安装SSH" class="headerlink" title="安装SSH"></a>安装SSH</h1><h2 id="检查是否已经安装ssh"><a href="#检查是否已经安装ssh" class="headerlink" title="检查是否已经安装ssh"></a>检查是否已经安装ssh</h2><ul>
<li><code>rpm –qa | grep openssh</code></li>
<li><code>rpm –qa | grep rsync</code></li>
</ul>
<h2 id="如果没有安装-ssh-和-rsync，用下面的命令安装"><a href="#如果没有安装-ssh-和-rsync，用下面的命令安装" class="headerlink" title="如果没有安装 ssh 和 rsync，用下面的命令安装"></a>如果没有安装 ssh 和 rsync，用下面的命令安装</h2><ul>
<li>yum install ssh </li>
<li>yum install rsync</li>
<li>service sshd restart </li>
</ul>
<h1 id="配置无密码登陆"><a href="#配置无密码登陆" class="headerlink" title="配置无密码登陆"></a>配置无密码登陆</h1><ul>
<li><p>机器上生成密码对</p>
<blockquote>
<p>ssh-keygen –t rsa</p>
</blockquote>
</li>
<li><p>把 id_rsa.pub 追加到授权的 key 里面 去 </p>
<blockquote>
<p>cat id_rsa.pub &gt;&gt; authorized_keys</p>
</blockquote>
</li>
<li><p>修改文件”authorized_keys”权限 </p>
<blockquote>
<p>chmod 600 authorized_keys </p>
</blockquote>
</li>
<li><p>修改 SSH 配置文件 <code>/etc/ssh/sshd_config</code> (所有机器都要配)</p>
<blockquote>
<p>RSAAuthentication yes<br>PubkeyAuthentication yes<br>AuthorizedKeysFile      .ssh/authorized_keys</p>
</blockquote>
</li>
<li><p>重启ssh服务</p>
<blockquote>
<p>service sshd restart</p>
</blockquote>
</li>
<li><p>将公钥复制到所有slave机器上</p>
<blockquote>
<p>scp id_rsa.pub hadoop@slave1:/home/hadoop/</p>
</blockquote>
</li>
<li><p>追加 authorized_keys</p>
<blockquote>
<p>cp id_rsa.pub .ssh<br>cat id_rsa.pub &gt;&gt; .ssh/authorized_keys<br>chmod 600 .ssh/authorized_keys<br>service sshd restart</p>
</blockquote>
</li>
<li><p>验证是否成功 <code>ssh slave1</code> 如果可以直接登陆则表示成功</p>
<blockquote>
<p>[hadoop@localhost .ssh]$ ssh slave1<br>Last login: Fri Jan  5 21:11:48 2018 from hadoop-master</p>
</blockquote>
</li>
</ul>
<h1 id="Java-环境安装"><a href="#Java-环境安装" class="headerlink" title="Java 环境安装"></a>Java 环境安装</h1><ul>
<li><p>卸载已安装的java</p>
<blockquote>
<p>rpm -qa | grep java<br>rpm -e –nodeps java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64<br>rpm -e –nodeps javapackages-tools-3.4.1-11.el7.noarch<br>rpm -e –nodeps java-1.8.0-openjdk-headless-1.8.0.102-4.b14.el7.x86_64<br>rpm -e –nodeps tzdata-java-2016g-2.el7.noarch<br>rpm -e –nodeps java-1.7.0-openjdk-1.7.0.111-2.6.7.8.el7.x86_64<br>rpm -e –nodeps java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64</p>
</blockquote>
</li>
<li><p>安装java</p>
<blockquote>
<p>解压<br>tar -zxvf jdk-8u131-linux-x64.tar.gz<br>将目录名改为 jdk1.8<br>mv jdk1.8.0_131/ jdk1.8<br>编辑环境变量<br>vim /etc/profile<br><br><br>// 添加以下内容<br># set java environment<br>export JAVA_HOME=/usr/jdk1.8<br>export CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib<br>export PATH=$PATH:$JAVA_HOME/bin:$JAVA_HOME/jre/bin</p>
<p><br><br>使配置文件生效<br>source /etc/profile</p>
</blockquote>
</li>
</ul>
<h1 id="安装Hadoop"><a href="#安装Hadoop" class="headerlink" title="安装Hadoop"></a>安装Hadoop</h1><ul>
<li><p>解压 hadoop-2.7.0.tar.gz，并重命名</p>
<blockquote>
<p>tar zxvf  hadoop-2.7.5.tar.gz<br>mv hadoop-2.7.0 hadoop</p>
</blockquote>
</li>
<li><p>在<code>/usr/hadoop</code>下面创建tmp文件夹</p>
<blockquote>
<p>mkdir tmp </p>
</blockquote>
</li>
<li><p>配置 <code>/etc/profile</code> 文件</p>
<blockquote>
<p>vim /etc/profile<br> <br><br>添加以下内容<br>export HADOOP_INSTALL=/usr/hadoop<br>export PATH=${HADOOP_INSTALL}/bin:${HADOOP_INSTALL}/sbin${PATH}<br>export HADOOP_MAPRED_HOME=${HADOOP_INSTALL}<br>export HADOOP_COMMON_HOME=${HADOOP_INSTALL}<br>export HADOOP_HDFS_HOME=${HADOOP_INSTALL}<br>export YARN_HOME=${HADOOP_INSTALLL}<br>export HADOOP_COMMON_LIB_NATIVE_DIR=${HADOOP_INSTALL}/lib/natvie<br>export HADOOP_OPTS=”-Djava.library.path=${HADOOP_INSTALL}/lib:${HADOOP_INSTALL}/lib/native”<br><br><br>使生效<br>source /etc/profile</p>
</blockquote>
</li>
</ul>
<h2 id="配置hadoop"><a href="#配置hadoop" class="headerlink" title="配置hadoop"></a>配置hadoop</h2><ul>
<li><p>配置 <code>hadoop-env.sh</code>,配置java环境变量</p>
<blockquote>
<p>export JAVA_HOME=/usr/java/jdk1.8</p>
</blockquote>
</li>
<li><p>配置<code>core-site.xml</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 内容如下</div><div class="line">&lt;configuration&gt;</div><div class="line">&lt;property&gt;</div><div class="line">  &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</div><div class="line">  &lt;value&gt;/usr/hadoop/tmp&lt;/value&gt;</div><div class="line">  &lt;description&gt;A base for other temporary directories.&lt;/description&gt;</div><div class="line">  &lt;/property&gt;</div><div class="line">  &lt;property&gt;</div><div class="line">  &lt;name&gt;fs.default.name&lt;/name&gt;</div><div class="line">  &lt;value&gt;hdfs://hadoop-master:9000&lt;/value&gt;</div><div class="line"> &lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>配置<code>mapred-site.xml</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">           &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</div><div class="line">           &lt;value&gt;yarn&lt;/value&gt;</div><div class="line">           &lt;final&gt;true&lt;/final&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line"></div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;mapreduce.jobtracker.http.address&lt;/name&gt;</div><div class="line">        &lt;value&gt;hadoop-master:50030&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;</div><div class="line">        &lt;value&gt;hadoop-master:10020&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;</div><div class="line">        &lt;value&gt;hadoop-master:19888&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">        &lt;property&gt;</div><div class="line">                &lt;name&gt;mapred.job.tracker&lt;/name&gt;</div><div class="line">                &lt;value&gt;http://hadoop-master:9001&lt;/value&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>配置<code>yarn-site.xml</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">        &lt;property&gt;</div><div class="line">                &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</div><div class="line">                &lt;value&gt;hadoop-master&lt;/value&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line"></div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</div><div class="line">        &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;yarn.resourcemanager.address&lt;/name&gt;</div><div class="line">        &lt;value&gt;hadoop-master:8032&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;yarn.resourcemanager.scheduler.address&lt;/name&gt;</div><div class="line">        &lt;value&gt;hadoop-master:8030&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;yarn.resourcemanager.resource-tracker.address&lt;/name&gt;</div><div class="line">        &lt;value&gt;hadoop-master:8031&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;yarn.resourcemanager.admin.address&lt;/name&gt;</div><div class="line">        &lt;value&gt;hadoop-master:8033&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;property&gt;</div><div class="line">        &lt;name&gt;yarn.resourcemanager.webapp.address&lt;/name&gt;</div><div class="line">        &lt;value&gt;hadoop-master:8088&lt;/value&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>将hadoop传入slave中</p>
<blockquote>
<p>scp -r /usr/hadoop root@slave1:/usr/</p>
</blockquote>
</li>
<li><p>修改Master主机上的slaves文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">vim /usr/hadoop/etc/hadoop/slaves</div><div class="line"></div><div class="line">将内容改为：</div><div class="line"></div><div class="line">slave1</div><div class="line">slave2</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="启动hadoop"><a href="#启动hadoop" class="headerlink" title="启动hadoop"></a>启动hadoop</h2><ul>
<li><p>关闭防火墙</p>
<blockquote>
<p>systemctl stop firewalld.service</p>
<p>关闭防火墙开机自启<br>systemctl disable firewalld.service</p>
</blockquote>
</li>
<li><p>格式化</p>
<blockquote>
<p>hadoop namenode -format</p>
</blockquote>
</li>
<li><p>启动hadoop</p>
<blockquote>
<p>/usr/hadoop/sbin/start-all.sh</p>
</blockquote>
</li>
<li><p>验证，<code>jps</code>， 若出现下列信息表示安装成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">主节点：</div><div class="line">[hadoop@hadoop-master usr]$ jps</div><div class="line">13138 Jps</div><div class="line">12563 SecondaryNameNode</div><div class="line">12708 ResourceManager</div><div class="line">12375 NameNode</div><div class="line"></div><div class="line">从节点：</div><div class="line">[root@slave1 ~]# jps</div><div class="line">12786 Jps</div><div class="line">12205 DataNode</div><div class="line">12317 NodeManager</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Hadoop </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《活着》---感]]></title>
      <url>/2017/12/24/%E3%80%8A%E6%B4%BB%E7%9D%80%E3%80%8B-%E6%84%9F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>我听到了一首美国民歌《老黑奴》，歌中那位老黑奴经历了一生的苦难，家人都先他而去，而他依然友好地对待世界，没有一句抱怨的话。这首歌深深打动了我，我决定写下一篇这样的小说，就是这篇《活着》。<br>– 余华</p>
</blockquote>
<p>周末。心情很差，一晚上时间看完了之前买的短片小说《活着》。说实话，这是我看过的最悲伤的故事。主人公福贵原来是一个富家子弟，赌博输掉家产后，父亲死去。</p>
<blockquote>
<p>“我爹从粪缸上摔了下来，那佃户听到声音急忙转过身来，看到我爹斜躺在地上，脑袋靠着粪缸一动不动·····<br>我爹问到他‘你先前看到过我掉下来没有？’<br>他说’没有，老爷。‘<br>我爹像是有些高兴，又问‘第一次掉下来？’<br>他说‘是的，老爷。<br>我爹嘿嘿笑了几下，笑完后闭上了眼睛，脖子一歪，脑袋顺着粪缸滑到了地上。”</p>
</blockquote>
<p>家族破落，年老的老人临死前的笑似乎包含了他一生的遗憾。遗憾他败掉了家里的一半的家产，遗憾他的儿子彻底败掉的所有的家产，这是一种无奈与解脱。<br>接着是有庆。</p>
<blockquote>
<p> ”那时候有庆已经不行了，可出来个医生说血还不够用。抽血的是个乌龟王八蛋，把我儿子的血差不多抽干了，有庆嘴唇都青了，他还不住手，等到有庆脑袋一歪摔在地上，那人才慌了，去叫来医生，医生蹲在地上拿听筒听了听说：<br>’心跳都没了。‘<br>医生也没怎么当回事，只是骂了一声抽血的：<br>‘你真是胡闹’<br>就跑进产房去救县长的女人了。“</p>
</blockquote>
<p>看到这里我真的是感觉到了那个时代的可怕，福贵的儿子死了，为了救县长的夫人而死，而就在这之前他刚刚得了校运动会的第一名，刚刚破晓的一点希望，就这样破灭了。<br>接着是凤霞，大出血而死。二喜，被水泥板夹死。苦根，吃豆子撑死。家珍，躺在床上安然的死去。最后的最后，只剩下年老的福贵和一个和他一样老的老牛，老牛也叫福贵。福贵一生经历了那个多的苦难，他依然没有放弃生的念头，也许已经没有什么苦难可以打倒他了吧。<br>借用网上的一段话：</p>
<blockquote>
<p>现在的社会中，每个人经历的坎坷太多，抱怨也太多。生活就像一面镜子，你冲它笑，它不会冲你哭。当我们承受着太多的辛劳时，背负着太多的责任时，享受着太少的成功时，想想福贵，想想活着的意义。</p>
</blockquote>
<p>不要问活着的意义是什么，活着本身就是意义。</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Shell---Shell常用命令（tr、sed、cut）]]></title>
      <url>/2017/10/28/Shell-Shell%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%88tr%E3%80%81sed%E3%80%81cut%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="tr"><a href="#tr" class="headerlink" title="tr"></a>tr</h1><p>tr 命令用于转换或删除文件中的字符。从标准输入设备读取数据，经过字符串转译后，将结果输出到标准输出设备。<br> <code>tr [-cdst][--help][--version][第一字符集][第二字符集]</code></p>
<p>参数：</p>
<ul>
<li>-c, –complement：反选设定字符。也就是符合 SET1 的部份不做处理，不符合的剩余部份才进行转换</li>
<li>-d, –delete：删除指令字符</li>
<li>-s, –squeeze-repeats：缩减连续重复的字符成指定的单个字符</li>
<li>-t, –truncate-set1：削减 SET1 指定范围，使之与 SET2 设定长度相等</li>
<li>–help：显示程序用法信息</li>
<li>–version：显示程序本身的版本信息  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 将所有小写字符转换成大写</div><div class="line">cat testfile |tr a-z A-Z </div><div class="line"></div><div class="line"># 压缩多个空格为1个</div><div class="line">echo &quot;fdas     fadsfaf&quot; | tr -s &quot; &quot;</div><div class="line"></div><div class="line"># 把文件中的数字0-9替换为a-j</div><div class="line">cat file | tr [0-9] [a-j]</div><div class="line"></div><div class="line"># 删除文件file中出现的换行&apos;\n&apos;、制表&apos;\t&apos;字符</div><div class="line">cat file | tr -d &quot;\n\t&quot;</div></pre></td></tr></table></figure>
<h1 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h1><p><code>sed [-nefri] ‘command’ 输入文本</code></p>
<ul>
<li>-n∶使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN的资料一般都会被列出到萤幕上。但如果加上 -n 参数后，则只有经过sed 特殊处理的那一行(或者动作)才会被列出来。</li>
<li>-e∶直接在指令列模式上进行 sed 的动作编辑；</li>
<li>-f∶直接将 sed 的动作写在一个档案内， -f filename 则可以执行 filename 内的sed 动作；</li>
<li>-r∶sed 的动作支援的是延伸型正规表示法的语法。(预设是基础正规表示法语法)</li>
<li>-i∶直接修改读取的档案内容，而不是由萤幕输出。       </li>
</ul>
<ul>
<li>a  ∶新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)</li>
<li>c  ∶取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！</li>
<li>d  ∶删除，d后面不接参数</li>
<li>i  ∶插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；</li>
<li>p  ∶列印，亦即将某个选择的资料印出。通常 p 会与参数 sed -n 一起运作</li>
<li>s  ∶取代，可以直接进行取代的工作，例如 1,20s/old/new/g 就是啦！</li>
</ul>
<h2 id="替换一行中的某部分"><a href="#替换一行中的某部分" class="headerlink" title="替换一行中的某部分"></a>替换一行中的某部分</h2><ul>
<li>格式： <code>sed &#39;s/要替换的字符串/新的字符串/g&#39;</code>  （要替换的字符串可以用正则表达式）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"># ab 为文件名</div><div class="line">    删除某行</div><div class="line">     [root@localhost ruby] # sed &apos;1d&apos; ab             #删除第一行 </div><div class="line">     [root@localhost ruby] # sed &apos;$d&apos; ab             #删除最后一行</div><div class="line">     [root@localhost ruby] # sed &apos;1,2d&apos; ab           #删除第一行到第二行</div><div class="line">     [root@localhost ruby] # sed &apos;2,$d&apos; ab           #删除第二行到最后一行</div><div class="line"></div><div class="line">　　显示某行</div><div class="line">.    [root@localhost ruby] # sed -n &apos;1p&apos; ab          #显示第一行 (如果不加-n就会全部显示)</div><div class="line">     [root@localhost ruby] # sed -n &apos;$p&apos; ab          #显示最后一行</div><div class="line">     [root@localhost ruby] # sed -n &apos;1,2p&apos; ab        #显示第一行到第二行</div><div class="line">     [root@localhost ruby] # sed -n &apos;2,$p&apos; ab        #显示第二行到最后一行</div><div class="line"></div><div class="line">　　使用模式进行查询</div><div class="line">     [root@localhost ruby] # sed -n &apos;/ruby/p&apos; ab    #查询包括关键字ruby所在所有行</div><div class="line">     [root@localhost ruby] # sed -n &apos;/\$/p&apos; ab      #查询包括关键字$所在所有行，使用反斜线\屏蔽特殊含义</div><div class="line"></div><div class="line">	#第一行后增加字符串&quot;drink tea&quot;</div><div class="line">	sed &apos;1a drink tea&apos; ab  </div><div class="line">	</div><div class="line">	#第一行到第三行后增加字符串&quot;drink tea&quot;</div><div class="line">	sed &apos;1,3a drink tea&apos; ab </div><div class="line">	</div><div class="line">	#第一行后增加多行，使用换行符\n</div><div class="line">	sed &apos;1a drink tea\nor coffee&apos; ab   </div><div class="line">	</div><div class="line">	#第一行代替为Hi</div><div class="line">	sed &apos;1c Hi&apos; ab    </div><div class="line">	</div><div class="line">	#第一行到第二行代替为Hi            </div><div class="line">	sed &apos;1,2c Hi&apos; ab             </div><div class="line">	</div><div class="line">	#替换ruby为bird</div><div class="line">	sed -n &apos;/ruby/p&apos; ab | sed &apos;s/ruby/bird/g&apos; </div><div class="line">	</div><div class="line">	# 替换 \#!为23333   </div><div class="line">	cat cal.sh | sed -n &quot;s/#\!/23333/g&quot; </div><div class="line">	</div><div class="line">	# 将\#!替换成空，即删除这两个字符</div><div class="line">	cat cal.sh | sed &quot;s/#\!//g&quot; </div><div class="line">	</div><div class="line">	#在文件ab中最后一行直接输入&quot;bye&quot;</div><div class="line">	sed -i &apos;$a bye&apos; ab</div></pre></td></tr></table></figure>
<h1 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h1><p>cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段写至标准输出。如果不指定 File 参数，cut 命令将读取标准输入。必须指定 -b、-c 或 -f 标志之一。<br><strong>不能处理多空格为分隔符的行</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cut  [-bn] [file]</div><div class="line">cut [-c] [file]</div><div class="line">cut [-df] [file]</div></pre></td></tr></table></figure></p>
<ul>
<li>-b ：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。</li>
<li>-c ：以字符为单位进行分割。</li>
<li>-d ：自定义分隔符，默认为制表符。</li>
<li>-f ：与-d一起使用，指定显示哪个区域。</li>
<li>-n ：取消分割多字节字符。仅和 -b 标志一起使用。如果字符的最后一个字节落在由 -b 标志的 List 参数指示的范围之内，该字符将被写出；否则，该字符将被排除</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 提取每行的第三个字符</div><div class="line">who | cut -b 3</div><div class="line"></div><div class="line"># 提取第3，第4、第5和第8个字节</div><div class="line">who|cut -b 3-5,8</div><div class="line"></div><div class="line"># 以 `:`为分隔符，选取第一个</div><div class="line">cat /etc/passwd | cut -d &quot;:&quot; -f 1</div></pre></td></tr></table></figure>
<p>当有多个空格为分隔符时，可用awk命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 选出第一列（以多个空格分隔）</div><div class="line">[root@localhost sh]# ll | awk &apos;&#123;print $1&#125;&apos;</div><div class="line">-rwxr-xr-x.</div><div class="line">-rwxr-xr-x.</div><div class="line">-rwxr-xr-x.</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Shell---for循环]]></title>
      <url>/2017/10/28/Shell-for%E5%BE%AA%E7%8E%AF/</url>
      <content type="html"><![CDATA[<h1 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h1><p>语法一：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">for 变量 in value1 value2 value3...</div><div class="line">	do </div><div class="line">		// do something</div><div class="line">	done</div></pre></td></tr></table></figure>
<p>语法二 ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">for (( 初始值;循环控制条件;变量变化 ))</div><div class="line">	do</div><div class="line">		// do something</div><div class="line">	done</div></pre></td></tr></table></figure></p>
<p>案例一：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">for i in 1 2 3 4 5</div><div class="line">        do</div><div class="line">                echo $i</div><div class="line">        done</div></pre></td></tr></table></figure></p>
<p>案例二：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">result=0</div><div class="line">for ((i=1;i&lt;=100;i=i+1))</div><div class="line">        do</div><div class="line">                result=$(($result+$i))</div><div class="line">        done</div><div class="line">echo $result</div></pre></td></tr></table></figure></p>
<p>案例三，批量添加用户：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">read -p &quot;请输入用户名：&quot; name</div><div class="line">read -p &quot;请输入创建用户的数量&quot; number</div><div class="line">read -p &quot;请输入密码：&quot; password</div><div class="line"></div><div class="line">if [ -n &quot;$name&quot; -a -n &quot;$number&quot; -a -n &quot;$password&quot; ]</div><div class="line">        then</div><div class="line">                # 判断数量是否是数字</div><div class="line">                flag=`echo $number | sed &quot;s/[0-9]//g&quot; `</div><div class="line">                if [ -n flag ]</div><div class="line">                        then</div><div class="line">                        for (( i=1;i&lt;=$number;i=i+1 ))</div><div class="line">                                        do</div><div class="line">                                                /usr/sbin/useradd $name$i</div><div class="line">                                                echo $passwd | /usr/bin/passwd --stdin $name$i</div><div class="line">                                                echo &quot;成功添加用户$name$i,密码$passwd\n&quot;        </div><div class="line">                                        done</div><div class="line">                fi</div><div class="line">else</div><div class="line">        echo &quot;不能为空&quot;</div><div class="line">fi</div></pre></td></tr></table></figure></p>
<p>案例四，批量删除用户：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line"># 批量删除用户</div><div class="line">read -p &quot;请输入需要删除的用户名:&quot; name</div><div class="line"></div><div class="line">list=$(cat /etc/passwd | grep $name | cut -d &quot;:&quot; -f 1)</div><div class="line"></div><div class="line">for i in $list</div><div class="line">        do</div><div class="line">                userdel $i</div><div class="line">        done</div></pre></td></tr></table></figure></p>
<h1 id="while-和-util"><a href="#while-和-util" class="headerlink" title="while 和 util"></a>while 和 util</h1><p>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 条件满足时执行循环</div><div class="line">while [ 条件判断式 ]</div><div class="line">	do </div><div class="line">		// do something</div><div class="line">	done</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 条件满足时退出循环</div><div class="line">until [  条件判断式 ]</div><div class="line">	do </div><div class="line">		// do something</div><div class="line">	done</div></pre></td></tr></table></figure>
<p>案例五：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[root@localhost sh]# vim while.sh </div><div class="line"></div><div class="line">#!/bin/bash</div><div class="line"></div><div class="line"># 测试while循环</div><div class="line"></div><div class="line">i=1</div><div class="line">s=0</div><div class="line">while [ &quot;$i&quot; -le 100 ]</div><div class="line">        do</div><div class="line">                s=$(( $s+$i ))</div><div class="line">                i=$(( $i+1 ))</div><div class="line">        done</div><div class="line">echo $s</div></pre></td></tr></table></figure></p>
<p>案例六：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">i=1</div><div class="line">s=0</div><div class="line"></div><div class="line">until [ &quot;$i&quot; -gt 100 ]</div><div class="line">        do</div><div class="line">                s=$(( $s+$i ))</div><div class="line">                i=$(( $i+1 ))</div><div class="line">        done</div><div class="line">echo $s</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Shell---判断(if)和分支(case)]]></title>
      <url>/2017/10/28/Shell-%E5%88%A4%E6%96%AD-if-%E5%92%8C%E5%88%86%E6%94%AF-case/</url>
      <content type="html"><![CDATA[<h1 id="if-判断"><a href="#if-判断" class="headerlink" title="if 判断"></a>if 判断</h1><h2 id="单分支if条件语句"><a href="#单分支if条件语句" class="headerlink" title="单分支if条件语句"></a>单分支if条件语句</h2><p>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if [ 条件判断式 ];then</div><div class="line">	# do something</div><div class="line">fi</div></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if [ 条件判断式 ]</div><div class="line">	then</div><div class="line">	# do something</div><div class="line">fi</div></pre></td></tr></table></figure></p>
<p>案例一，获取当前用户名，当然用 <code>whoami</code> 也可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">test=`env | grep &quot;USER&quot; | cut -d &quot;=&quot; -f 2`</div><div class="line">if [ test==&quot;root&quot; ];then</div><div class="line">        echo &quot;This user is root&quot;</div><div class="line">fi</div></pre></td></tr></table></figure></p>
<p>案例二，检查磁盘容量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">rate=`df -h | grep &quot;sda1&quot; | awk &apos;&#123; print $5 &#125;&apos; | cut -d &quot;%&quot; -f 1`</div><div class="line"></div><div class="line">if [ $rate -gt &quot;10&quot; ];then</div><div class="line">                echo &quot;/ is Full&quot;</div><div class="line">fi</div></pre></td></tr></table></figure></p>
<p>PS： </p>
<ul>
<li>条件判断式就是test命令判断，可以用test命令替代，中括号中间必须有空格</li>
<li>-gt 当变量值为空时会报错</li>
</ul>
<h2 id="双分支if"><a href="#双分支if" class="headerlink" title="双分支if"></a>双分支if</h2><p>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if [ 条件判断式 ]</div><div class="line">	then </div><div class="line">		...</div><div class="line">	else </div><div class="line">		...</div><div class="line">fi</div></pre></td></tr></table></figure></p>
<p>案例三，判断目录的属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">read -t 30 -p &quot;input a dir:&quot; dir</div><div class="line"></div><div class="line">if [ -d $dir ]</div><div class="line">        then</div><div class="line">                echo &quot;This is a directory&quot;</div><div class="line">        else</div><div class="line">                echo &quot;no no no &quot;</div><div class="line">fi</div></pre></td></tr></table></figure></p>
<p>案例四，判断tomcat服务是否开启：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">test=`ps aux | grep tomcat | grep -v grep`</div><div class="line"></div><div class="line">if [ -n &quot;$test&quot; ]</div><div class="line">        then</div><div class="line">                echo &quot;tomcat is running&quot;</div><div class="line">        else</div><div class="line">                echo &quot;tomcat is not running&quot;</div><div class="line">               /etc/init.d/tomcat start</div><div class="line">#                service tomcat start  不建议使用</div><div class="line">                echo &quot;tomcat is started&quot;</div><div class="line">fi</div></pre></td></tr></table></figure></p>
<p>PS：</p>
<ul>
<li>if判断中的变量最好加上引号，因为如果变量的值中包含空格，将出现<code>too many arguments</code> 错误，所以还是写成 <code>if [ -n &quot;$test&quot; ]</code> 较安全</li>
</ul>
<h1 id="多分支if"><a href="#多分支if" class="headerlink" title="多分支if"></a>多分支if</h1><p>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">if [ 条件判断 ]</div><div class="line">	then </div><div class="line">		# do something</div><div class="line">elif [ 条件判断 ]</div><div class="line">	then </div><div class="line">		# do something</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">else </div><div class="line">	# do something</div><div class="line">fi</div></pre></td></tr></table></figure></p>
<p>案例五，简易计算器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">read -p &quot;please input num1:&quot; num1</div><div class="line">read -p &quot;please input operator:&quot; op</div><div class="line">read -p &quot;please input num2:&quot; num2</div><div class="line"></div><div class="line">if [ -z &quot;$num1&quot; -o -z &quot;$num2&quot; -o -z &quot;$op&quot; ]</div><div class="line">        then</div><div class="line">                echo &quot;value shoud not be null&quot;</div><div class="line">                exit 2</div><div class="line">        else</div><div class="line">                # 把所有数字替换成空,如果替换后不为空，则表示变量中不符合规范 </div><div class="line">                test1=`echo $num1 | sed &apos;s/[0-9]//g&apos;`</div><div class="line">                test2=`echo $num2 | sed &apos;s/[0-9]//g&apos;`</div><div class="line"></div><div class="line">                if [ -n &quot;$test1&quot; -o -n &quot;$test2&quot; ];then</div><div class="line">                        echo &quot;数值格式错误&quot;</div><div class="line">                        exit 4</div><div class="line">                fi</div><div class="line"></div><div class="line">                if [ &quot;$op&quot; == &quot;+&quot; ]</div><div class="line">                        then</div><div class="line">                                result=$(($num1+$num2))</div><div class="line">                elif [ &quot;$op&quot; == &quot;-&quot; ]</div><div class="line">                        then</div><div class="line">                                result=$(($num1-$num2))</div><div class="line">                elif [ &quot;$op&quot; == &quot;*&quot; ]</div><div class="line">                        then</div><div class="line">                                result=$(($num1*$num2))</div><div class="line">                elif [ &quot;$op&quot; == &quot;/&quot; ]</div><div class="line">                        then</div><div class="line">                                let &quot;result=$num1/$num2&quot;</div><div class="line">                else</div><div class="line">                        echo &quot;operator is wrong&quot;</div><div class="line">                        exit 3</div><div class="line">                fi</div><div class="line"></div><div class="line">fi</div><div class="line"></div><div class="line">echo $&#123;num1&#125;$&#123;op&#125;$&#123;num2&#125;=$&#123;result&#125;</div></pre></td></tr></table></figure></p>
<p>案例六，判断文件类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">read -p &quot;请输入文件或目录名：&quot; path</div><div class="line"></div><div class="line">if [ -z &quot;$path&quot; ]</div><div class="line">        then</div><div class="line">                echo &quot;请输入内容！&quot;</div><div class="line">                exit 10</div><div class="line">elif [ ! -e &quot;$path&quot; ]</div><div class="line">        then</div><div class="line">                echo &quot;文件或目录不存在&quot;</div><div class="line">                exit 11</div><div class="line">elif [ -f &quot;$path&quot; ]</div><div class="line">        then</div><div class="line">                echo &quot;输入的是一个文件&quot;</div><div class="line">elif [ -d &quot;$path&quot; ]</div><div class="line">        then</div><div class="line">                echo &quot;输入的是一个目录&quot;</div><div class="line">else</div><div class="line">        echo &quot;输入的式其他类型的文件&quot;</div><div class="line">fi</div></pre></td></tr></table></figure></p>
<h1 id="case-分支"><a href="#case-分支" class="headerlink" title="case 分支"></a>case 分支</h1><p>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">case $变量名 in</div><div class="line">	&quot;值1&quot;)</div><div class="line">		// do something,变量的值等于值1</div><div class="line">		;;</div><div class="line">	&quot;值2&quot;)</div><div class="line">		// do something，变量的值等于值2</div><div class="line">		;;</div><div class="line"></div><div class="line">	...</div><div class="line">	</div><div class="line">	*)</div><div class="line">		// do something，变量的值与上面都不同</div><div class="line">	;;</div><div class="line">esca</div></pre></td></tr></table></figure></p>
<p>案例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line">read -p &quot;请输入 yes/no&quot; result</div><div class="line"></div><div class="line">case &quot;$result&quot; in</div><div class="line">        &quot;yes&quot;)</div><div class="line">                echo &quot;你输入的式yes&quot;</div><div class="line">                ;;</div><div class="line">        &quot;no&quot;)</div><div class="line">                echo &quot;你输入的是no&quot;</div><div class="line">                ;;</div><div class="line">        *)</div><div class="line">                echo &quot;请输入正确的选择&quot;</div><div class="line">esac</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Shell---条件判断和判断参数]]></title>
      <url>/2017/10/27/Shell-%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E5%92%8C%E5%88%A4%E6%96%AD%E5%8F%82%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h1><p>两种方式表示判断：</p>
<ul>
<li>test -e 文件名</li>
<li>[ -e 文件名 ]             // 中括号中间有空格</li>
</ul>
<p>以上的命令在命令行中执行，不能看到结果，需要用<code>$?</code>查看上一次执行的结果</p>
<p>一种可以直接输出结果的方式：</p>
<ul>
<li><strong> [ -d /root ] &amp;&amp; echo “yes”  || echo “no” </strong></li>
<li><strong> test -e /root &amp;&amp; echo “yes”  || echo “no” </strong></li>
</ul>
<h2 id="按照文件类型判断"><a href="#按照文件类型判断" class="headerlink" title="按照文件类型判断"></a>按照文件类型判断</h2><p>相关参数如下:<br><img src="http://otbrtx8bw.bkt.clouddn.com/Linux---%E5%88%A4%E6%96%AD%E5%8F%82%E6%95%B0.PNG" alt=""></p>
<h2 id="权限判断"><a href="#权限判断" class="headerlink" title="权限判断"></a>权限判断</h2><p>只要有相应权限就为真，不分用户</p>
<p><img src="http://otbrtx8bw.bkt.clouddn.com/Linux--%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E5%88%A4%E6%96%AD.PNG" alt=""></p>
<h2 id="文件属性的比较"><a href="#文件属性的比较" class="headerlink" title="文件属性的比较"></a>文件属性的比较</h2><p><img src="http://otbrtx8bw.bkt.clouddn.com/%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E6%AF%94%E8%BE%83.PNG" alt=""></p>
<h2 id="两个整数数值的比较"><a href="#两个整数数值的比较" class="headerlink" title="两个整数数值的比较"></a>两个整数数值的比较</h2><p><img src="http://otbrtx8bw.bkt.clouddn.com/%E6%95%B4%E6%95%B0%E4%B9%8B%E9%97%B4%E7%9A%84%E6%AF%94%E8%BE%83.PNG" alt=""></p>
<h2 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h2><p><img src="http://otbrtx8bw.bkt.clouddn.com/Linux---%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%AF%94%E8%BE%83.PNG" alt=""></p>
<h2 id="多重条件"><a href="#多重条件" class="headerlink" title="多重条件"></a>多重条件</h2><p><img src="http://otbrtx8bw.bkt.clouddn.com/Linux---%E5%A4%9A%E9%87%8D%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD.PNG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux中常见配置文件]]></title>
      <url>/2017/10/26/Linux%E4%B8%AD%E5%B8%B8%E8%A7%81%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h1 id="source"><a href="#source" class="headerlink" title="source"></a>source</h1><p><code>source 配置文件</code> 或 <code>. 配置文件</code><br>使配置文件生效</p>
<h1 id="常见配置文件："><a href="#常见配置文件：" class="headerlink" title="常见配置文件："></a>常见配置文件：</h1><ul>
<li>/etc/profile</li>
<li>/etc/profile.d/*.sh</li>
<li>~/.bash_profile</li>
<li>~/.bashrc</li>
<li>/etc/bashrc</li>
</ul>
<p>文件的作用及关系如下:</p>
<p><img src="http://otbrtx8bw.bkt.clouddn.com/%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8F%8A%E6%B5%81%E7%A8%8B.jpg" alt=""></p>
<h1 id="其他配置文件"><a href="#其他配置文件" class="headerlink" title="其他配置文件"></a>其他配置文件</h1><ul>
<li>~/.bash_logout 退出登陆时自动执行，</li>
<li>~/.bash_history 保存历史命令，当前登陆的历史命令保存在内存中，退出后保存到文件中。</li>
<li>/etc/issue  本地终端登陆之前，显示的信息</li>
<li>/etc/issue.net 远程终端的登陆时，显示的信息</li>
<li>/etc/motd 在登陆之后显示信息，不管本地还是远程</li>
</ul>
<p>常见转义符：<br><img src="http://otbrtx8bw.bkt.clouddn.com/%E6%AC%A2%E8%BF%8E%E7%95%8C%E9%9D%A2%E5%8F%82%E6%95%B0.png" alt=""></p>
<p>PS： 对于 <code>/etc/issue.net</code>,转义符不起作用，只能显示普通文本.。由/etc/ssh/sshd_config  控制。Banner有参数时 <code>Banner /etc/issue.net</code> 才能显示</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Shell---常用命令、常用环境变量、PS1、语系变量、位置变量、预定义变量、数值运算]]></title>
      <url>/2017/10/19/Shell-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E3%80%81%E5%B8%B8%E7%94%A8%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E3%80%81PS1%E3%80%81%E8%AF%AD%E7%B3%BB%E5%8F%98%E9%87%8F%E3%80%81%E4%BD%8D%E7%BD%AE%E5%8F%98%E9%87%8F%E3%80%81%E9%A2%84%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F%E3%80%81%E6%95%B0%E5%80%BC%E8%BF%90%E7%AE%97/</url>
      <content type="html"><![CDATA[<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p><strong>set</strong> 查询所有正在运行的变量</p>
<ul>
<li>-u 当查看不存在的变量时会提示报错</li>
</ul>
<p><strong>unset</strong> 删除变量(不是删除值，不需要加$) </p>
<blockquote>
<p>unset name </p>
</blockquote>
<p><strong>env</strong> 只查看环境变量<br><strong>export</strong> 声明环境变量 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export 变量名=变量值</div><div class="line">export 变量名</div></pre></td></tr></table></figure>
<h1 id="常用环境变量"><a href="#常用环境变量" class="headerlink" title="常用环境变量"></a>常用环境变量</h1><ul>
<li>HOSTNAME: 主机名</li>
<li>SHELL：当前shell</li>
<li>TERM: 终端环境</li>
<li>HISTSIZE: 历史命令条数</li>
<li>SSH_CLIENT：记录客户端ip</li>
<li>SSH_TTY：ssh连接的终端</li>
<li>USER:当前登录的用户</li>
</ul>
<h2 id="PS1-变量"><a href="#PS1-变量" class="headerlink" title="PS1 变量"></a>PS1 变量</h2><ul>
<li>\d:日期”星期 月 日”</li>
<li>\H:显示完整的主机名</li>
<li>\t:显示24小时制时间 “HH:MM:SS”</li>
<li>\A:显示24小时制时间 “HH:MM”</li>
<li>\u:显示当前用户名</li>
<li>\w:显示当前所在目录的完整名称</li>
<li>\W:显示当前所在目录的最后一个目录</li>
<li>\$:提示符</li>
</ul>
<h1 id="语系变量"><a href="#语系变量" class="headerlink" title="语系变量"></a>语系变量</h1><ul>
<li>locale 查询正在使用系统语系</li>
<li>locale -a 查看支持的所有语系</li>
<li><p><code>/etc/sysconfig/i18n</code> 默认语系环境（下次开机后的环境）</p>
</li>
<li><p>LANG：定义系统主语系的变量</p>
</li>
<li>LC_ALL:定义整个语系的变量</li>
</ul>
<h1 id="位置变量"><a href="#位置变量" class="headerlink" title="位置变量"></a>位置变量</h1><table>
<thead>
<tr>
<th style="text-align:center">位置参数变量</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">$n</td>
<td style="text-align:left">n为数字，$0代表命令本身，$1 ~ $9 代表第一到第九个参数。十以上的参数需要用大括号包含，如${10}</td>
</tr>
<tr>
<td style="text-align:center">$*</td>
<td style="text-align:left">代表命令行中的所有参数（不包括$0），把所有参数当成一个整体</td>
</tr>
<tr>
<td style="text-align:center">$@</td>
<td style="text-align:left">代表命令好中的所有参数（不包括$0），把所有参数区分对待</td>
</tr>
<tr>
<td style="text-align:center">$#</td>
<td style="text-align:left">代表命令行中所有参数的个数</td>
</tr>
</tbody>
</table>
<h1 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h1><table>
<thead>
<tr>
<th style="text-align:center">预定义变量</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">$?</td>
<td style="text-align:left">最后一次执行的命令的返回状态。如果这个 变量的值是0，证明上一个命令正确执行；如果这个变量的值为非零（由命令自己决定），则证明上一个命令执行不正确</td>
</tr>
<tr>
<td style="text-align:center">$$</td>
<td style="text-align:left">当前进程的进程号（PID）</td>
</tr>
<tr>
<td style="text-align:center">$!</td>
<td style="text-align:left">后台运行的最后一个进程的进程号(PID)</td>
</tr>
</tbody>
</table>
<h1 id="read-用户输入"><a href="#read-用户输入" class="headerlink" title="read 用户输入"></a>read 用户输入</h1><p><strong>read [选项] [变量名]</strong></p>
<ul>
<li>-p “提示信息”：在等待read输入时，输出提示信息</li>
<li>-t 秒数 ：等待用户输入，制定等待时间</li>
<li>-n 字符数：直接受指定的字符数，就会执行</li>
<li>-s ：隐藏输入的数据</li>
</ul>
<hr>
<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="declare-声明变量类型"><a href="#declare-声明变量类型" class="headerlink" title="declare 声明变量类型"></a>declare 声明变量类型</h2><p><strong>declare [+/-] [选项] 变量名</strong></p>
<ul>
<li>-：给变量设定类型属性</li>
<li>+：取消变量的类型属性</li>
<li>-a:数组型</li>
<li>-i:整数型</li>
<li>-x:环境变量</li>
<li>-r:只读变量</li>
<li>-p:显示指定变量的被声明类型</li>
</ul>
<p>使用下标访问数组</p>
<ul>
<li>array[0] : 访问第一个</li>
<li>array ： 访问第一个</li>
<li>array[*] :访问所有的元素</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 整形</div><div class="line"> a=1</div><div class="line"> b=2</div><div class="line"> declare -i c=$a+$b</div><div class="line"> echo $c</div><div class="line">---</div><div class="line">3</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">array[0]=a</div><div class="line">array[1]=b</div><div class="line"></div><div class="line">declare -a array[3]=$&#123;array[0]&#125;$&#123;array[1]&#125;</div><div class="line"></div><div class="line">echo &quot;array[0]&quot;:$&#123;array[0]&#125;</div><div class="line">echo &quot;array&quot;:$&#123;array&#125;</div><div class="line">echo &quot;array[*]&quot;:$&#123;array[*]&#125;</div><div class="line">echo &quot;array[2]&quot;:$&#123;array[2]&#125;</div></pre></td></tr></table></figure>
<p>declare -p 查看变量的所有类型。如果不加变量名就表示显示所有变量的所有类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost test]# declare -p c</div><div class="line">declare -i c=&quot;3&quot;</div></pre></td></tr></table></figure></p>
<h2 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h2><h3 id="expr-或-let-数值运算工具"><a href="#expr-或-let-数值运算工具" class="headerlink" title="expr 或 let 数值运算工具"></a>expr 或 let 数值运算工具</h3><ul>
<li><strong>result=$(expr $num1+$num2)</strong> 或 <strong>result=&#96;expr $num1+$num2&#96;</strong></li>
<li><strong>let “result=$num1+$num2”</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost test]# a=1</div><div class="line">[root@localhost test]# b=2</div><div class="line">[root@localhost test]# c=$(expr $a+$b)</div><div class="line">[root@localhost test]# echo $c</div><div class="line">3</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost test]# let &quot;d=$a+$b&quot;</div></pre></td></tr></table></figure>
<h3 id="运算式-或-运算式"><a href="#运算式-或-运算式" class="headerlink" title="$((运算式)) 或 $[运算式]"></a>$((运算式)) 或 $[运算式]</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost test]# c=$(($a+$b))</div><div class="line">[root@localhost test]# d=$[$a+$b]</div></pre></td></tr></table></figure>
<h3 id="变量测试"><a href="#变量测试" class="headerlink" title="变量测试"></a>变量测试</h3><p>较复杂。。。<br><img src="http://otbrtx8bw.bkt.clouddn.com/Linux_shell_%E5%8F%98%E9%87%8F%E6%A3%80%E6%B5%8B.jpg" alt=""></p>
<hr>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我记得]]></title>
      <url>/2017/08/28/%E6%88%91%E8%AE%B0%E5%BE%97/</url>
      <content type="html"><![CDATA[<div style=""><br><center><br><p style="font-size:40px">我记得</p><br>叶赛宁<br></center><br><br><hr><br><center><br>我记得，亲爱的，记得 　　<br><br>你那柔发的闪光； 　　<br><a id="more"></a><br>命运使我离开了你， 　　<br><br>我的心沉重而悲伤。 　　<br><br>我记得那些秋夜， 　　<br><br>白桦树叶簌簌响； 　　<br><br>愿白昼变得短暂， 　　<br><br>愿月光光照得时间更长。 　　<br><br>我记得你对我说过： 　　<br><br>“美好的年华就要变成以往， 　　<br><br>你会忘记我，亲爱的， 　　<br><br>和别的女友成对成双。” 　　<br><br>今天菩提树又开花了， 　　<br><br>引起我心中无限惆怅； 　　<br><br>那时我是何等的温柔， 　　<br><br>把花瓣撒落到你的鬈发上。 　　<br><br>啊，爱恋别人心中愁烦， 　　<br><br>我的心不会变凉， 　　<br><br>它会从别人身上想起你， 　　<br><br>像读本心爱的小说那样欢畅。<br><br></center><br><br><br></div>]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux系统管理---工作管理（后台程序管理）]]></title>
      <url>/2017/08/26/Linux%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86-%E5%B7%A5%E4%BD%9C%E7%AE%A1%E7%90%86%EF%BC%88%E5%90%8E%E5%8F%B0%E7%A8%8B%E5%BA%8F%E7%AE%A1%E7%90%86%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>工作管理指的是在当个登陆终端中同时管理多个工作的行为。<br><a id="more"></a></p>
<p>注意事项</p>
<ul>
<li>当前的登陆终端，只能管理当前终端的工作，而不能管理其他登陆终端的工作</li>
<li>放入后台的命令必须可以持续运行一段事件，这样我们才能捕捉和操作这个工作</li>
<li>放入后台执行的命令不能和前台用户有交互或需要前台输入，否则放入后台只能暂停，而不能执行。放入后台类似于Windows中的最小化</li>
</ul>
<h1 id="工作管理的方法"><a href="#工作管理的方法" class="headerlink" title="工作管理的方法"></a>工作管理的方法</h1><ul>
<li><code>命令 &amp;</code> : 把命令放入后台，并在后台执行</li>
<li><code>ctrl + z</code> : 按下 <code>ctrl + z</code>快捷键，放在后台暂停</li>
</ul>
<p>后台执行ping命令，发送20个数据包，并将结果保存到文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ping -c 20 www.baidu.com &gt; baidu.ping &amp;</div></pre></td></tr></table></figure></p>
<p>如果使用 <code>ctrl + z</code>，进程会放到后台，并暂停<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# ping -c 20 www.baidu.com &gt; baidu.ping </div><div class="line">^Z</div><div class="line">[1]+  Stopped                 ping -c 20 www.baidu.com &gt; baidu.ping</div></pre></td></tr></table></figure></p>
<h2 id="jobs-命令"><a href="#jobs-命令" class="headerlink" title="jobs 命令"></a>jobs 命令</h2><p>显示所有后台的进程</p>
<p>参数： </p>
<ul>
<li>-l ： 显示工作的PID </li>
</ul>
<p><strong>PS： <code>+</code> 表示最近一个放入后台的工作，页就是工作恢复时，默认恢复的工作。<code>-</code> 代表倒数第二个放入后台的工作</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# jobs</div><div class="line">[1]+  Stopped                 ping -c 20 www.baidu.com &gt; baidu.ping</div><div class="line">[2]-  Running                 ping -c 20 www.baidu.com &gt; baidu.ping &amp;</div></pre></td></tr></table></figure>
<h2 id="恢复到前台执行"><a href="#恢复到前台执行" class="headerlink" title="恢复到前台执行"></a>恢复到前台执行</h2><ul>
<li>fg %工作号</li>
</ul>
<p>将后台正在运行的进程后者暂停的进程恢复到前台运行状态。<code>%</code> 可以省略<br>工作号可以用 <code>+</code> 或 <code>-</code> 表示，也可以不写，默认是<code>+</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# fg %1</div><div class="line">ping -c 20 www.baidu.com &gt; baidu.ping</div></pre></td></tr></table></figure>
<h2 id="恢复到后台执行"><a href="#恢复到后台执行" class="headerlink" title="恢复到后台执行"></a>恢复到后台执行</h2><ul>
<li>bg %工作号</li>
</ul>
<p>将后台暂停的进程恢复到在后台运行，对已经在运行的进程不生效<br>后台恢复执行的命令是不能和前台有及交互的，否则不能恢复到前台执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# bg 1 </div><div class="line">[1]+ ping -c 20 www.baidu.com &gt; baidu.ping &amp;</div></pre></td></tr></table></figure></p>
<p>如果该进程已经在后台运行,则不会生效：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# bg 1 </div><div class="line">-bash: bg: job 1 already in background</div></pre></td></tr></table></figure></p>
<h1 id="脱离终端"><a href="#脱离终端" class="headerlink" title="脱离终端"></a>脱离终端</h1><p>命令放入后台执行，只能在当前登录的终端只当，一旦用户退出当前终端后台程序就会终止。使后台进程脱离终端执行的方法有：</p>
<ul>
<li>第一种方法是把需要后台执行的命令加入/etc/rc.local文件。参考 <a href="http://twilight.net.cn/2017/08/05/Linux%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86-%E7%B3%BB%E7%BB%9F%E8%BF%90%E8%A1%8C%E7%BA%A7%E5%88%AB%E3%80%81rpm%E5%90%AF%E5%8A%A8%E4%B8%8E%E8%87%AA%E5%90%AF%E5%8A%A8%E3%80%81%E6%BA%90%E7%A0%81%E5%8C%85%E7%9A%84%E5%90%AF%E5%8A%A8%E4%B8%8E%E8%87%AA%E5%90%AF%E5%8A%A8/" title="Twilight&#39;s Blog" target="_blank" rel="external">Linux服务管理—系统运行级别、rpm启动与自启动、源码包的启动与自启动</a></li>
<li>第二种方法是使用系统定时任务，让系统在指定的时间执行某个后台命令</li>
<li>第三种方法是使用nohup命令，标准方法</li>
</ul>
<h2 id="nohup-命令"><a href="#nohup-命令" class="headerlink" title="nohup 命令"></a>nohup 命令</h2><ul>
<li>nohup 命令 &amp;<br>是命令脱离终端，在终端关闭后依然能够存在</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# nohup ping -c 10  www.baidu.com &gt; baidu.ping &amp;</div><div class="line">[1] 28065</div><div class="line">[root@localhost ~]# nohup: 忽略输入重定向错误到标准输出端</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux系统管理---进程管理（查看进程、终止进程、更改进程优先级）]]></title>
      <url>/2017/08/25/Linux%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%EF%BC%88%E6%9F%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BB%88%E6%AD%A2%E8%BF%9B%E7%A8%8B%E3%80%81%E6%9B%B4%E6%94%B9%E8%BF%9B%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h1><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><ul>
<li>ps aux</li>
</ul>
<p>查看所有进程，使用BSD操作系统格式</p>
<ul>
<li>ps -le </li>
</ul>
<p>查看系统所有进程，使用Linux标准命令格式</p>
<a id="more"></a>
<p>参数</p>
<ul>
<li>a ：显示一个终端的所有进程，</li>
<li>u ：显示进程的归属用户及内存的使用情况</li>
<li>x ：显示没有控制终端的进程</li>
<li>-l ：长格式显示。显示更加详细的信息</li>
<li>-e ：显示所有进程，和-A作用一致</li>
</ul>
<p>输出:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# ps aux</div><div class="line">USER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</div><div class="line">root          1  0.0  0.1  19348  1616 ?        Ss   Aug01   0:02 /sbin/init</div><div class="line">root          2  0.0  0.0      0     0 ?        S    Aug01   0:00 [kthreadd]</div><div class="line">root          3  0.0  0.0      0     0 ?        S    Aug01   0:00 [migration/0</div><div class="line">root          4  0.0  0.0      0     0 ?        S    Aug01   0:00 [ksoftirqd/0</div><div class="line">root          5  0.0  0.0      0     0 ?        S    Aug01   0:00 [stopper/0]</div><div class="line">root          6  0.0  0.0      0     0 ?        S    Aug01   0:00 [watchdog/0]</div><div class="line">root          7  0.1  0.0      0     0 ?        S    Aug01   0:37 [events/0]</div><div class="line">root          8  0.0  0.0      0     0 ?        S    Aug01   0:00 [events/0]</div><div class="line">...</div></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">USER</td>
<td style="text-align:left">该进程是由哪个用户产生的</td>
</tr>
<tr>
<td style="text-align:left">PID</td>
<td style="text-align:left">进程的ID号</td>
</tr>
<tr>
<td style="text-align:left">%CPU</td>
<td style="text-align:left">改进程占用的CPU资源的百分比，占用越高，进程越耗费资源</td>
</tr>
<tr>
<td style="text-align:left">%MEM</td>
<td style="text-align:left">该进程占用的物理内存的百分比，占用越高，进程越耗费资源</td>
</tr>
<tr>
<td style="text-align:left">VSZ</td>
<td style="text-align:left">该进程占用的虚拟内存大小，单位是KB</td>
</tr>
<tr>
<td style="text-align:left">RSS</td>
<td style="text-align:left">该进程占用的物理内存大小，单位是KB</td>
</tr>
<tr>
<td style="text-align:left">TTY</td>
<td style="text-align:left">该进程是在哪个终端中运行的。tty1-tty7表示本地控制台，pts/0-255表示虚拟终端</td>
</tr>
<tr>
<td style="text-align:left">STAT</td>
<td style="text-align:left">进程状态。常见状态有 R:运行 S：睡眠 T:停止状态 s：包含子进程 +：位于后台</td>
</tr>
<tr>
<td style="text-align:left">START</td>
<td style="text-align:left">该进程的启动时间</td>
</tr>
<tr>
<td style="text-align:left">TIME</td>
<td style="text-align:left">该进程占用CPU的运算时间，不是系统时间</td>
</tr>
<tr>
<td style="text-align:left">COMMAND</td>
<td style="text-align:left">产生此进程的命令名</td>
</tr>
</tbody>
</table>
<h2 id="pstree-命令"><a href="#pstree-命令" class="headerlink" title="pstree 命令"></a>pstree 命令</h2><p>显示进程树</p>
<ul>
<li>-p：显示进程的PID</li>
<li>-u：显示进程的所属用户</li>
</ul>
<p>执行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# pstree -up</div><div class="line">init(1)─┬─NetworkManager(1581)─┬─dhclient(3561)</div><div class="line">        │                      └─&#123;NetworkManager&#125;(1645)</div><div class="line">        ├─abrtd(1960)</div><div class="line">        ├─acpid(1680)</div><div class="line">        ├─atd(1987)</div><div class="line">        ├─auditd(1462)───&#123;auditd&#125;(1463)</div><div class="line">        ├─automount(1767)─┬─&#123;automount&#125;(1768)</div><div class="line">        │                 ├─&#123;automount&#125;(1769)</div><div class="line">        │                 ├─&#123;automount&#125;(1772)</div><div class="line">        │                 └─&#123;automount&#125;(1775)</div><div class="line">        ├─certmonger(2003)</div><div class="line">        ├─console-kit-dae(2584)─┬─&#123;console-kit-da&#125;(2585)</div><div class="line">        │                       ├─&#123;console-kit-da&#125;(2586)</div><div class="line">        │                       ├─&#123;console-kit-da&#125;(2587)</div><div class="line">        │                       ├─&#123;console-kit-da&#125;(2588)</div><div class="line">        │                       ├─&#123;console-kit-da&#125;(2589)</div><div class="line">        │                       ├─&#123;console-kit-da&#125;(2590)</div><div class="line">        │                       ├─&#123;console-kit-da&#125;(2591)</div><div class="line">        │                       ├─&#123;console-kit-da&#125;(2592)</div><div class="line">        ├─crond(1972)</div><div class="line">        ├─cupsd(1647)</div><div class="line">        ├─dbus-daemon(1567,dbus)───&#123;dbus-daemon&#125;(1570)</div><div class="line">        ├─hald(1692,haldaemon)─┬─hald-runner(1693,root)─┬─hald-addon-acpi(1738,haldaemon)</div><div class="line">        │                      │                        └─hald-addon-inpu(1737)</div><div class="line">        │                      └─&#123;hald&#125;(1694)</div><div class="line">        ├─login(3126)───bash(3166)</div><div class="line">        ├─master(1931)─┬─pickup(21672,postfix)</div><div class="line">        │              └─qmgr(1942,postfix)</div><div class="line">        ├─mingetty(2050)</div><div class="line">        ├─mingetty(2052)</div><div class="line">        ├─mingetty(2054)</div><div class="line">        ├─mingetty(2056)</div><div class="line">        ├─mingetty(2064)</div><div class="line">        ├─modem-manager(1588)</div><div class="line">        ├─polkitd(2720)</div><div class="line">        ├─rpc.statd(1604,rpcuser)</div><div class="line">        ├─rpcbind(1547,rpc)</div><div class="line">        ├─rsyslogd(1496)─┬─&#123;rsyslogd&#125;(1497)</div><div class="line">        │                ├─&#123;rsyslogd&#125;(1498)</div><div class="line">        │                └─&#123;rsyslogd&#125;(1499)</div><div class="line">        ├─sshd(1835)───sshd(21691)───bash(21695)───pstree(21739)</div><div class="line">        ├─udevd(548)─┬─udevd(2062)</div><div class="line">        │            └─udevd(2063)</div><div class="line">        └─wpa_supplicant(1648)</div></pre></td></tr></table></figure></p>
<h1 id="top-命令"><a href="#top-命令" class="headerlink" title="top 命令"></a>top 命令</h1><p>查看系统健康状态</p>
<p>参数</p>
<ul>
<li>-d： 秒数：指定top命令每隔几秒更新。默认3秒</li>
<li>-b： 使用批处理模式输出，一般和 <code>-n</code> 合用</li>
<li>-n： 次数：指定top命令执行的次数。一般和<code>-b</code>合用</li>
</ul>
<p>交互命令：</p>
<ul>
<li>？或h：显示帮助信息</li>
<li>P:以CPU使用率排序，默认是此选项</li>
<li>M：以内存使用率排序</li>
<li>N：以PID排序</li>
<li>q：退出top</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# top</div><div class="line">top - 02:42:13 up  9:01,  2 users,  load average: 0.06, 0.04, 0.05</div><div class="line">Tasks:  97 total,   1 running,  96 sleeping,   0 stopped,   0 zombie</div><div class="line">Cpu(s):  0.2%us,  0.4%sy,  0.0%ni, 99.0%id,  0.4%wa,  0.0%hi,  0.1%si,  0.0%st</div><div class="line">Mem:   1004136k total,   824820k used,   179316k free,    39408k buffers</div><div class="line">Swap:  2031612k total,        0k used,  2031612k free,   596492k cached</div><div class="line"></div><div class="line">   PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND              </div><div class="line">     7 root      20   0     0    0    0 S  2.0  0.0   0:39.59 events/0              </div><div class="line">     1 root      20   0 19348 1616 1304 S  0.0  0.2   0:02.90 init                  </div><div class="line">     2 root      20   0     0    0    0 S  0.0  0.0   0:00.01 kthreadd              </div><div class="line">     3 root      RT   0     0    0    0 S  0.0  0.0   0:00.00 migration/0           </div><div class="line">     4 root      20   0     0    0    0 S  0.0  0.0   0:00.12 ksoftirqd/0           </div><div class="line">     5 root      RT   0     0    0    0 S  0.0  0.0   0:00.00 stopper/0             </div><div class="line">     6 root      RT   0     0    0    0 S  0.0  0.0   0:00.12 watchdog/0            </div><div class="line">     8 root      20   0     0    0    0 S  0.0  0.0   0:00.00 events/0              </div><div class="line">     9 root      20   0     0    0    0 S  0.0  0.0   0:00.00 events_long/0         </div><div class="line">    10 root      20   0     0    0    0 S  0.0  0.0   0:00.00 events_power_ef       </div><div class="line">    11 root      20   0     0    0    0 S  0.0  0.0   0:00.00 cgroup                </div><div class="line">    12 root      20   0     0    0    0 S  0.0  0.0   0:00.00 khelper               </div><div class="line">    13 root      20   0     0    0    0 S  0.0  0.0   0:00.00 netns                 </div><div class="line">    14 root      20   0     0    0    0 S  0.0  0.0   0:00.00 async/mgr             </div><div class="line">    15 root      20   0     0    0    0 S  0.0  0.0   0:00.00 pm                    </div><div class="line">    16 root      20   0     0    0    0 S  0.0  0.0   0:00.27 sync_supers           </div><div class="line">    17 root      20   0     0    0    0 S  0.0  0.0   0:00.25 bdi-default           </div><div class="line">    18 root      20   0     0    0    0 S  0.0  0.0   0:00.00 kintegrityd/0</div></pre></td></tr></table></figure>
<p>第一行</p>
<table>
<thead>
<tr>
<th style="text-align:left">内容</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">02:42:13</td>
<td style="text-align:left">系统当前时间</td>
</tr>
<tr>
<td style="text-align:left">up  9:01</td>
<td style="text-align:left">系统的运行时间</td>
</tr>
<tr>
<td style="text-align:left">2 users</td>
<td style="text-align:left">当前用户数</td>
</tr>
<tr>
<td style="text-align:left"><strong>load average: 0.06, 0.04, 0.05</strong></td>
<td style="text-align:left"><strong>系统在之前1分钟、5分钟、15分钟的平均负载。</strong></td>
</tr>
</tbody>
</table>
<p>第二行</p>
<table>
<thead>
<tr>
<th style="text-align:left">内容</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Tasks:  97 total</td>
<td style="text-align:left">系统中的进程总数</td>
</tr>
<tr>
<td style="text-align:left">1 running</td>
<td style="text-align:left">正在运行的进程数</td>
</tr>
<tr>
<td style="text-align:left">96 sleeping</td>
<td style="text-align:left">睡眠的进程数</td>
</tr>
<tr>
<td style="text-align:left">0 stopped</td>
<td style="text-align:left">正在停止的进程数</td>
</tr>
<tr>
<td style="text-align:left">0 zombie</td>
<td style="text-align:left">僵尸进程</td>
</tr>
</tbody>
</table>
<p>第三行</p>
<table>
<thead>
<tr>
<th style="text-align:left">内容</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Cpu(s):  0.2%us</td>
<td style="text-align:left">用户模式占用的CPU百分比</td>
</tr>
<tr>
<td style="text-align:left">0.4%sy</td>
<td style="text-align:left">系统模式占用的CPU百分比</td>
</tr>
<tr>
<td style="text-align:left">0.0%ni</td>
<td style="text-align:left">改变过优先级的用户进程占用的CPU百分比</td>
</tr>
<tr>
<td style="text-align:left"><strong>99.0%id </strong></td>
<td style="text-align:left"><strong>空闲的CPU百分比</strong></td>
</tr>
<tr>
<td style="text-align:left">0.4%wa</td>
<td style="text-align:left">等该输入/输出的进程占用百分比</td>
</tr>
<tr>
<td style="text-align:left">0.0%hi</td>
<td style="text-align:left">硬中断请求服务占用的CPU百分比</td>
</tr>
<tr>
<td style="text-align:left">0.1%si</td>
<td style="text-align:left">软中断请求服务占用的CPU百分比</td>
</tr>
<tr>
<td style="text-align:left">0.0%st</td>
<td style="text-align:left">st（Steal time）虚拟时间百分比，就是当有虚拟机时，虚拟机CPU等待实际CPU的时间百分比</td>
</tr>
</tbody>
</table>
<p>第四行</p>
<table>
<thead>
<tr>
<th style="text-align:left">内容</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Mem:   1004136k total</td>
<td style="text-align:left">物理内存的总量，单位KB</td>
</tr>
<tr>
<td style="text-align:left">824820k used</td>
<td style="text-align:left">已经使用的物理内存数量</td>
</tr>
<tr>
<td style="text-align:left"><strong>179316k free</strong></td>
<td style="text-align:left"><strong>空闲的物理内存数量</strong></td>
</tr>
<tr>
<td style="text-align:left">39408k buffers</td>
<td style="text-align:left">作为缓冲区的内存数量</td>
</tr>
</tbody>
</table>
<p>第五行</p>
<table>
<thead>
<tr>
<th style="text-align:left">内容</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Swap:  2031612k total</td>
<td style="text-align:left">交换分区（虚拟内存）的总大小</td>
</tr>
<tr>
<td style="text-align:left">824820k used</td>
<td style="text-align:left">已经使用的交换分区的大小</td>
</tr>
<tr>
<td style="text-align:left">0k used</td>
<td style="text-align:left">已经使用的交换分区的大小</td>
</tr>
<tr>
<td style="text-align:left">2031612k free</td>
<td style="text-align:left">空闲交换分区的大小</td>
</tr>
<tr>
<td style="text-align:left">596492k cached</td>
<td style="text-align:left">作为环迅的交换分区的大小</td>
</tr>
</tbody>
</table>
<h1 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h1><h2 id="kill-l-命令"><a href="#kill-l-命令" class="headerlink" title="kill -l 命令"></a>kill -l 命令</h2><ul>
<li>kill -[信号] pid<br>根据进程id杀死单一进程</li>
</ul>
<p>常见信号如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">信号代码</th>
<th style="text-align:center">信号名称</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">SIGHUP</td>
<td style="text-align:center">平滑重启，关闭进程，重新读取配置文件后重启</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">SIGNKILL</td>
<td style="text-align:center">进程法伤问题时，强制结束进程</td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center">SIGTERM</td>
<td style="text-align:center">正常结束的金浩，kill命令的默认信号</td>
</tr>
</tbody>
</table>
<p>杀死pid为14942的进程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">kill -1 14942</div><div class="line">kill -HUP 14942</div></pre></td></tr></table></figure></p>
<h2 id="killall-命令"><a href="#killall-命令" class="headerlink" title="killall 命令"></a>killall 命令</h2><ul>
<li>killall [信号] [选项] 进程名<br>按照进程名杀死进程</li>
</ul>
<p>选项：</p>
<ul>
<li>-i 交互式。询问是否要杀死某个进程</li>
<li>-I 忽略进程名的大小写</li>
</ul>
<p>杀死tomcat进程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">killall -9 -I java</div></pre></td></tr></table></figure></p>
<h2 id="pkill-命令"><a href="#pkill-命令" class="headerlink" title="pkill 命令"></a>pkill 命令</h2><ul>
<li>pkill [信号] [选项] 进程名<br>按照进程名杀死进程</li>
</ul>
<p>该命令的作用与killall类似，只是多出了一个按照终端号结束用户终端的功能</p>
<ul>
<li>-t 终端号： 按照终端号踢出用户。 只有root用户可以操作</li>
</ul>
<p><code>w</code>命令查看当前用户。可知有一个本地终端和两个远程终端。WHAT表示该终端正在执行的命令。pts/1是当前终端的终端号。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@localhost bin]# w</div><div class="line"> 17:10:02 up 50 min,  3 users,  load average: 0.71, 0.21, 0.07</div><div class="line">USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT</div><div class="line">root     tty1     -                16:24   41:19   0.15s  0.15s -bash</div><div class="line">twilight pts/0    192.168.226.1    16:27   42:17   0.08s  0.08s -bash</div><div class="line">root     pts/1    192.168.226.1    16:29    0.00s  0.33s  0.05s w</div></pre></td></tr></table></figure></p>
<p>根据终端号杀死pts/0用户的终端：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pkill -9 -t pts/0</div></pre></td></tr></table></figure></p>
<h1 id="修改进程优先级"><a href="#修改进程优先级" class="headerlink" title="修改进程优先级"></a>修改进程优先级</h1><p><code>ps -le</code>可以查看所有进程的信息，其中包括进程的优先级。PRI表示priority，NI表示nice。两个都是优先级，数字越小代表优先级越高。</p>
<p>注意事项：</p>
<ul>
<li>NI的范围是-20 到 19 </li>
<li>普通用户调整NI值得范围是0~19，而且只能调整自己的进程</li>
<li>普通用户只能调高NI值，而不能降低</li>
<li>root用户才能设定进程NI值为负值，而且可以调整任何用户的进程</li>
<li>PRI(最终值) = PRI(原始值) + NI</li>
<li>用户只能修改NI的值，不能直接修改PRI</li>
</ul>
<h2 id="nice-命令"><a href="#nice-命令" class="headerlink" title="nice 命令"></a>nice 命令</h2><ul>
<li>nice [选项] 命令<br>nice可以给新执行的命令直接赋予NI值，但是不能修改已经存在进程的NI值。</li>
</ul>
<p>选项：</p>
<ul>
<li>-n NI值： 给命令赋予NI值</li>
</ul>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nice -n -5 service httpd start</div></pre></td></tr></table></figure></p>
<h2 id="renice-命令"><a href="#renice-命令" class="headerlink" title="renice 命令"></a>renice 命令</h2><ul>
<li>renice [优先级] PID<br>修改已经存在的进程的NI值的命令</li>
</ul>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">renice -10 2125</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux服务管理---系统运行级别、rpm启动与自启动、源码包的启动与自启动]]></title>
      <url>/2017/08/05/Linux%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86-%E7%B3%BB%E7%BB%9F%E8%BF%90%E8%A1%8C%E7%BA%A7%E5%88%AB%E3%80%81rpm%E5%90%AF%E5%8A%A8%E4%B8%8E%E8%87%AA%E5%90%AF%E5%8A%A8%E3%80%81%E6%BA%90%E7%A0%81%E5%8C%85%E7%9A%84%E5%90%AF%E5%8A%A8%E4%B8%8E%E8%87%AA%E5%90%AF%E5%8A%A8/</url>
      <content type="html"><![CDATA[<h1 id="系统运行级别"><a href="#系统运行级别" class="headerlink" title="系统运行级别"></a>系统运行级别</h1><ul>
<li>runlevel 查看运行级别</li>
<li>init num 设置运行级别<a id="more"></a>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">运行级别</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">关机</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">单用户模式，可以想象为安全模式，主要用户系统修复</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">不完全的命令行模式</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">完全的命令行模式，标准字符界面</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">系统保留</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">图形模式</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">重启动</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# init 3</div><div class="line">[root@localhost ~]# runlevel</div><div class="line">5 3</div></pre></td></tr></table></figure>
<p>修改默认运行级别传统方式是更改/etc/inittab文件。但是在Centos7中，该文件的内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># inittab is no longer used when using systemd.</div><div class="line">#</div><div class="line"># ADDING CONFIGURATION HERE WILL HAVE NO EFFECT ON YOUR SYSTEM.</div><div class="line">#</div><div class="line"># Ctrl-Alt-Delete is handled by /usr/lib/systemd/system/ctrl-alt-del.target</div><div class="line">#</div><div class="line"># systemd uses &apos;targets&apos; instead of runlevels. By default, there are two main targets:</div><div class="line">#</div><div class="line"># multi-user.target: analogous to runlevel 3</div><div class="line"># graphical.target: analogous to runlevel 5</div><div class="line">#</div><div class="line"># To view current default target, run:</div><div class="line"># systemctl get-default</div><div class="line">#</div><div class="line"># To set a default target, run:</div><div class="line"># systemctl set-default TARGET.target</div></pre></td></tr></table></figure></p>
<p>表示该文件已经不起作用，可以使用命令方式修改：</p>
<ul>
<li>multi-user.target: runlevel 3</li>
<li>graphical.target:  runlevel 5</li>
</ul>
<p>使用 <code>systemctl get-default</code> 获取默认级别。使用 <code>systemctl set-default TARGET.target</code> 设置默认级别</p>
<p>获得默认运行级别<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost etc]# systemctl get-default</div><div class="line">graphical.target</div></pre></td></tr></table></figure></p>
<p>设置默认运行级别为字符界面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost etc]# systemctl set-default multi-user.target</div><div class="line">Removed symlink /etc/systemd/system/default.target.</div><div class="line">Created symlink from /etc/systemd/system/default.target to /usr/lib/systemd/system/multi-user.target.</div></pre></td></tr></table></figure></p>
<h1 id="查看自启动状态"><a href="#查看自启动状态" class="headerlink" title="查看自启动状态"></a>查看自启动状态</h1><p><strong>chkconfig –list</strong><br>查看服务自启动状态,可以看到所有RPM包安装的服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@localhost rc.d]# chkconfig --list</div><div class="line">NetworkManager 	0:关闭	1:关闭	2:启用	3:启用	4:启用	5:启用	6:关闭</div><div class="line">abrt-ccpp      	0:关闭	1:关闭	2:关闭	3:启用	4:关闭	5:启用	6:关闭</div><div class="line">abrtd          	0:关闭	1:关闭	2:关闭	3:启用	4:关闭	5:启用	6:关闭</div><div class="line">acpid          	0:关闭	1:关闭	2:启用	3:启用	4:启用	5:启用	6:关闭</div><div class="line">atd            	0:关闭	1:关闭	2:关闭	3:启用	4:启用	5:启用	6:关闭</div><div class="line">auditd         	0:关闭	1:关闭	2:启用	3:启用	4:启用	5:启用	6:关闭</div><div class="line">autofs         	0:关闭	1:关闭	2:关闭	3:启用	4:启用	5:启用	6:关闭</div></pre></td></tr></table></figure>
<h2 id="查看已启动的软件"><a href="#查看已启动的软件" class="headerlink" title="查看已启动的软件"></a>查看已启动的软件</h2><ul>
<li>netstat -an 查看所有端口，查看已连接端口</li>
<li>netstat -tulnp 查看已开启的监听状态的端口</li>
</ul>
<h2 id="rpm如何启动软件"><a href="#rpm如何启动软件" class="headerlink" title="rpm如何启动软件"></a>rpm如何启动软件</h2><ul>
<li><p>通过绝对路径启动（标准启动方式）</p>
<blockquote>
<p>/etc/init.d/httpd start<br>/etc/rc.d/init.d/httpd start </p>
</blockquote>
</li>
<li><p>service 命令启动（rethat系统专有命令）<br><code>service httpd start|stop|restart|status</code> </p>
</li>
</ul>
<h1 id="设置自启动状态"><a href="#设置自启动状态" class="headerlink" title="设置自启动状态"></a>设置自启动状态</h1><ul>
<li><strong>chkconfig [–level] [独立服务名] [on|off]</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost rc.d]# chkconfig --level 2345  httpd on</div><div class="line">[root@localhost rc.d]# chkconfig --list | grep httpd</div><div class="line">httpd          	0:关闭	1:关闭	2:启用	3:启用	4:启用	5:启用	6:关闭</div></pre></td></tr></table></figure>
<ul>
<li>修改/etc/rc.d/rc.local 文件，系统启动时会最后执行文件中的内容，可以加上启动特定服务的命令。最后执行的文件。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line">#</div><div class="line"># This script will be executed *after* all the other init scripts.</div><div class="line"># You can put your own initialization stuff in here if you don&apos;t</div><div class="line"># want to do the full Sys V style init stuff.</div><div class="line"></div><div class="line">touch /var/lock/subsys/local</div><div class="line"></div><div class="line"># 自启动命令</div><div class="line">/etc/init.d/httpd start</div></pre></td></tr></table></figure>
<ul>
<li>ntsysv [级别号] 图形化工具，作用和chkconfig相同。</li>
</ul>
<p><strong>chkconfig 和 ntsysv 做出的更改会同步，但是在rc.local文件中做出的修改，在chkconfig中无法查看到</strong></p>
<h1 id="源码包的自启动"><a href="#源码包的自启动" class="headerlink" title="源码包的自启动"></a>源码包的自启动</h1><p>更改 <code>/etc/rc.d/rc.local</code> 文件，将启动命令追加到文件末尾即可。 <code>chkconfig</code> 命令不能识别源码包服务。</p>
<h1 id="让源码包被service识别"><a href="#让源码包被service识别" class="headerlink" title="让源码包被service识别"></a>让源码包被service识别</h1><p>将源码包的启动脚本复制到init.d目录下，改脚本需要能接受相关参数，比如start|stop等</p>
<h1 id="让源码包的服务能被chkconfig-与ntsysv命令管理"><a href="#让源码包的服务能被chkconfig-与ntsysv命令管理" class="headerlink" title="让源码包的服务能被chkconfig 与ntsysv命令管理"></a>让源码包的服务能被chkconfig 与ntsysv命令管理</h1><ul>
<li><p>在init.d 目录下的脚本中起始处添加 <code># chkconfig: 35 86 76</code></p>
<blockquote>
<p>chkconfig： 运行级别 启动顺序 关闭顺序 (/etc/rc3.d/)</p>
</blockquote>
</li>
<li><p>在脚本中添加 <code># description: ..</code></p>
<blockquote>
<p>说明， 内容随意</p>
</blockquote>
</li>
<li><p><code>chkconfig --add 脚本名称</code> 将init.d下的启动脚本加入chkconfig到命令中</p>
</li>
</ul>
<h1 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h1><p><img src="http://otbrtx8bw.bkt.clouddn.com/linux-service.jpg" alt=""></p>
<p><a href="http://otbr0lg40.bkt.clouddn.com/Linux%E6%9C%8D%E5%8A%A1%E5%88%97%E8%A1%A8.pdf" title="Tony老师的Linux服务列表" target="_blank" rel="external">Tony老师的Linux服务列表</a></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux软件安装---rpm包、源码包]]></title>
      <url>/2017/08/02/Linux%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85-rpm%E5%8C%85%E3%80%81%E6%BA%90%E7%A0%81%E5%8C%85/</url>
      <content type="html"><![CDATA[<h1 id="RPM-安装"><a href="#RPM-安装" class="headerlink" title="RPM 安装"></a>RPM 安装</h1><p><strong>rpm -ivh 全名 </strong><br>安装软件包</p>
<p>选项：</p>
<ul>
<li>-i (install) 安装</li>
<li>-v (verbose) 显示详细信息</li>
<li>-h (hash) 显示进度</li>
</ul>
<h2 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h2><p><strong>rpm -Uvh 包全名（旧版本）</strong><br>如果已经安装就更新，如果没有安装就安装</p>
<ul>
<li>-U (upgrade)升级</li>
</ul>
<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p><strong>rpm -e 包名</strong><br>后台数据库中查找包名对应的文件，然后卸载</p>
<ul>
<li>-e(erase)</li>
<li>–nodeps 不检查依赖性（不提倡使用）</li>
</ul>
<h2 id="查询-q"><a href="#查询-q" class="headerlink" title="查询(-q)"></a>查询(-q)</h2><table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">rpm -q 包名</td>
<td style="text-align:left">查询是否安装软件包</td>
</tr>
<tr>
<td style="text-align:left">rpm -qa</td>
<td style="text-align:left">查询所有已安装的软件包</td>
</tr>
<tr>
<td style="text-align:left">rpm -qi 包名</td>
<td style="text-align:left">查询已安装软件包的信息</td>
</tr>
<tr>
<td style="text-align:left">rpm -qip 包全名</td>
<td style="text-align:left">查看未安装的包的信息</td>
</tr>
<tr>
<td style="text-align:left">rpm -ql 包名</td>
<td style="text-align:left">查看包安装位置（未安装也可以查询-p）</td>
</tr>
<tr>
<td style="text-align:left">rpm -qf 文件名</td>
<td style="text-align:left">查看系统文件属于哪个软件包</td>
</tr>
<tr>
<td style="text-align:left">rpm -qR 包名</td>
<td style="text-align:left">查看包所依赖的软件包</td>
</tr>
</tbody>
</table>
<p>选项：</p>
<ul>
<li>-q (query) 查询</li>
<li>-a (all) 所有</li>
<li>-i (information) 查询软件包信息</li>
<li>-f (file) 查询系统问价属于哪个软件包</li>
<li>-p (package) 查询未安装包信息</li>
<li>-R (requires) 查询软件包的依赖性</li>
<li>-V (Verify) 文件校验</li>
</ul>
<h2 id="rpm文件提取"><a href="#rpm文件提取" class="headerlink" title="rpm文件提取"></a>rpm文件提取</h2><p><strong>rpm2cpio 包全名 | cpio -idv .文件绝对路径</strong><br>从rpm包中提取需要的文件</p>
<ul>
<li>rpm2cpio ： 将rpm转换为cpio格式的命令</li>
<li>cpio ： 标准工具，用户创建软件档案文件和从档案文件中提取文件</li>
</ul>
<p>例如，删除ls命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -rf /bin/ls</div></pre></td></tr></table></figure></p>
<p>从rpm包中提取出ls文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm2cpio /mnt/cdrom/Packages/coreutils-8.4-43.el6.x86_64.rpm | cpio -idv ./bin/ls</div></pre></td></tr></table></figure></p>
<h1 id="yum在线安装"><a href="#yum在线安装" class="headerlink" title="yum在线安装"></a>yum在线安装</h1><h2 id="yum源文件"><a href="#yum源文件" class="headerlink" title="yum源文件"></a>yum源文件</h2><p>yum的源文件位于 <code>/etc/yum.repos.d/CentOS-Base.repo</code> ，具体文件内容如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"># CentOS-Base.repo</div><div class="line">#</div><div class="line"># The mirror system uses the connecting IP address of the client and the</div><div class="line"># update status of each mirror to pick mirrors that are updated to and</div><div class="line"># geographically close to the client.  You should use this for CentOS updates</div><div class="line"># unless you are manually picking other mirrors.</div><div class="line">#</div><div class="line"># If the mirrorlist= does not work for you, as a fall back you can try the </div><div class="line"># remarked out baseurl= line instead.</div><div class="line">#</div><div class="line">#</div><div class="line"></div><div class="line">[base]</div><div class="line">name=CentOS-$releasever - Base - mirrors.aliyun.com</div><div class="line">failovermethod=priority</div><div class="line">baseurl=http://mirrors.aliyun.com/centos/$releasever/os/$basearch/</div><div class="line">        http://mirrors.aliyuncs.com/centos/$releasever/os/$basearch/</div><div class="line">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=os</div><div class="line">gpgcheck=1</div><div class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-6</div><div class="line"></div><div class="line">#released updates </div><div class="line">[updates]</div><div class="line">name=CentOS-$releasever - Updates - mirrors.aliyun.com</div><div class="line">failovermethod=priority</div><div class="line">baseurl=http://mirrors.aliyun.com/centos/$releasever/updates/$basearch/</div><div class="line">        http://mirrors.aliyuncs.com/centos/$releasever/updates/$basearch/</div><div class="line">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=updates</div><div class="line">gpgcheck=1</div><div class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-6</div><div class="line"></div><div class="line">#additional packages that may be useful</div><div class="line">[extras]</div><div class="line">name=CentOS-$releasever - Extras - mirrors.aliyun.com</div><div class="line">failovermethod=priority</div><div class="line">baseurl=http://mirrors.aliyun.com/centos/$releasever/extras/$basearch/</div><div class="line">        http://mirrors.aliyuncs.com/centos/$releasever/extras/$basearch/</div><div class="line">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=extras</div><div class="line">gpgcheck=1</div><div class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-6</div><div class="line"></div><div class="line">#additional packages that extend functionality of existing packages</div><div class="line">[centosplus]</div><div class="line">name=CentOS-$releasever - Plus - mirrors.aliyun.com</div><div class="line">failovermethod=priority</div><div class="line">baseurl=http://mirrors.aliyun.com/centos/$releasever/centosplus/$basearch/</div><div class="line">        http://mirrors.aliyuncs.com/centos/$releasever/centosplus/$basearch/</div><div class="line">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=centosplus</div><div class="line">gpgcheck=1</div><div class="line">enabled=0</div><div class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-6</div><div class="line"></div><div class="line">#contrib - packages by Centos Users</div><div class="line">[contrib]</div><div class="line">name=CentOS-$releasever - Contrib - mirrors.aliyun.com</div><div class="line">failovermethod=priority</div><div class="line">baseurl=http://mirrors.aliyun.com/centos/$releasever/contrib/$basearch/</div><div class="line">        http://mirrors.aliyuncs.com/centos/$releasever/contrib/$basearch/</div><div class="line">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=contrib</div><div class="line">gpgcheck=1</div><div class="line">enabled=0</div><div class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-6</div></pre></td></tr></table></figure>
<p><strong>相关参数：</strong></p>
<ul>
<li>[base] 容器名称，一定要放在[]中</li>
<li>name 容器说明，随便写</li>
<li>mirrorlist 镜像站点</li>
<li>baseurl yum源服务器的地址</li>
<li>enabled 是否生效，1是生效，0不生效，默认生效</li>
<li>gpgcheck 1指数字证书生效</li>
<li>gpgkey 数字证书的公钥文件保存位置。不用修改</li>
</ul>
<h2 id="更换阿里的源"><a href="#更换阿里的源" class="headerlink" title="更换阿里的源"></a>更换阿里的源</h2><ul>
<li><p>备份<br><code>mv CentOS-Base.repo CentOS-Base.repo.backup</code> </p>
</li>
<li><p>下载新的源文件，替换原来的源<br><code>wget -O CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</code></p>
</li>
<li><p>生成缓存<br><code>yum makecache</code></p>
</li>
</ul>
<h1 id="光盘搭建yum"><a href="#光盘搭建yum" class="headerlink" title="光盘搭建yum"></a>光盘搭建yum</h1><ul>
<li><p>挂载光盘<br><code>mount -t iso9660 /dev/sr0 /mnt/cdrom/</code></p>
</li>
<li><p>使网络yum失效。将网络源文件改名为其他文件，或者将 <code>enabled</code> 设为0：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 将网络源文件改名为其他文件</div><div class="line">mv CentOS-Base.repo CentOS-Base.repo.ali.backup</div></pre></td></tr></table></figure>
</li>
<li><p>更改 <code>CentOS-Media.repo</code> 文件。将baseurl 改成光盘目录，将enable改为1:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[c6-media]</div><div class="line">name=CentOS-$releasever - Media</div><div class="line">baseurl=file:///mnt/cdrom</div><div class="line">#        file:///media/cdrom/</div><div class="line">#        file:///media/cdrecorder/</div><div class="line">gpgcheck=1</div><div class="line">enabled=1</div><div class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6</div></pre></td></tr></table></figure>
</li>
<li><p>验证。再次使用 <code>yum list</code> ，可以看到所有源的名称都变成了 <code>c6-media</code>。正是光盘源的名称:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">vte.i686                                                0.25.1-9.el6                         c6-media                                </div><div class="line">vte-devel.i686                                          0.25.1-9.el6                         c6-media                                </div><div class="line">vte-devel.x86_64                                        0.25.1-9.el6                         c6-media                                </div><div class="line">w3m.x86_64                                              0.5.2-19.el6                         c6-media                                </div><div class="line">w3m-img.x86_64                                          0.5.2-19.el6                         c6-media                                </div><div class="line">watchdog.x86_64                                         5.6-5.el6                            c6-media                                </div><div class="line">wavpack.i686                                            4.60-1.1.el6                         c6-media                                </div><div class="line">wavpack-devel.i686                                      4.60-1.1.el6                         c6-media                                </div><div class="line">wavpack-devel.x86_64                                    4.60-1.1.el6                         c6-media                                </div><div class="line">webalizer.x86_64                                        2.21_02-3.3.el6                      c6-media                                </div><div class="line">webkitgtk.i686                                          1.4.3-9.el6_6                        c6-media                                </div><div class="line">webkitgtk-devel.i686                                    1.4.3-9.el6_6                        c6-media                                </div><div class="line">webkitgtk-devel.x86_64                                  1.4.3-9.el6_6                        c6-media                                </div><div class="line">webkitgtk-doc.x86_64                                    1.4.3-9.el6_6                        c6-media                                </div><div class="line">werken-xpath.noarch                                     0.9.4-4.beta.12.6.el6                c6-media                                </div><div class="line">werken-xpath-javadoc.noarch                             0.9.4-4.beta.12.6.el6                c6-media                                </div><div class="line">wireless-tools.i686                                     1:29-6.el6                           c6-media                                </div><div class="line">wireless-tools-devel.i686                               1:29-6.el6                           c6-media                                </div><div class="line">wireless-tools-devel.x86_64                             1:29-6.el6                           c6-media </div><div class="line">...</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="常用-yum-命令"><a href="#常用-yum-命令" class="headerlink" title="常用 yum 命令"></a>常用 yum 命令</h1><ul>
<li><p>查询所有可用软件包列表<br><code>yum list</code> </p>
</li>
<li><p>查询和关键字有关的软件包<br><code>yum search 关键字</code></p>
</li>
<li><p>自动安装指定软件包<br><code>yum -y install 包名</code></p>
</li>
<li><p>升级（如果源中有更新版的软件包）<br><code>yum -y update 包名</code></p>
</li>
<li><p>升级所有软件，包括内核<br><code>yum -y update</code></p>
</li>
<li><p>卸载软件包<br><code>yum -y remove 包名</code></p>
</li>
</ul>
<p><strong>参数：</strong></p>
<ul>
<li>install 安装</li>
<li>remove 卸载</li>
<li>-y 自动回答yes</li>
</ul>
<h2 id="软件组管理命令"><a href="#软件组管理命令" class="headerlink" title="软件组管理命令"></a>软件组管理命令</h2><ul>
<li><p>列出所有可用的软件组列表：<br><code>yum grouplsit</code></p>
</li>
<li><p>安装指定软件组，组名可以由grouplist查询出来<br><code>yum groupinstall 软件组名</code></p>
</li>
<li><p>卸载指定软件组<br><code>yum groupremove 软件组名</code></p>
</li>
</ul>
<h1 id="源码包"><a href="#源码包" class="headerlink" title="源码包"></a>源码包</h1><p>1、进入解压缩命令<br>2、./configure -prefix=/usr/local/apache 安装到指定目录<br>3、make 编译（make clean清除）<br>4、make install编译安装 </p>
<h1 id="rpm包与源码包的异同"><a href="#rpm包与源码包的异同" class="headerlink" title="rpm包与源码包的异同"></a>rpm包与源码包的异同</h1><h2 id="启动方式不同"><a href="#启动方式不同" class="headerlink" title="启动方式不同"></a>启动方式不同</h2><p>rpm包的启动方式：从/etc/init.d/目录下启动，在执行service时也是从/etc/init.d/目录下启动。因此可以将源码包的启动脚本复制到给目录下，即可用service启动。<br>源码包的启动方式：可以随意指定，一般是 <code>/usr/local/</code> ，不可以用service命令管理</p>
<p>安装完毕后，仅有的不同是安装位置不同。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux---权限管理（sudo权限）]]></title>
      <url>/2017/07/26/Linux-sudo%E6%9D%83%E9%99%90/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>sudo</code>命令允许系统管理员让普通用户执行一些或者全部的root命令。不需要暴露root密码，就可以让普通用户执行管理员的命令</p>
<h1 id="修改sudo权限"><a href="#修改sudo权限" class="headerlink" title="修改sudo权限"></a>修改sudo权限</h1><ul>
<li><em>visudo  </em></li>
</ul>
<p>visudo 会自动打开etc下的sudo文件。在文件中加上允许普通用户执行的命令即可，命令格式如下：</p>
<ul>
<li><strong>用户名 ALL=(root) 命令 参数</strong></li>
</ul>
<p><strong>括号中的内容表示在使用sudo时，以括号中的身份来执行命令，之后的命令可以加参数，表示指定命令的指定操作。命令最好是以绝对路径的方式来写。</strong></p>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">twilight ALL=(root) /usr/sbin/shutdown -r</div></pre></td></tr></table></figure></p>
<p>twilight用户就可以执行shutdown -r命令，不过仅仅是-r。其他参数还是不允许的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo shutdown -r</div></pre></td></tr></table></figure></p>
<p>当我尝试不使用绝对路径，保存退出时会报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">twilight ALL=(root) useradd</div></pre></td></tr></table></figure></p>
<p>报错信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# visudo</div><div class="line">visudo：&gt;&gt;&gt; /etc/sudoers：syntax error 在行 94 附近&lt;&lt;&lt;</div><div class="line">现在做什么？</div><div class="line">选项有：</div><div class="line">  重新编辑 sudoers 文件(e)</div><div class="line">  退出，不保存对 sudoers 文件的更改(x)</div><div class="line">  退出并将更改保存到 sudoers 文件(危险！)(Q)</div><div class="line"></div><div class="line">现在做什么？x</div></pre></td></tr></table></figure></p>
<h1 id="sudo-l"><a href="#sudo-l" class="headerlink" title="sudo -l"></a>sudo -l</h1><p>可以使用 <code>sudo -l</code>查看当前普通用户能使用 <code>sudo</code> 执行的权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[twilight@localhost root]$ sudo -l</div><div class="line">[sudo] password for twilight: </div><div class="line">匹配此主机上 twilight 的默认条目：</div><div class="line">    !visiblepw, always_set_home, env_reset, env_keep=&quot;COLORS DISPLAY</div><div class="line">    HOSTNAME HISTSIZE KDEDIR LS_COLORS&quot;, env_keep+=&quot;MAIL PS1 PS2 QTDIR</div><div class="line">    USERNAME LANG LC_ADDRESS LC_CTYPE&quot;, env_keep+=&quot;LC_COLLATE</div><div class="line">    LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES&quot;, env_keep+=&quot;LC_MONETARY</div><div class="line">    LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE&quot;, env_keep+=&quot;LC_TIME LC_ALL</div><div class="line">    LANGUAGE LINGUAS _XKB_CHARSET XAUTHORITY&quot;,</div><div class="line">    secure_path=/sbin\:/bin\:/usr/sbin\:/usr/bin</div><div class="line"></div><div class="line">用户 twilight 可以在该主机上运行以下命令：</div><div class="line">    (root) /usr/sbin/useradd</div></pre></td></tr></table></figure></p>
<p>Centos在执行sudo命令时可以不指定绝对路径：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[twilight@localhost root]$ sudo useradd tom</div></pre></td></tr></table></figure></p>
<p>查看是否生效：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[twilight@localhost root]$ cat /etc/passwd | grep tom </div><div class="line">tom:x:1004:1006::/home/tom:/bin/bash</div></pre></td></tr></table></figure></p>
<h1 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h1><p>如果用sudo给普通用户赋予passwd命令的权限，那么普通用户就可以用sudo命令来修改root密码，这是十分不安全的。不过，在赋予权限时可以加上一些限制，将普通用户可用的命令限制在合理范围内。</p>
<ul>
<li>可以使用正则表达式，不需要加引号</li>
<li>使用 <code>!</code> 取反，表示不允许执行这条命令</li>
</ul>
<p>例如以下权限。twilight用户只能更改普通用户的密码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">twilight ALL=/usr/bin/passwd [a-zA-Z]*, !/usr/bin/passwd root, !/usr/bin/passwd &quot;&quot;</div></pre></td></tr></table></figure></p>
<p>此时查看twilight的sudo权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@localhost ~]# su twilight</div><div class="line">[twilight@localhost root]$ sudo -l</div><div class="line">匹配此主机上 twilight 的默认条目：</div><div class="line">    !visiblepw, always_set_home, env_reset, env_keep=&quot;COLORS DISPLAY HOSTNAME HISTSIZE KDEDIR LS_COLORS&quot;, env_keep+=&quot;MAIL PS1 PS2</div><div class="line">    QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE&quot;, env_keep+=&quot;LC_COLLATE LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES&quot;,</div><div class="line">    env_keep+=&quot;LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE&quot;, env_keep+=&quot;LC_TIME LC_ALL LANGUAGE LINGUAS _XKB_CHARSET</div><div class="line">    XAUTHORITY&quot;, secure_path=/sbin\:/bin\:/usr/sbin\:/usr/bin</div><div class="line"></div><div class="line">用户 twilight 可以在该主机上运行以下命令：</div><div class="line">    (root) /usr/bin/passwd [a-zA-Z]*, (root) !/usr/bin/passwd root, (root) !/usr/bin/passwd \&quot;\&quot;</div></pre></td></tr></table></figure></p>
<p>此时尝试更改root密码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[twilight@localhost root]$ sudo passwd root </div><div class="line">[sudo] password for twilight: </div><div class="line">对不起，用户 twilight 无权以 root 的身份在 localhost.localdomain 上执行 /bin/passwd root。</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux---权限管理（ACL权限）]]></title>
      <url>/2017/07/25/Linux-ACL%E6%9D%83%E9%99%90/</url>
      <content type="html"><![CDATA[<h1 id="ACL简介"><a href="#ACL简介" class="headerlink" title="ACL简介"></a>ACL简介</h1><p>目前已知的三种权限分别是，所有者权限，所属组权限，和其他人权限。这三种权限有时并不能很好的指定所有用户的权限。当无法使用这三种权限准确的指定一个用户的权限时，可以使用acl给用户或用户组指定特定的权限。例如，所有者和所属组具有最高权限。其他人具有0权限。此时我希望给一个用户设定r-x权限。这时用以上三种权限很难实现。就可以用acl指定该用户的权限。</p>
<h1 id="设定-查看-ACL权限"><a href="#设定-查看-ACL权限" class="headerlink" title="设定/查看 ACL权限"></a>设定/查看 ACL权限</h1><ul>
<li><strong>getfacl 文件名  ： 查看acl权限</strong></li>
<li><strong>setfacl 选项 文件名 ： 设置acl权限</strong></li>
</ul>
<p>常见参数：</p>
<ul>
<li>-m 设定ACL权限</li>
<li>-x 删除指定的ACL权限</li>
<li>-b 删除所有的ACL权限</li>
<li>-d 设定默认ACL权限</li>
<li>-k 删除默认ACL权限</li>
<li><p>-R 递归设定ACL权限</p>
</li>
<li><p>给特定用户设置acl权限：</p>
</li>
</ul>
<blockquote>
<p>setfacl -m u:username:rx 文件或目录</p>
</blockquote>
<ul>
<li>给特定用户组设置acl权限：</li>
</ul>
<blockquote>
<p>setfacl -m g:groupname:rx 文件或目录</p>
</blockquote>
<p>例如有test目录，所有者是twilight，所属组是stu，都具有最高权限，具体属性如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">drwxrwx---.  2 twilight stu         6 7月  25 20:05 test</div></pre></td></tr></table></figure></p>
<p>如果此时希望添加一个lw用户，使之具有r-x权限，可以使用acl：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setfacl -m u:lw:rx test</div></pre></td></tr></table></figure></p>
<p>用getfacl查看acl权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@localhost home]# getfacl test</div><div class="line"># file: test</div><div class="line"># owner: twilight</div><div class="line"># group: stu</div><div class="line">user::rwx</div><div class="line">user:lw:r-x</div><div class="line">group::rwx</div><div class="line">mask::rwx</div><div class="line">other::---</div></pre></td></tr></table></figure></p>
<p>此时查看test目录的属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">drwxrwx---+  2 twilight stu         6 7月  25 20:05 test</div></pre></td></tr></table></figure></p>
<h1 id="最大有效权限-mask"><a href="#最大有效权限-mask" class="headerlink" title="最大有效权限 mask"></a>最大有效权限 mask</h1><p>mask 是最大权限，用户指定的权限需要与mask进行与运算，运算的结果才是用户实际具有的权限。<br><strong>setfacl -m m:r-x 文件或目录</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[root@localhost home]# setfacl -m m:r-x test</div><div class="line">[root@localhost home]# getfacl test</div><div class="line"># file: test</div><div class="line"># owner: twilight</div><div class="line"># group: stu</div><div class="line">user::rwx</div><div class="line">user:lw:rwx			#effective:r-x</div><div class="line">group::rwx			#effective:r-x</div><div class="line">mask::r-x</div><div class="line">other::---</div></pre></td></tr></table></figure>
<h1 id="删除-ACL-权限"><a href="#删除-ACL-权限" class="headerlink" title="删除 ACL 权限"></a>删除 ACL 权限</h1><ul>
<li><p>删除指定用户的acl权限</p>
<blockquote>
<p>setfacl -x u:用户名 文件或目录</p>
</blockquote>
</li>
<li><p>删除指定用户组的acl权限</p>
<blockquote>
<p>setfacl -x g:用户组名 文件或目录</p>
</blockquote>
</li>
<li><p>删除文件的所有acl权限</p>
<blockquote>
<p>setfacl -b 文件名</p>
</blockquote>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@localhost home]# setfacl -x u:lw test</div><div class="line">[root@localhost home]# getfacl test</div><div class="line"># file: test</div><div class="line"># owner: twilight</div><div class="line"># group: stu</div><div class="line">user::rwx</div><div class="line">group::rwx</div><div class="line">mask::rwx</div><div class="line">other::---</div></pre></td></tr></table></figure>
<h1 id="递归权限"><a href="#递归权限" class="headerlink" title="递归权限"></a>递归权限</h1><p>父目录在设定acl权限是，所有的已存在的子文件俺和子目录也会具有相同的acl权限。只能针对目录<br><strong>setfacl -m u:lw:r-x -R 目录名</strong></p>
<p>给test目录赋予r-x递归权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setfacl -m u:lw:r-x -R test</div></pre></td></tr></table></figure></p>
<p>test的子目录和子文件都会有acl权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost test]# ll</div><div class="line">总用量 0</div><div class="line">drwxrwxr-x+ 2 root root 6 7月  25 21:15 dir</div><div class="line">-rw-rw-r--+ 1 root root 0 7月  25 21:15 file</div></pre></td></tr></table></figure></p>
<p>但是此时会出现一个问题，test的权限是r-x，代表可以对目录进行读和进入目录操作。但是同样的r-x对于文件来说作用是不同的。对于文件r-x表示读和执行，执行权限是最高权限。这样给文件赋予r-x权限是很不安全的。这种情况叫做<strong>权限溢出</strong>。<br>这是acl最大的缺陷，只能手动的修改权限。</p>
<h1 id="默认权限"><a href="#默认权限" class="headerlink" title="默认权限"></a>默认权限</h1><p>父目录中给所有新建的子文件都会集成父目录的ACL权限。<br><strong>setfacl -m d:u:用户名:r-x 目录名</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[root@localhost home]# setfacl -m d:u:lw:r-x test</div><div class="line">[root@localhost home]# getfacl test</div><div class="line"># file: test</div><div class="line"># owner: twilight</div><div class="line"># group: stu</div><div class="line">user::rwx</div><div class="line">user:lw:rw-</div><div class="line">group::rwx</div><div class="line">mask::rwx</div><div class="line">other::---</div><div class="line">default:user::rwx</div><div class="line">default:user:lw:r-x</div><div class="line">default:group::rwx</div><div class="line">default:mask::rwx</div><div class="line">default:other::---</div></pre></td></tr></table></figure>
<h1 id="递归权限-和-默认权限的异同"><a href="#递归权限-和-默认权限的异同" class="headerlink" title="递归权限 和 默认权限的异同"></a>递归权限 和 默认权限的异同</h1><ul>
<li>递归权限：对当前已存在的文件</li>
<li>默认权限： 对该目录接下来新建的子文件</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux---Vim常用命令]]></title>
      <url>/2017/07/25/Linux-Vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>先上图：<br><img src="http://otbrtx8bw.bkt.clouddn.com/VIM%E9%94%AE%E4%BD%8D%E6%8C%87%E4%BB%A4%E5%9B%BE.gif" alt="VIM键位图"></p>
<h1 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h1><p>vim 文件名 ： 光标定位到最后一行，<br>vim +[num] 文件名 ： 定位到第num行，如果num过大，热到最后一行<br>vim +/str 文件名  ： 定位到str第一次出现的行。此时按n可以在所有的str之间切换<br>vim 文件1 文件2 文件… ： 创建多个文件</p>
<ul>
<li>:n   向后切换文件</li>
<li>:N(:prev)   向前切换文件</li>
</ul>
<h1 id="底行模式"><a href="#底行模式" class="headerlink" title="底行模式"></a>底行模式</h1><ul>
<li>:w 保存</li>
<li>:q 退出</li>
<li>:! 强制退出</li>
<li>:ls 列出所有文件</li>
<li>:n 下一个</li>
<li>:N(:prev) 前一个</li>
<li>:l5 定位到第5行</li>
<li>/xxx 从光标位置向后搜索，将光标定位在xxx第一次出现的位置</li>
<li>?xxx 从光标位置向前搜索，将光标定位在xxx第一次出现的位置</li>
</ul>
<h1 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h1><ul>
<li>hjkl左下上右</li>
<li>crtl + f 向下翻页</li>
<li>crtl + b 向上翻页</li>
<li>crtl + d 向下翻半页</li>
<li>crtl + u 向上翻半页</li>
</ul>
<h1 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h1><ul>
<li>dd 删除光标所在行</li>
<li>o 在光标所在行的下方插入一行，并切换到输入模式</li>
<li>yy 复制光标所在行</li>
<li>p(小写) 在光标所在行的下方粘贴</li>
<li>P(大写) 在光标所在行的上方粘贴</li>
<li>Ctrl + v 从光标当前位置开始，选中光标起点和终点所构成的矩形区域，再按一下Ｃtrl + v结束</li>
<li>x 删除光标所在字符</li>
<li>j 删除两行之间的换行符</li>
<li>u 撤销</li>
<li>U 撤销一行的全部操作</li>
</ul>
<h1 id="追加"><a href="#追加" class="headerlink" title="追加"></a>追加</h1><ul>
<li>i 命令可以在当前光标之前插入文本。</li>
<li>a 命令可以在当前光标之后插入文本。</li>
<li>o 命令可以在当前行的下面另起一行，并使当前模式转为Insert模式。</li>
<li>O 命令(注意是大写的字母O)将在当前行的上面另起一行。</li>
</ul>
<h1 id="放弃编辑"><a href="#放弃编辑" class="headerlink" title="放弃编辑"></a>放弃编辑</h1><ul>
<li>:q! 丢弃所有的修改并退出</li>
<li>:e! 放弃所有修改并重新载入该文件的原始内容</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux---权限管理（chmod、umask）]]></title>
      <url>/2017/07/25/Linux-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%EF%BC%88chmod%E3%80%81umask%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="chmod-命令"><a href="#chmod-命令" class="headerlink" title="chmod 命令"></a>chmod 命令</h1><p><strong>chmod [选项] 模式 文件名</strong><br>选项： </p>
<ul>
<li>-R 递归</li>
</ul>
<p>模式：</p>
<ul>
<li>[ugoa][+-=][rwx] 对指定的用户增加和删除权限</li>
<li><p>[mode=421] 用数字表示权限</p>
</li>
<li><p>-u 所有者</p>
</li>
<li>-g 所属组</li>
<li>-o 其他人</li>
<li>-a 所有人</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">chmod u+x testdata 给所有者添加执行权限</div><div class="line">chmod u-x testdata 删除所有者的执行权限</div><div class="line">chmod a+x testdata 给所有用户添加执行权限</div><div class="line">chmod u+x,o+w testdata 不同用户之间用逗号隔开</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">chmod u=rwx testdata 赋予所有者rwx</div><div class="line">chmod u=rw- testdata 所有者rw-</div><div class="line">chmod u=r testdata 所有者r--</div><div class="line">chmod u=rw,g=r,o=r testdata 所有者rw-,所有组r--,其他人r--</div></pre></td></tr></table></figure>
<p>权限数字表示：</p>
<blockquote>
<p>r–4<br>w–2<br>x–1 </p>
</blockquote>
<p>常用权限</p>
<ul>
<li>777–rwxrwxrwx</li>
<li>755–rwxr-xr-x</li>
<li>644–rw-r–r–</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 777 testdata</div></pre></td></tr></table></figure>
<h1 id="权限对文件的作用"><a href="#权限对文件的作用" class="headerlink" title="权限对文件的作用"></a>权限对文件的作用</h1><ul>
<li>r：读取文件内容（cat more head tail）</li>
<li>w：编辑、新增、修改文件内容（vi echo）</li>
<li>x：可执行</li>
</ul>
<p>有写权限并不能删除文件，因为文件的信息保存在目录中，还需要目录也有相应的权限。</p>
<h1 id="权限对目录的作用"><a href="#权限对目录的作用" class="headerlink" title="权限对目录的作用"></a>权限对目录的作用</h1><ul>
<li>r:可以查看目录下的文件名（ls）</li>
<li>w：具有修改目录结构的权限。如新建文件和目录，删除目录下的文件和目录，重命名此目录下的文件和目录，剪切（touch rm mv cp）</li>
<li><p>x：可以进入目录（cd）</p>
</li>
<li><p>文件最高权限是：x</p>
</li>
<li>目录的最高权限是：w（5，7）</li>
</ul>
<h1 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h1><p><strong> chown 所有者[:|.]所属组 </strong></p>
<p>如果需要让某个用户具有某个文件的所有权限，可以用chown将文件的所有者改为该用户，然后给文件的所有者赋予最高权限即可。之前的o是对于所有其他用户赋予的权限，不安全。</p>
<p>例如，abc文件的属性如下，只有root用户可以修改文件，如果我现在想让twilight用户对这个文件具有修改权限。可以把文件的所有者改为twilight<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-rw-r--r--. 1 root root 12 7月  25 09:09 abc</div></pre></td></tr></table></figure></p>
<p>更改文件所有者，此时twilight用户已经可以修改文件内容了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">chown twilight abc</div><div class="line">// 查看文件属性</div><div class="line">[twilight@localhost test]$ ll</div><div class="line">总用量 4</div><div class="line">-rw-r--r--. 1 twilight root 12 7月  25 09:09 abc</div></pre></td></tr></table></figure></p>
<p>chgrp 将文件赋予用户组，用法与chown类似<br><strong>chgrp 组名 文件名</strong></p>
<h1 id="文件的默认权限"><a href="#文件的默认权限" class="headerlink" title="文件的默认权限"></a>文件的默认权限</h1><p><strong>umask 查看默认权限</strong><br><strong>umask vlaue 暂时设置umask（root默认是0022）</strong></p>
<ul>
<li>0 文件特殊权限</li>
<li><p>022 文件默认权限</p>
</li>
<li><p>文件默认不能有执行权限，必须由手工赋予执行权限</p>
</li>
<li>文件的默认权限最大为666</li>
<li>新建文件的默认权限，为666减umask值</li>
</ul>
<ul>
<li>目录默认最大权限为777 </li>
<li>建立文件之后的默认权限为777减umask值</li>
</ul>
<p>关于umask的计算方式，网上的说法很多，简单地说,就是从最大权限中拿走对应的权限。如果umask为022，那么新建一个文件时<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">file:  110 110 110</div><div class="line">umask: 000 010 010</div><div class="line">result:110 100 100</div></pre></td></tr></table></figure></p>
<p>如果umask为033，那么结果还是644：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">file:  110 110 110</div><div class="line">umask: 000 011 011</div><div class="line">result:110 100 100</div></pre></td></tr></table></figure></p>
<p>永久修改umask 需要修改文件</p>
<ul>
<li>vi /etc/profile</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux---远程登陆Linux、互传文件]]></title>
      <url>/2017/07/25/Linux-%E8%BF%9C%E7%A8%8B%E7%99%BB%E9%99%86Linux%E3%80%81%E4%BA%92%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h1 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h1><p>Linux 与 Linux之间最简单和安全的通信方式</p>
<ul>
<li>远程登陆Linux服务器：<br><strong> ssh 用户名@ip</strong></li>
</ul>
<p>第一次使用时需要下载公钥，输入yes即可，之后输入对应账号的密码即可登陆到Linux：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ ssh root@192.168.226.128</div><div class="line">The authenticity of host &apos;192.168.226.128 (192.168.226.128)&apos; can&apos;t be established.</div><div class="line">ECDSA key fingerprint is SHA256:dOe26KCDHHBXH9pUKk70HlTeAN8ItC+Z8fnUvs9Amhs.</div><div class="line">Are you sure you want to continue connecting (yes/no)? yes</div><div class="line"></div><div class="line">Warning: Permanently added &apos;192.168.226.128&apos; (ECDSA) to the list of known hosts.</div><div class="line">root@192.168.226.128&apos;s password:</div><div class="line">Last login: Tue Jul 25 08:22:54 2017 from 192.168.226.1</div></pre></td></tr></table></figure></p>
<ul>
<li>下载文件(-r表示目录)：<br><strong>scp [-r] 用户名@ip:文件路径 本地路径</strong></li>
</ul>
<p>将远程的文件下载到本地的D盘，因为没有登陆，所以需要输入用户密码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ scp root@192.168.226.128:/root/Hexo.md /D/</div><div class="line">root@192.168.226.128&apos;s password:</div><div class="line">Hexo.md</div></pre></td></tr></table></figure></p>
<ul>
<li>上传文件(-r表示目录)：<br><strong>scp [-r] 本地文件 用户名@ip:上传路径</strong></li>
</ul>
<p>上传一个目录到Linux，要加参数-r<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ scp -r test root@192.168.226.128:/root</div><div class="line">root@192.168.226.128&apos;s password:</div><div class="line">abc</div></pre></td></tr></table></figure></p>
<p>意外的发现git的Windows客户端完全可以当成一个Linux主机来使用，ssh需要两台Linux主机，而我只有一个虚拟机。而且git本身就是用ssh协议的，因为有git我才能尝试使用上面几个命令。  &lt;(▰˘◡˘▰)&gt; </p>
<h1 id="Xshell"><a href="#Xshell" class="headerlink" title="Xshell"></a>Xshell</h1><p>一款远程Linux登陆工具，可以在Windows上登陆Linux，比SecureCRT更强大，而且免费，</p>
<p>天上当前会话的名称，目的主机的ip、端口号采用默认的22端口，然后确定即可。</p>
<p><img src="http://otbrtx8bw.bkt.clouddn.com/xshell-show.png" alt="xshell"></p>
<h1 id="winSCP"><a href="#winSCP" class="headerlink" title="winSCP"></a>winSCP</h1><p>非常好用的工具，很强大，可以在windows和Linux之间互传文件。</p>
<p>首先选择SFTP协议，填上目的主机的ip地址，端口号采取默认的22端口，然后填写用户名和密码</p>
<p><img src="http://otbrtx8bw.bkt.clouddn.com/winSCP-login.png" alt="Login"></p>
<p>然后可以看到左边是window的目录结构，右边是Linux的目录结构，要复制文件只需要拖拽文件到另外一边即可，很方便</p>
<p><img src="http://otbrtx8bw.bkt.clouddn.com/winSCP-file.png" alt="file"></p>
<p>还有一款软件叫SecureCRT，听说是收费的，而且功能不及Xshell，所以已弃用。</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux---网络管理（常用命令）]]></title>
      <url>/2017/07/24/linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%EF%BC%88%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="网络查看"><a href="#网络查看" class="headerlink" title="网络查看"></a>网络查看</h1><ul>
<li><strong>ifconfig </strong>： 查看与临时配置网络</li>
<li><strong>ifdown 网卡设备名 </strong>： 关闭网卡</li>
<li><strong>ifup 网卡设备名</strong> ： 启用网卡</li>
</ul>
<h1 id="netstat-网络状态查询"><a href="#netstat-网络状态查询" class="headerlink" title="netstat 网络状态查询"></a><strong>netstat 网络状态查询</strong></h1><ul>
<li>-t 列出TCP协议端口</li>
<li>-u 列出UDP协议端口</li>
<li>-n 不适用域名与服务名，而是用ip地址和端口号</li>
<li>-l 仅列出在监听端口</li>
<li>-a 所有的连接</li>
<li>-r 路由表</li>
</ul>
<p>常用的组合：</p>
<ul>
<li>an 所有的连接和端口</li>
<li>tuln 查看正在监听TCP（t）和UDP（u）的端口</li>
<li>rn 查看网关 route -n  </li>
</ul>
<p>组合命令，查看系统中正在监听的端口数量：</p>
<blockquote>
<p>netstat -tuln | grep LISTEN | wc -l </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">[root@localhost Tools]# netstat -tuln</div><div class="line">Active Internet connections (only servers)</div><div class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State      </div><div class="line">tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN     </div><div class="line">tcp        0      0 192.168.122.1:53        0.0.0.0:*               LISTEN     </div><div class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN     </div><div class="line">tcp        0      0 127.0.0.1:631           0.0.0.0:*               LISTEN     </div><div class="line">tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN     </div><div class="line">tcp6       0      0 :::111                  :::*                    LISTEN     </div><div class="line">tcp6       0      0 :::22                   :::*                    LISTEN     </div><div class="line">tcp6       0      0 ::1:631                 :::*                    LISTEN     </div><div class="line">tcp6       0      0 ::1:25                  :::*                    LISTEN     </div><div class="line">udp        0      0 0.0.0.0:5353            0.0.0.0:*                          </div><div class="line">udp        0      0 0.0.0.0:48437           0.0.0.0:*                          </div><div class="line">udp        0      0 127.0.0.1:323           0.0.0.0:*                          </div><div class="line">udp        0      0 0.0.0.0:54268           0.0.0.0:*                          </div><div class="line">udp        0      0 192.168.122.1:53        0.0.0.0:*                          </div><div class="line">udp        0      0 0.0.0.0:67              0.0.0.0:*                          </div><div class="line">udp        0      0 0.0.0.0:68              0.0.0.0:*                          </div><div class="line">udp6       0      0 ::1:323                 :::*                               </div><div class="line">udp6       0      0 :::20514                :::*</div></pre></td></tr></table></figure>
<h1 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h1><p>翻译域名对应的ip和DNS</p>
<p>查看百度的ip，其中Server表示当前的DNS：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@localhost Tools]# nslookup www.baidu.com</div><div class="line">Server:		192.168.226.2</div><div class="line">Address:	192.168.226.2#53</div><div class="line"></div><div class="line">Non-authoritative answer:</div><div class="line">www.baidu.com	canonical name = www.a.shifen.com.</div><div class="line">Name:	www.a.shifen.com</div><div class="line">Address: 115.239.211.112</div></pre></td></tr></table></figure></p>
<h1 id="ping-ip"><a href="#ping-ip" class="headerlink" title="ping ip"></a>ping ip</h1><p>判断网络状况</p>
<ul>
<li>-c 发送数据包的次数<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@localhost Tools]# ping -c 3 www.baidu.com</div><div class="line">PING www.a.shifen.com (115.239.210.27) 56(84) bytes of data.</div><div class="line">64 bytes from 115.239.210.27 (115.239.210.27): icmp_seq=1 ttl=128 time=28.0 ms</div><div class="line">64 bytes from 115.239.210.27 (115.239.210.27): icmp_seq=2 ttl=128 time=19.8 ms</div><div class="line">64 bytes from 115.239.210.27 (115.239.210.27): icmp_seq=3 ttl=128 time=28.4 ms</div><div class="line"></div><div class="line">--- www.a.shifen.com ping statistics ---</div><div class="line">3 packets transmitted, 3 received, 0% packet loss, time 2004ms</div><div class="line">rtt min/avg/max/mdev = 19.891/25.488/28.485/3.963 ms</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h1><p><strong>telnet ip port</strong><br>明文传递数据，不安全，已弃用。现在可以用来探测对方的端口是否开启</p>
<p>windows也有telnet协议，只不过，默认是关闭的，使用telnet探测虚拟机的22端口，会进入一个空白的画面。虽然不能控制虚拟机，但是可以说明22端口是可用的。如果端口不可用会提示链接失败。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">telnet 192.168.226.128 22</div></pre></td></tr></table></figure>
<h1 id="traceroute"><a href="#traceroute" class="headerlink" title="traceroute"></a>traceroute</h1><p> <strong>traceroute ip（域名）</strong><br>路由跟踪命令</p>
<ul>
<li>-n 使用ip，速度更快</li>
<li>-q 每次发送的数据包数量，默认是3</li>
<li>-m 设置跳数，默认是30</li>
</ul>
<p>win中使用tracert命令达到相同的效果</p>
<h1 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h1><p>抓包工具</p>
<ul>
<li>-i 指定网卡</li>
<li>-nn 键给数据包中的域名与服务转为ip和端口</li>
<li>-X 以十六进制和ASCII吗显示数据包内容</li>
<li>port 指定监听的端口</li>
</ul>
<ul>
<li>tcpdump -i ens33 -nn -X port 21 检查21端口的数据包</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">[root@localhost network-scripts]# tcpdump -i ens33 -nn -X </div><div class="line">tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</div><div class="line">listening on ens33, link-type EN10MB (Ethernet), capture size 65535 bytes</div><div class="line">11:44:39.513385 IP 192.168.42.1.55904 &gt; 239.255.255.250.1900: UDP, length 174</div><div class="line">	0x0000:  4500 00ca 1342 0000 0111 cb3d c0a8 2a01  E....B.....=..*.</div><div class="line">	0x0010:  efff fffa da60 076c 00b6 3d68 4d2d 5345  .....`.l..=hM-SE</div><div class="line">	0x0020:  4152 4348 202a 2048 5454 502f 312e 310d  ARCH.*.HTTP/1.1.</div><div class="line">	0x0030:  0a48 4f53 543a 2032 3339 2e32 3535 2e32  .HOST:.239.255.2</div><div class="line">	0x0040:  3535 2e32 3530 3a31 3930 300d 0a4d 414e  55.250:1900..MAN</div><div class="line">	0x0050:  3a20 2273 7364 703a 6469 7363 6f76 6572  :.&quot;ssdp:discover</div><div class="line">	0x0060:  220d 0a4d 583a 2031 0d0a 5354 3a20 7572  &quot;..MX:.1..ST:.ur</div><div class="line">	0x0070:  6e3a 6469 616c 2d6d 756c 7469 7363 7265  n:dial-multiscre</div><div class="line">	0x0080:  656e 2d6f 7267 3a73 6572 7669 6365 3a64  en-org:service:d</div><div class="line">	0x0090:  6961 6c3a 310d 0a55 5345 522d 4147 454e  ial:1..USER-AGEN</div><div class="line">	0x00a0:  543a 2047 6f6f 676c 6520 4368 726f 6d65  T:.Google.Chrome</div><div class="line">	0x00b0:  2f35 392e 302e 3330 3731 2e31 3034 2057  /59.0.3071.104.W</div><div class="line">	0x00c0:  696e 646f 7773 0d0a 0d0a                 indows....</div><div class="line">11:44:40.514356 IP 192.168.42.1.55904 &gt; 239.255.255.250.1900: UDP, length 174</div><div class="line">	0x0000:  4500 00ca 1343 0000 0111 cb3c c0a8 2a01  E....C.....&lt;..*.</div><div class="line">	0x0010:  efff fffa da60 076c 00b6 3d68 4d2d 5345  .....`.l..=hM-SE</div><div class="line">	0x0020:  4152 4348 202a 2048 5454 502f 312e 310d  ARCH.*.HTTP/1.1.</div><div class="line">	0x0030:  0a48 4f53 543a 2032 3339 2e32 3535 2e32  .HOST:.239.255.2</div><div class="line">	0x0040:  3535 2e32 3530 3a31 3930 300d 0a4d 414e  55.250:1900..MAN</div><div class="line">	0x0050:  3a20 2273 7364 703a 6469 7363 6f76 6572  :.&quot;ssdp:discover</div><div class="line">	0x0060:  220d 0a4d 583a 2031 0d0a 5354 3a20 7572  &quot;..MX:.1..ST:.ur</div><div class="line">	0x0070:  6e3a 6469 616c 2d6d 756c 7469 7363 7265  n:dial-multiscre</div><div class="line">	0x0080:  656e 2d6f 7267 3a73 6572 7669 6365 3a64  en-org:service:d</div><div class="line">	0x0090:  6961 6c3a 310d 0a55 5345 522d 4147 454e  ial:1..USER-AGEN</div><div class="line">	0x00a0:  543a 2047 6f6f 676c 6520 4368 726f 6d65  T:.Google.Chrome</div><div class="line">	0x00b0:  2f35 392e 302e 3330 3731 2e31 3034 2057  /59.0.3071.104.W</div><div class="line">	0x00c0:  696e 646f 7773 0d0a 0d0a                 indows....</div><div class="line">11:44:41.514257 IP 192.168.42.1.55904 &gt; 239.255.255.250.1900: UDP, length 174</div><div class="line">	0x0000:  4500 00ca 1344 0000 0111 cb3b c0a8 2a01  E....D.....;..*.</div><div class="line">	0x0010:  efff fffa da60 076c 00b6 3d68 4d2d 5345  .....`.l..=hM-SE</div><div class="line">	0x0020:  4152 4348 202a 2048 5454 502f 312e 310d  ARCH.*.HTTP/1.1.</div><div class="line">	0x0030:  0a48 4f53 543a 2032 3339 2e32 3535 2e32  .HOST:.239.255.2</div><div class="line">	0x0040:  3535 2e32 3530 3a31 3930 300d 0a4d 414e  55.250:1900..MAN</div><div class="line">	0x0050:  3a20 2273 7364 703a 6469 7363 6f76 6572  :.&quot;ssdp:discover</div><div class="line">	0x0060:  220d 0a4d 583a 2031 0d0a 5354 3a20 7572  &quot;..MX:.1..ST:.ur</div><div class="line">	0x0070:  6e3a 6469 616c 2d6d 756c 7469 7363 7265  n:dial-multiscre</div><div class="line">	0x0080:  656e 2d6f 7267 3a73 6572 7669 6365 3a64  en-org:service:d</div><div class="line">	0x0090:  6961 6c3a 310d 0a55 5345 522d 4147 454e  ial:1..USER-AGEN</div><div class="line">	0x00a0:  543a 2047 6f6f 676c 6520 4368 726f 6d65  T:.Google.Chrome</div><div class="line">	0x00b0:  2f35 392e 302e 3330 3731 2e31 3034 2057  /59.0.3071.104.W</div><div class="line">	0x00c0:  696e 646f 7773 0d0a 0d0a                 indows....</div><div class="line">11:44:42.514598 IP 192.168.42.1.55904 &gt; 239.255.255.250.1900: UDP, length 174</div><div class="line">	0x0000:  4500 00ca 1345 0000 0111 cb3a c0a8 2a01  E....E.....:..*.</div><div class="line">	0x0010:  efff fffa da60 076c 00b6 3d68 4d2d 5345  .....`.l..=hM-SE</div><div class="line">	0x0020:  4152 4348 202a 2048 5454 502f 312e 310d  ARCH.*.HTTP/1.1.</div><div class="line">	0x0030:  0a48 4f53 543a 2032 3339 2e32 3535 2e32  .HOST:.239.255.2</div><div class="line">	0x0040:  3535 2e32 3530 3a31 3930 300d 0a4d 414e  55.250:1900..MAN</div><div class="line">	0x0050:  3a20 2273 7364 703a 6469 7363 6f76 6572  :.&quot;ssdp:discover</div><div class="line">	0x0060:  220d 0a4d 583a 2031 0d0a 5354 3a20 7572  &quot;..MX:.1..ST:.ur</div><div class="line">	0x0070:  6e3a 6469 616c 2d6d 756c 7469 7363 7265  n:dial-multiscre</div><div class="line">	0x0080:  656e 2d6f 7267 3a73 6572 7669 6365 3a64  en-org:service:d</div><div class="line">	0x0090:  6961 6c3a 310d 0a55 5345 522d 4147 454e  ial:1..USER-AGEN</div><div class="line">	0x00a0:  543a 2047 6f6f 676c 6520 4368 726f 6d65  T:.Google.Chrome</div><div class="line">	0x00b0:  2f35 392e 302e 3330 3731 2e31 3034 2057  /59.0.3071.104.W</div><div class="line">	0x00c0:  696e 646f 7773 0d0a 0d0a                 indows....</div><div class="line">^C</div><div class="line">4 packets captured</div><div class="line">4 packets received by filter</div><div class="line">0 packets dropped by kernel</div></pre></td></tr></table></figure>
<p>ftp是明文传递,可以直接解析ftp包中的用户名和密码，因此telnet和ftp不是绝对安全的</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux---用户、用户组]]></title>
      <url>/2017/07/24/Linux-%E7%94%A8%E6%88%B7%E3%80%81%E7%94%A8%E6%88%B7%E7%BB%84/</url>
      <content type="html"><![CDATA[<h1 id="有关文件"><a href="#有关文件" class="headerlink" title="有关文件"></a>有关文件</h1><h2 id="etc-group-储存当前系统中所有用户组信息"><a href="#etc-group-储存当前系统中所有用户组信息" class="headerlink" title="/etc/group 储存当前系统中所有用户组信息"></a>/etc/group 储存当前系统中所有用户组信息</h2><p><strong>Group : x  :123 :abc,def,xyz</strong><br><strong>组名称：密码：编号:用户名</strong></p>
<p>root的编号一定是0<br>1~499 是系统预留编号<br>用户手动创建的组编号从500+，默认为最大的组编号+1<br>组密码占位符全部用x表示</p>
<p>组管理者为空，表示组内所有用户都可以管理用户组</p>
<h2 id="etc-passwd-当前系统中所有用户的信息"><a href="#etc-passwd-当前系统中所有用户的信息" class="headerlink" title="/etc/passwd 当前系统中所有用户的信息"></a>/etc/passwd 当前系统中所有用户的信息</h2><p>一行对应一个用户<br>user  :     x     :   123   :  456     :    xxxxxx  : /home/user/: /bin/bash<br>用户名 : 密码占位符 : 用户编号 : 用户组编号: 用户注释信息 :  用户主目录 : shell类型<br>root编号一定是0 </p>
<h2 id="etc-gshadow-当前系统中所有用户组的密码信息"><a href="#etc-gshadow-当前系统中所有用户组的密码信息" class="headerlink" title="/etc/gshadow 当前系统中所有用户组的密码信息"></a>/etc/gshadow 当前系统中所有用户组的密码信息</h2><p>与group文件意义对应<br><strong>Group:   *   :       : abc,def,xyz </strong><br>组名称：组密码：组管理者：用户名列表</p>
<h2 id="etc-shadow-当前系统中所有用户的密码信息"><a href="#etc-shadow-当前系统中所有用户的密码信息" class="headerlink" title="/etc/shadow 当前系统中所有用户的密码信息"></a>/etc/shadow 当前系统中所有用户的密码信息</h2><p>一行对应一个用户，与passwd对应<br>user :   :<br>用户名:密码:<br>密码是加密过的</p>
<h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><h2 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h2><ul>
<li><strong>groupadd name 增加用户组</strong></li>
<li><strong>groupdel name 删除用户组（必须先删除用户）</strong></li>
<li>groupmod -n newname oldname 改组名</li>
<li>groupmod -g 编号 name 改编号</li>
<li>groupadd -g 编号 name 创建用户组的同时指定组编号</li>
</ul>
<h2 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h2><ul>
<li>useradd -g group username 添加到指定用户组</li>
<li>useradd -d /home/xxx imooc 指定个人文件夹(未指定用户组，则创建一个同名用户组)</li>
<li><strong>userdel username 删除用户（不删除目录）</strong></li>
<li><strong>userdel -r username 删除用户的同时删除目录</strong></li>
<li><strong>usermod -l newname oldname 更改用户名</strong></li>
<li>usermod -c content username 给用户添加备注</li>
<li><strong>usermod -g groupname username 切换用户组</strong></li>
</ul>
<p>创建一个空文件nologin就可以让出了root以外的用户无法登陆</p>
<blockquote>
<p>touch /etc/nologin</p>
</blockquote>
<h2 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h2><ul>
<li><strong>passwd username 创建或更改用户密码</strong></li>
<li>passwd -l username 锁定用户</li>
<li>passwd -u username 解锁用户</li>
<li>passwd -d username 清除密码</li>
</ul>
<h1 id="主要组和附属组"><a href="#主要组和附属组" class="headerlink" title="主要组和附属组"></a>主要组和附属组</h1><p>一个用户可以属于多个组<br>gpasswd -a username[,username2] 附属组名 添加附属组</p>
<p>默认属于主要组</p>
<ul>
<li><strong>gpasswd -a username groupname 向groupname用户组中添加username用户</strong></li>
<li><strong>gpasswd groupname  更改组密码</strong></li>
<li>newgrp groupname 切换到用户组</li>
<li>gpasswd -d username groupname 移出附属组</li>
<li>useradd -g maingroup -G group2[,group3…]  同时添加主用户组和附属组</li>
</ul>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><ul>
<li><strong>su username 切换用户（不加username则切换到root）</strong></li>
<li>groups username 显示用户所在组</li>
<li>id username 显示用户的用户信息（用户编号、用户名&amp;&amp;主要组编号名称附属组列表）</li>
<li>chfn username 设置用户资料</li>
<li><p>finger username 显示详细资料</p>
</li>
<li><p><strong>useradd username 增加用户</strong></p>
</li>
<li><strong>userdel username 删除用户（不删除目录）</strong></li>
<li><strong>userdel -r username 删除用户的同时删除目录</strong></li>
<li><strong>usermod -l newname oldname 更改用户名</strong></li>
<li><strong>groupadd name 增加用户组</strong></li>
<li><strong>groupdel name 删除用户组（必须先删除用户）</strong></li>
<li><strong>gpasswd -a username groupname 向groupname用户组中添加username用户</strong></li>
<li><strong>usermod -g groupname username 切换用户组</strong></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux--网络管理（7层结构、netstat、ifconfig、配置文件、虚拟机中的网络连接）]]></title>
      <url>/2017/07/24/Linux-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%EF%BC%887%E5%B1%82%E7%BB%93%E6%9E%84%E3%80%81netstat%E3%80%81ifconfig%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>说到Linux是一个悲伤的故事，早就想学了现在还是小白水平。连个tomcat服务都搞不定。痛哉痛哉</p>
<h1 id="ISO网络7层结构"><a href="#ISO网络7层结构" class="headerlink" title="ISO网络7层结构"></a>ISO网络7层结构</h1><table>
<thead>
<tr>
<th style="text-align:center">层次</th>
<th style="text-align:center">用途</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">应用层</td>
<td style="text-align:center">用户接口</td>
</tr>
<tr>
<td style="text-align:center">表示层</td>
<td style="text-align:center">数据的表示形式。特定功能的实现（加密）</td>
</tr>
<tr>
<td style="text-align:center">会话层</td>
<td style="text-align:center">对应用会话的管理、同步、是否需要传递</td>
</tr>
<tr>
<td style="text-align:center">传输层</td>
<td style="text-align:center">可靠与不可靠的传输、传输前的错误检测与修正</td>
</tr>
<tr>
<td style="text-align:center">网络层</td>
<td style="text-align:center">提供逻辑地址、选路</td>
</tr>
<tr>
<td style="text-align:center">数据链路层</td>
<td style="text-align:center">帧、用Mac地址访问没接、错误检测与修正</td>
</tr>
<tr>
<td style="text-align:center">物理层</td>
<td style="text-align:center">设备之间的比特流的传递、物理接口、电器特征等</td>
</tr>
</tbody>
</table>
<h1 id="TCP-IP模型"><a href="#TCP-IP模型" class="headerlink" title="TCP/IP模型"></a>TCP/IP模型</h1><ul>
<li>应用层</li>
<li>传输层 </li>
<li>网际互联层 </li>
<li>网络接口层</li>
</ul>
<h1 id="netstat-an"><a href="#netstat-an" class="headerlink" title="netstat -an"></a>netstat -an</h1><p>查看本机启用的端口</p>
<ul>
<li>-a 查看所有连接和监听端口(ano可同时使用)</li>
<li>-n 显示IP地址和端口号，而不是显示域名和服务名</li>
<li>-o 显示活动的 TCP 连接并包括每个连接的进程 ID (PID)</li>
<li>-r 显示 IP 路由表的内容。该参数与 route print 命令等价。 </li>
</ul>
<p>端口状态：</p>
<ul>
<li>LISTENING 端口是开放的，等待连接，但还没有被连接。就像你房子的门已经敞开的，但还没有人进来。</li>
<li>ESTABLISHED 表示已经建立连接。两台机器正在通信。</li>
</ul>
<h2 id="常见端口："><a href="#常见端口：" class="headerlink" title="常见端口："></a>常见端口：</h2><ul>
<li><strong>FTP 20 21 </strong></li>
<li><strong>SSH 22 </strong></li>
<li><strong>telnet 23 </strong></li>
<li><strong>DNS 53</strong> </li>
<li><strong>http 80 </strong></li>
<li><strong>SMTP(邮件) 25 </strong></li>
<li><strong>POP3(收邮件) 110 </strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line">C:\Users\wangchao&gt;netstat -an</div><div class="line">活动连接</div><div class="line"></div><div class="line">  协议  本地地址          外部地址        状态</div><div class="line">  TCP    0.0.0.0:80             0.0.0.0:0              LISTENING</div><div class="line">  TCP    0.0.0.0:135            0.0.0.0:0              LISTENING</div><div class="line">  TCP    0.0.0.0:445            0.0.0.0:0              LISTENING</div><div class="line">  TCP    0.0.0.0:902            0.0.0.0:0              LISTENING</div><div class="line">  TCP    0.0.0.0:912            0.0.0.0:0              LISTENING</div><div class="line">  TCP    0.0.0.0:1433           0.0.0.0:0              LISTENING</div><div class="line">  TCP    0.0.0.0:49152          0.0.0.0:0              LISTENING</div><div class="line">  TCP    0.0.0.0:49153          0.0.0.0:0              LISTENING</div><div class="line">  TCP    0.0.0.0:49154          0.0.0.0:0              LISTENING</div><div class="line">  TCP    0.0.0.0:49155          0.0.0.0:0              LISTENING</div><div class="line">  TCP    0.0.0.0:49177          0.0.0.0:0              LISTENING</div><div class="line">  TCP    127.0.0.1:1434         0.0.0.0:0              LISTENING</div><div class="line">  TCP    127.0.0.1:4300         0.0.0.0:0              LISTENING</div><div class="line">  TCP    127.0.0.1:4301         0.0.0.0:0              LISTENING</div><div class="line">  TCP    172.25.208.32:139      0.0.0.0:0              LISTENING</div><div class="line">  TCP    172.25.208.32:50180    108.177.97.188:5228    ESTABLISHED</div><div class="line">  TCP    172.25.208.32:50234    115.182.41.173:80      ESTABLISHED</div><div class="line">  TCP    172.25.208.32:52330    223.252.199.6:6003     ESTABLISHED</div><div class="line">  TCP    172.25.208.32:53614    115.182.41.173:80      ESTABLISHED</div><div class="line">  TCP    172.25.208.32:54164    115.182.41.173:80      ESTABLISHED</div><div class="line">  TCP    172.25.208.32:54171    115.182.41.49:7080     ESTABLISHED</div><div class="line">  TCP    172.25.208.32:54526    14.17.52.183:80        CLOSE_WAIT</div><div class="line">  TCP    172.25.208.32:54745    115.182.41.180:80      ESTABLISHED</div><div class="line">  TCP    172.25.208.32:55290    101.201.173.115:80     ESTABLISHED</div><div class="line">  TCP    172.25.208.32:55329    101.201.173.115:80     ESTABLISHED</div><div class="line">  TCP    172.25.208.32:55398    106.120.188.49:80      TIME_WAIT</div><div class="line">  TCP    172.25.208.32:55401    183.36.108.223:443     TIME_WAIT</div><div class="line">  TCP    172.25.208.32:55411    180.163.21.35:80       ESTABLISHED</div><div class="line">  TCP    172.25.208.32:55412    64.233.189.138:443     SYN_SENT</div><div class="line">  TCP    172.25.208.32:55413    64.233.189.102:443     SYN_SENT</div><div class="line">  TCP    172.25.208.32:55414    64.233.189.102:443     SYN_SENT</div><div class="line">  TCP    172.25.208.32:55415    64.233.189.138:443     SYN_SENT</div><div class="line">  TCP    172.25.208.32:55416    59.111.160.195:80      ESTABLISHED</div><div class="line">  TCP    192.168.42.1:139       0.0.0.0:0              LISTENING</div><div class="line">  TCP    192.168.247.1:139      0.0.0.0:0              LISTENING</div><div class="line">  TCP    [::]:80                [::]:0                 LISTENING</div><div class="line">  TCP    [::]:135               [::]:0                 LISTENING</div><div class="line">  TCP    [::]:445               [::]:0                 LISTENING</div><div class="line">  TCP    [::]:1433              [::]:0                 LISTENING</div><div class="line">  TCP    [::]:49152             [::]:0                 LISTENING</div><div class="line">  TCP    [::]:49153             [::]:0                 LISTENING</div><div class="line">  TCP    [::]:49154             [::]:0                 LISTENING</div><div class="line">  TCP    [::]:49155             [::]:0                 LISTENING</div><div class="line">  TCP    [::]:49177             [::]:0                 LISTENING</div><div class="line">  TCP    [::1]:1434             [::]:0                 LISTENING</div><div class="line">  UDP    0.0.0.0:4018           *:*                    </div><div class="line">  UDP    0.0.0.0:5353           *:*                    </div><div class="line">  UDP    0.0.0.0:5353           *:*                    </div><div class="line">  UDP    0.0.0.0:5353           *:*                    </div><div class="line">  UDP    0.0.0.0:5353           *:*                    </div><div class="line">  UDP    0.0.0.0:5353           *:*                    </div><div class="line">  UDP    0.0.0.0:5353           *:*                    </div><div class="line">  UDP    0.0.0.0:5353           *:*                    </div><div class="line">  UDP    0.0.0.0:5355           *:*                    </div><div class="line">  UDP    0.0.0.0:50020          *:*                    </div><div class="line">  UDP    0.0.0.0:52451          *:*                    </div><div class="line">  UDP    0.0.0.0:54543          *:*                    </div><div class="line">  UDP    0.0.0.0:57313          *:*                    </div><div class="line">  UDP    0.0.0.0:60018          *:*                    </div><div class="line">  UDP    0.0.0.0:60019          *:*                    </div><div class="line">  UDP    0.0.0.0:60020          *:*                    </div><div class="line">  UDP    0.0.0.0:63636          *:*                    </div><div class="line">  UDP    0.0.0.0:65532          *:*                    </div><div class="line">  UDP    127.0.0.1:1900         *:*                    </div><div class="line">  UDP    127.0.0.1:53883        *:*                    </div><div class="line">  UDP    172.25.208.32:137      *:*                    </div><div class="line">  UDP    172.25.208.32:138      *:*                    </div><div class="line">  UDP    172.25.208.32:1900     *:*                    </div><div class="line">  UDP    172.25.208.32:53882    *:*                    </div><div class="line">  UDP    192.168.42.1:137       *:*                    </div><div class="line">  UDP    192.168.42.1:138       *:*                    </div><div class="line">  UDP    192.168.42.1:1900      *:*                    </div><div class="line">  UDP    192.168.247.1:137      *:*                    </div><div class="line">  UDP    192.168.247.1:138      *:*                    </div><div class="line">  UDP    192.168.247.1:1900     *:*                    </div><div class="line">  UDP    [::]:5353              *:*                    </div><div class="line">  UDP    [::]:5353              *:*                    </div><div class="line">  UDP    [::]:5353              *:*                    </div><div class="line">  UDP    [::]:5353              *:*                    </div><div class="line">  UDP    [::]:5355              *:*                    </div><div class="line">  UDP    [::1]:1900             *:*                    </div><div class="line">  UDP    [::1]:53881            *:*                    </div><div class="line">  UDP    [fe80::7134:d4df:12f4:7846%16]:546  *:*                    </div><div class="line">  UDP    [fe80::7134:d4df:12f4:7846%16]:546  *:*                    </div><div class="line">  UDP    [fe80::7134:d4df:12f4:7846%16]:1900  *:*                    </div><div class="line">  UDP    [fe80::95c6:d3f1:50e1:8ae4%15]:546  *:*                    </div><div class="line">  UDP    [fe80::95c6:d3f1:50e1:8ae4%15]:546  *:*                    </div><div class="line">  UDP    [fe80::95c6:d3f1:50e1:8ae4%15]:1900  *:*                    </div><div class="line">  UDP    [fe80::f053:ca43:6de1:5420%17]:546  *:*                    </div><div class="line">  UDP    [fe80::f053:ca43:6de1:5420%17]:546  *:*                    </div><div class="line">  UDP    [fe80::f053:ca43:6de1:5420%17]:1900  *:*                    </div><div class="line">  UDP    [fe80::f053:ca43:6de1:5420%17]:53880  *:*</div></pre></td></tr></table></figure>
<h1 id="ifconfig-临时配置IP地址"><a href="#ifconfig-临时配置IP地址" class="headerlink" title="ifconfig 临时配置IP地址"></a>ifconfig 临时配置IP地址</h1><ul>
<li><strong>ifconfig ：查看网络状态</strong></li>
<li><strong>ifconfig eth0 192.168.254.200 netmask 255.255.255.0 ： 临时配置IP和子网掩码</strong></li>
<li><strong>ifconfig 网卡名 down/up  ： 关闭、打开网卡</strong></li>
<li><strong>ifconfig 网卡名 ipv4 ： 设置ipv4地址</strong></li>
</ul>
<h1 id="修改配置文件配置IP地址"><a href="#修改配置文件配置IP地址" class="headerlink" title="修改配置文件配置IP地址"></a>修改配置文件配置IP地址</h1><h2 id="etc-sysconfig-network-scripts-ifcfg-ens33"><a href="#etc-sysconfig-network-scripts-ifcfg-ens33" class="headerlink" title="/etc/sysconfig/network-scripts/ifcfg-ens33"></a>/etc/sysconfig/network-scripts/ifcfg-ens33</h2><p>网卡配置文件</p>
<ul>
<li><strong>DEVICE=eth0</strong> <strong>网卡设备名，需要和文件名中的网卡名一致</strong></li>
<li><strong>BOOTPROTO=none(none、dhcp、dhcp)</strong> <strong>是否自动获取IP（如果是dhcp，下面的内容无需配置）</strong></li>
<li><strong>HWADDR</strong>   <strong>MAC地址</strong></li>
<li><strong>NM_CONTROLLED=yes(no)</strong> <strong>是否可以被Network Manager图形管理工具管理</strong></li>
<li><strong>ONBOOT=yes(no)</strong>  <strong>是否随着网络服务启动(centos6以上默认是no)</strong></li>
<li><strong>TYPE=Ethernet</strong> <strong>类型为以太网</strong></li>
<li><strong>UUID</strong> <strong>唯一识别码</strong></li>
<li><strong>IPADDR</strong> <strong>ip地址</strong></li>
<li><strong>NETMASK</strong> <strong>子网掩码</strong></li>
<li><strong>GATEWAY</strong> <strong>网关</strong></li>
<li><strong>DNS1</strong> <strong>dns</strong></li>
<li><strong>IPV6INIT=no</strong>  <strong>ipv6没有启动</strong></li>
<li><strong>USERCTL=no</strong> <strong>不允许非root用户控制网卡</strong></li>
</ul>
<h2 id="etc-sysconfig-network-和-etc-hostname"><a href="#etc-sysconfig-network-和-etc-hostname" class="headerlink" title="/etc/sysconfig/network 和 /etc/hostname"></a>/etc/sysconfig/network 和 /etc/hostname</h2><p>主机名文件<br>CentOS7中主机名文件为hostname，内容是：<br><code>localhost.localdomain</code></p>
<p>也可以通过hostname命令临时更改主机名<br>hostname newname 临时更改主机名为newname（不加参数表示查看当前主机名）</p>
<h2 id="etc-resolv-conf"><a href="#etc-resolv-conf" class="headerlink" title="/etc/resolv.conf"></a>/etc/resolv.conf</h2><p>DNS 配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nameserver 202.106.0.20(可以写多个)</div><div class="line">search localhost</div></pre></td></tr></table></figure>
<h1 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h1><ul>
<li>图形界面</li>
<li>setup工具</li>
</ul>
<h1 id="虚拟机网络参数配置"><a href="#虚拟机网络参数配置" class="headerlink" title="虚拟机网络参数配置"></a>虚拟机网络参数配置</h1><ul>
<li>将 /etc/sysconfig/network-scripts/文件中的onboot改为yes表示开机自启网络。</li>
<li>将BOOTPROTO设置为dhcp，如果是none则需要手动设置ip地址，设置的方法是在文件尾部加上IPADDR和NETMASK属性表示ip地址和子网掩码</li>
<li>然后用service network restart 重启网络即可生效</li>
</ul>
<p>虚拟机中的连接方式有三种：</p>
<ul>
<li>桥接：虚拟机会被当成一个真正的电脑，占用局域网中的一个ip地址，</li>
<li>NAT：可以上网，可以连通主机</li>
<li>仅主机模式：只能连通主机，不能上网</li>
</ul>
<p>在校园网中使用桥接会获得一个校园网的ip，但是该ip没有登录，所以不能上网。因此在校园网中使用NAT便可以上网，此时的ip为(192.168.42.132),与本机的ip并不在一个网段中(172.25.233.40)<br>service network start/stop/restart 开启关闭重启网络服务</p>
]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JSP---JSTL(import、redirect、url处理、常用函数)]]></title>
      <url>/2017/07/22/JSP-JSTL-import%E3%80%81redirect%E3%80%81url%E5%A4%84%E7%90%86%E3%80%81%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="import"><a href="#import" class="headerlink" title="import"></a>import</h1><p><strong>&lt;import url=”” context=”” var=”” scope=”” charEncoding=”” varReader=””&gt;&lt;/c:import&gt;</strong><br>包含另一个 JSP 页 面到本页面来</p>
<ul>
<li>url 文件的url</li>
<li>var 导入的数据保存到var中</li>
<li>scope var的保存位置</li>
<li><p>charEncoding 编码方式</p>
</li>
<li><p>直接导入外部url</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;c:import url=&quot;http://www.imooc.com&quot;&gt;&lt;/c:import&gt;</div></pre></td></tr></table></figure>
<ul>
<li>导入当前项目下的文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;c:import url=&quot;import.txt&quot; charEncoding=&quot;utf-8&quot; var=&quot;txt&quot; scope=&quot;session&quot;&gt;&lt;/c:import&gt;</div><div class="line">&lt;c:out value=&quot;#$&#123;sessionScope.txt &#125;&quot;&gt;&lt;/c:out&gt;</div></pre></td></tr></table></figure>
<p>-导入另一个项目中的文件。需要更改context.xml文件。将<context>添加属性 <code>crossContext=&quot;true&quot;</code></context></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;c:import url=&quot;/hello.html&quot; context=&quot;/Train_HTML&quot;&gt;&lt;/c:import&gt;</div></pre></td></tr></table></figure>
<h1 id="redirect"><a href="#redirect" class="headerlink" title="redirect"></a>redirect</h1><p>页面重定向</p>
<ul>
<li>url 指定页面的地址，</li>
<li>context其他web应用的页面</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">  	&lt;c:redirect url=&quot;OutTest.jsp&quot;&gt;</div><div class="line">  		&lt;c:param name=&quot;username&quot;&gt;tom&lt;/c:param&gt;</div><div class="line">  		&lt;c:param name=&quot;password&quot;&gt;123&lt;/c:param&gt;</div><div class="line">  	&lt;/c:redirect&gt;</div><div class="line"></div><div class="line">// http://localhost:8080/Test/JSTLTest/import.txt?username=tom&amp;password=123</div></pre></td></tr></table></figure>
<h1 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h1><p>动态生成一个String类型的URL,与c:param一起使用</p>
<ul>
<li>value url路径</li>
<li>var 将url保存在变量中</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    &lt;c:url value=&quot;http://localhost:8080/Test/URLTest.jsp&quot; var=&quot;urlstr&quot;&gt;</div><div class="line">    	&lt;c:param name=&quot;data&quot; value=&quot;$&#123;data &#125;&quot;&gt;&lt;/c:param&gt;</div><div class="line">    &lt;/c:url&gt;</div><div class="line">    &lt;a href=&quot;$&#123;urlstr &#125;&quot;&gt;url&lt;/a&gt;</div><div class="line">// http://localhost:8080/Test/URLTest.jsp?data=sss</div></pre></td></tr></table></figure>
<h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><p>使用JSTL函数需要导入JSTL函数标签：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%@ taglib prefix=&quot;fn&quot; uri=&quot;http://java.sun.com/jsp/jstl/functions&quot; %&gt;</div></pre></td></tr></table></figure>
<p>常用函数罗列如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">length()</td>
<td style="text-align:center">返回长度</td>
</tr>
<tr>
<td style="text-align:center">replace(text, ‘-‘,’.’)</td>
<td style="text-align:center">替换一个字符串与另一个字符串的匹配</td>
</tr>
<tr>
<td style="text-align:center">split(str,”.”)</td>
<td style="text-align:center">分割字符串，保存在数组中</td>
</tr>
<tr>
<td style="text-align:center">startsWith(str1,str2)</td>
<td style="text-align:center">是否以指定字符串开始</td>
</tr>
<tr>
<td style="text-align:center">endWith(str1,str2)</td>
<td style="text-align:center">判断str1是否以str2结尾</td>
</tr>
<tr>
<td style="text-align:center">substring(str,begin,end)</td>
<td style="text-align:center">子串</td>
</tr>
<tr>
<td style="text-align:center">toLowerCase()</td>
<td style="text-align:center">小写</td>
</tr>
<tr>
<td style="text-align:center">toUpperCase()</td>
<td style="text-align:center">大写</td>
</tr>
<tr>
<td style="text-align:center">trim()</td>
<td style="text-align:center">去除两边空格</td>
</tr>
<tr>
<td style="text-align:center">contains(strlong,str)</td>
<td style="text-align:center">判断子串</td>
</tr>
<tr>
<td style="text-align:center">containsIgnreCase(strLong,str)</td>
<td style="text-align:center">判断子串，忽略大小写</td>
</tr>
<tr>
<td style="text-align:center">indexOf(str1,str2)</td>
<td style="text-align:center">判断str2出现的index值</td>
</tr>
<tr>
<td style="text-align:center">escapeXml()</td>
<td style="text-align:center">忽略用于XML标记的字符。</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> JSP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JSP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JSP---使用JSTL(out、set、remove、catch捕捉异常、条件判断、流程控制、字符截取)]]></title>
      <url>/2017/07/22/JSP-%E4%BD%BF%E7%94%A8JSTL-out%E3%80%81set%E3%80%81remove%E3%80%81catch%E6%8D%95%E6%8D%89%E5%BC%82%E5%B8%B8%E3%80%81%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E3%80%81%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E3%80%81%E5%AD%97%E7%AC%A6%E6%88%AA%E5%8F%96/</url>
      <content type="html"><![CDATA[<h1 id="使用JSTL"><a href="#使用JSTL" class="headerlink" title="使用JSTL"></a>使用JSTL</h1><p>在MyEclipse2014中，使用JSTL只要在文件开始加上一句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</div></pre></td></tr></table></figure></p>
<p>prefix表示前缀，用于区分其他标签，可以自定义前缀。<br>使用JSTL可以进一步减少Scriptlet的使用。使前端页面更加简洁</p>
<h1 id="输出语句out"><a href="#输出语句out" class="headerlink" title="输出语句out"></a>输出语句out</h1><p><strong>&lt;c:out value=”value” default=”default” escapeXml=”true/false” &gt;&lt;/c:out&gt;</strong></p>
<ul>
<li>输出常量：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;c:out value=&quot;test&quot;&gt;&lt;/c:out&gt;</div></pre></td></tr></table></figure>
<ul>
<li>输出变量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;% String username = &quot;tom&quot;;session.setAttribute(&quot;username&quot;, username); %&gt;</div><div class="line">&lt;c:out value=&quot;username: $&#123;username&#125;&quot;&gt;&lt;/c:out&gt;</div></pre></td></tr></table></figure>
<ul>
<li>当没有获取到值时，采用默认值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;c:out value=&quot;$&#123;username2&#125;&quot; default=&quot;default&quot;&gt;&lt;/c:out&gt;</div></pre></td></tr></table></figure>
<ul>
<li>当出现特殊字符时，是否保留(false-不保留|true-保留)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;c:out value=&quot;&amp;lt;out&amp;gt;&quot; escapeXml=&quot;false&quot;&gt;&lt;/c:out&gt;	// &lt;out&gt;</div><div class="line">&lt;c:out value=&quot;&amp;ltout&amp;gt&quot; escapeXml=&quot;false&quot;&gt;&lt;/c:out&gt;		// &lt;out&gt;</div></pre></td></tr></table></figure>
<h1 id="赋值语句set"><a href="#赋值语句set" class="headerlink" title="赋值语句set"></a>赋值语句set</h1><p><strong>&lt;c:set value=”value” var=”var”  scope=”session”  [target=”” property=””]&gt;&lt;/c:set&gt;</strong><br>表示把值value储存到var变量中，变量储存的范围是scope指定的范围。如果不指定scope，则scope取默认值page</p>
<ul>
<li>为变量赋值：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// 将username变量赋值为zhangsan，并保存到sessionScope中</div><div class="line">    &lt;c:set value=&quot;zhangsan&quot; var=&quot;username&quot;  scope=&quot;session&quot;&gt;&lt;/c:set&gt;</div><div class="line">    &lt;c:out value=&quot;$&#123;sessionScope.username &#125;&quot;&gt;&lt;/c:out&gt;</div></pre></td></tr></table></figure>
<ul>
<li>赋值时value可以不写，将value的内容写在标签之中也可：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// 将变量address赋值为‘合肥市’</div><div class="line">    &lt;c:set var=&quot;address&quot; scope=&quot;page&quot;&gt;合肥市&lt;/c:set&gt;</div><div class="line">    &lt;c:out value=&quot;$&#123;pageScope.address &#125;&quot;&gt;&lt;/c:out&gt;</div></pre></td></tr></table></figure>
<ul>
<li>向JavaBean中赋值：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 声名JavaBean</div><div class="line">&lt;jsp:useBean id=&quot;user&quot; class=&quot;Bean.JavaBean&quot;&gt;&lt;/jsp:useBean&gt;</div><div class="line"></div><div class="line">// 将id为user的JavaBean中name属性赋值为‘zhangsan’</div><div class="line">   &lt;c:set target=&quot;$&#123;user&#125;&quot; property=&quot;name&quot; value=&quot;zhangsan&quot;&gt;&lt;/c:set&gt;</div><div class="line">   &lt;c:out value=&quot;$&#123;pageScope.user.name &#125;&quot;&gt;&lt;/c:out&gt;</div><div class="line">   &lt;c:out value=&quot;$&#123;user.name &#125;&quot;&gt;&lt;/c:out&gt;</div></pre></td></tr></table></figure>
<ul>
<li>和之前一样，value可以包围在标签中</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;c:set target=&quot;$&#123;user &#125;&quot; property=&quot;password&quot; &gt;123&lt;/c:set&gt;</div><div class="line">&lt;c:out value=&quot;$&#123;user.password &#125;&quot;&gt;&lt;/c:out&gt;</div></pre></td></tr></table></figure>
<p><strong>PS：以上的例子中，直接使用了<code>${user,name}</code>,是因为，JavaBean在翻译时被自动保存到pageScope中，因此使用JavaBean时可以直接用EL获得JavaBean，而不需要调用setAttribute()方法传递参数：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Bean.JavaBean user = null;</div><div class="line">user = (Bean.JavaBean) _jspx_page_context.getAttribute(&quot;user&quot;, javax.servlet.jsp.PageContext.PAGE_SCOPE);</div><div class="line">if (user == null)&#123;</div><div class="line">  user = new Bean.JavaBean();</div><div class="line">  _jspx_page_context.setAttribute(&quot;user&quot;, user, javax.servlet.jsp.PageContext.PAGE_SCOPE);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="捕获异常语句catch"><a href="#捕获异常语句catch" class="headerlink" title="捕获异常语句catch"></a>捕获异常语句catch</h1><p>catch包围的语句出现错误时，会将异常保存在var中，可以使用EL表达式获得err的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;c:catch var=&quot;error&quot;&gt;</div><div class="line">	&lt;c:set target=&quot;sss&quot; property=&quot;sss&quot; value=&quot;123&quot;&gt;&lt;/c:set&gt;</div><div class="line">&lt;/c:catch&gt;</div><div class="line">&lt;c:out value=&quot;$&#123;error &#125;&quot; &gt;&lt;/c:out&gt;</div></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">javax.servlet.jsp.JspTagException: Invalid property in &amp;lt;set&amp;gt;: &quot;sss&quot;</div></pre></td></tr></table></figure></p>
<h1 id="移除属性remove"><a href="#移除属性remove" class="headerlink" title="移除属性remove"></a>移除属性remove</h1><p><strong>&lt;c:remove var=”username” scope=”scope”&gt;&lt;/c:remove&gt;</strong><br>从scope范围中移除var变量。其中var时必须的，scope是可选的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;c:set var=&quot;username&quot; value=&quot;tim&quot; scope=&quot;application&quot;&gt;&lt;/c:set&gt;</div><div class="line">&lt;c:out value=&quot;$&#123;username &#125;&quot; &gt;&lt;/c:out&gt;</div><div class="line"></div><div class="line">&lt;!-- var属性必选，scope可选 --&gt;</div><div class="line">&lt;c:remove var=&quot;username&quot; &gt;&lt;/c:remove&gt;</div><div class="line">&lt;c:out value=&quot;$&#123;username &#125;&quot;&gt;&lt;/c:out&gt;</div></pre></td></tr></table></figure>
<h1 id="简单判断语句if"><a href="#简单判断语句if" class="headerlink" title="简单判断语句if"></a>简单判断语句if</h1><p><strong>&lt;c:if test=”${param.score&gt;=90 }” var=”result” scope=”application”&gt;</strong><br>test表示判断的条件，var表示判断的结果，scope表示保存判断结果的范围。与Java中的if语句不同该语句没有else，如果要实现if else-if 则需要用choose语句。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;c:if test=&quot;$&#123;param.score&gt;=90 &#125;&quot; var=&quot;result&quot; scope=&quot;application&quot;&gt;</div><div class="line">		&lt;c:out value=&quot;优秀&quot; &gt;&lt;/c:out&gt;</div><div class="line">&lt;/c:if&gt;</div><div class="line"></div><div class="line">&lt;c:out value=&quot;sss $&#123;applicationScope.result &#125;&quot;&gt;&lt;/c:out&gt;</div></pre></td></tr></table></figure>
<h1 id="复杂判断语句-choose、when、otherwise-实现条件判断"><a href="#复杂判断语句-choose、when、otherwise-实现条件判断" class="headerlink" title="复杂判断语句 choose、when、otherwise 实现条件判断"></a>复杂判断语句 choose、when、otherwise 实现条件判断</h1><p>choose、when、otherwise嵌套使用可以实现if else-if else 条件判断。otherwise类似于Java中的else，可以省略不写。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;c:choose&gt;</div><div class="line">	&lt;c:when test=&quot;$&#123;param.score&gt;=90 &amp;&amp; param.score&lt;=100 &#125;&quot;&gt;</div><div class="line">		&lt;c:out value=&quot;优秀&quot;&gt;&lt;/c:out&gt;</div><div class="line">	&lt;/c:when&gt;</div><div class="line">	&lt;c:when test=&quot;$&#123;param.score&gt;=60 &amp;&amp; param.score&lt;90 &#125;&quot;&gt;</div><div class="line">		&lt;c:out value=&quot;良好&quot;&gt;&lt;/c:out&gt;</div><div class="line">	&lt;/c:when&gt;</div><div class="line">	&lt;c:otherwise&gt;</div><div class="line">		&lt;c:out value=&quot;输入有误&quot;&gt;&lt;/c:out&gt;</div><div class="line">	&lt;/c:otherwise&gt;</div><div class="line">&lt;/c:choose&gt;</div></pre></td></tr></table></figure>
<h1 id="循环语句-forEach"><a href="#循环语句-forEach" class="headerlink" title="循环语句 forEach"></a>循环语句 forEach</h1><p><strong>&lt;c:forEach var=”fruit” items=”${fruits }” begin=”0” end=”4” step=”1” varStatus=”fru”&gt;&lt;/c:forEach&gt;</strong><br>属性：</p>
<ul>
<li>items ： 表示变量的集合</li>
<li>var ： 表示每次从集合中取出的值</li>
<li>begin ： 如果指定了items，那么迭代就从items[begin]开始进行迭代；如果没有指定items，那么就从begin开始迭代。它的类型为整数</li>
<li>end ： 如果指定了items，那么就在items[end]结束迭代；如果没有指定items，那么就在end结束迭代。它的类型也为整数</li>
<li>step ： 步长</li>
<li>varStatus ： 通过index、count、first、last 4个状态值，描述begin和end子集中元素的状态</li>
</ul>
<p>varStaus的4个取值：</p>
<ul>
<li>index ： 当前元素在集合中的下标，起始位0</li>
<li>count ： 当前元素在begin、end子集中的序号，起始位为1</li>
<li>first ： 判断当前元素是不是当前子集的首元素，true/false</li>
<li>last  ： 判断当前元素是不是当卡子集的末尾元素，true/false </li>
</ul>
<p><strong>PS：</strong></p>
<ul>
<li><strong>遍历Map时，var中的对象会是entry，需要手动调用getKey() 和 getValue()方法</strong></li>
<li><strong>切割字符串，默认字符串之间用逗号隔开，forEach会以逗号为分隔符，将字符转拆分开，如果需要自定义分隔符，则需要使用forTakens</strong></li>
</ul>
<p>有以下集合：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;%</div><div class="line">  	List&lt;String&gt; fruits = new  ArrayList&lt;String&gt;();</div><div class="line">  	fruits.add(&quot;apple&quot;);</div><div class="line">  	fruits.add(&quot;pear&quot;);</div><div class="line">  	fruits.add(&quot;watermelon&quot;);</div><div class="line">  	fruits.add(&quot;orange&quot;);</div><div class="line">  	</div><div class="line">  	request.setAttribute(&quot;fruits&quot;, fruits);</div><div class="line">%&gt;</div></pre></td></tr></table></figure></p>
<ul>
<li>全部遍历</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;c:forEach var=&quot;fruit&quot; items=&quot;$&#123;fruits &#125;&quot;&gt;</div><div class="line">	&lt;c:out value=&quot;$&#123;fruit &#125;&quot;&gt;&lt;/c:out&gt;</div><div class="line">	&lt;br /&gt;</div><div class="line">&lt;/c:forEach&gt;</div><div class="line"></div><div class="line">// 结果</div><div class="line">		apple </div><div class="line">		pear </div><div class="line">		watermelon </div><div class="line">		orange</div></pre></td></tr></table></figure>
<ul>
<li>部分遍历,闭合区间[begin,end]</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;c:forEach var=&quot;fruit&quot; items=&quot;$&#123;fruits &#125;&quot; begin=&quot;1&quot; end=&quot;3&quot;&gt;</div><div class="line">	&lt;c:out value=&quot;$&#123;fruit &#125;&quot;&gt;&lt;/c:out&gt;</div><div class="line">	&lt;br /&gt;</div><div class="line">&lt;/c:forEach&gt;</div><div class="line">结果：</div><div class="line">		pear </div><div class="line">		watermelon </div><div class="line">		orange</div></pre></td></tr></table></figure>
<ul>
<li>部分遍历，指定步长</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;c:forEach var=&quot;fruit&quot; items=&quot;$&#123;fruits &#125;&quot; begin=&quot;0&quot; end=&quot;4&quot; step=&quot;2&quot;&gt;</div><div class="line">	&lt;c:out value=&quot;$&#123;fruit &#125;&quot;&gt;&lt;/c:out&gt;</div><div class="line">	&lt;br /&gt;</div><div class="line">&lt;/c:forEach&gt;</div><div class="line">结果：</div><div class="line">		apple </div><div class="line">		watermelon</div></pre></td></tr></table></figure>
<ul>
<li>使用varStatus获得当前元素状态</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;c:forEach var=&quot;fruit&quot; items=&quot;$&#123;fruits &#125;&quot; begin=&quot;1&quot; end=&quot;3&quot; step=&quot;1&quot; varStatus=&quot;fru&quot;&gt;</div><div class="line">	&lt;c:out value=&quot;$&#123;fruit &#125;&quot;&gt;&lt;/c:out&gt;&lt;br /&gt;</div><div class="line">	&lt;c:out value=&quot;count:$&#123;fru.count &#125;&quot;&gt;&lt;/c:out&gt;&lt;br /&gt;</div><div class="line">	&lt;c:out value=&quot;index: $&#123;fru.index &#125;&quot;&gt;&lt;/c:out&gt;&lt;br /&gt;</div><div class="line">	&lt;c:out value=&quot;first:$&#123;fru.first &#125;&quot;&gt;&lt;/c:out&gt;&lt;br /&gt;</div><div class="line">	&lt;c:out value=&quot;last:$&#123;fru.last &#125;&quot;&gt;&lt;/c:out&gt;&lt;br /&gt;</div><div class="line">	&lt;c:out value=&quot;-----------&quot;&gt;&lt;/c:out&gt;&lt;br /&gt;</div><div class="line">	&lt;br /&gt;</div><div class="line">&lt;/c:forEach&gt;</div><div class="line"></div><div class="line">结果：</div><div class="line">	pear</div><div class="line">	count:1</div><div class="line">	index: 1</div><div class="line">	first:true</div><div class="line">	last:false</div><div class="line">	-----------</div><div class="line">	</div><div class="line">	watermelon</div><div class="line">	count:2</div><div class="line">	index: 2</div><div class="line">	first:false</div><div class="line">	last:false</div><div class="line">	-----------</div><div class="line">	</div><div class="line">	orange</div><div class="line">	count:3</div><div class="line">	index: 3</div><div class="line">	first:false</div><div class="line">	last:true</div><div class="line">	-----------</div></pre></td></tr></table></figure>
<ul>
<li>切割字符串，默认以逗号为分隔符：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;c:forEach var=&quot;word&quot; items=&quot;abc,edf,g&quot;&gt;</div><div class="line">	 	&lt;c:out value=&quot;$&#123;word &#125;&quot;&gt;&lt;/c:out&gt;</div><div class="line">&lt;/c:forEach&gt;</div></pre></td></tr></table></figure>
<ul>
<li>遍历Map，var中是entry对象：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> &lt;%</div><div class="line"> 	Map&lt;String,String&gt; map = new HashMap&lt;String, String&gt;();</div><div class="line"> 	map.put(&quot;name&quot;, &quot;tom&quot;);</div><div class="line"> 	map.put(&quot;password&quot;,&quot;123&quot;);</div><div class="line"> 	pageContext.setAttribute(&quot;map&quot;, map);</div><div class="line"> %&gt;</div><div class="line">&lt;c:forEach var=&quot;entry&quot; items=&quot;$&#123;map &#125;&quot;&gt;</div><div class="line">	&lt;c:out value=&quot;$&#123;entry.key &#125;:$&#123;entry.value &#125;&quot;&gt;&lt;/c:out&gt;&lt;br/&gt;</div><div class="line">&lt;/c:forEach&gt;</div></pre></td></tr></table></figure>
<h1 id="字符串截取-fortakens"><a href="#字符串截取-fortakens" class="headerlink" title="字符串截取 fortakens"></a>字符串截取 fortakens</h1><p><strong>&lt;c:forTokens var=”str” items=”abc-def-ghi-jkl-mn-opq”  delims=”-“ begin=”0” end=”4” step=”1” varStatus=”strstate”&gt;&lt;/c:forTokens&gt;</strong><br>与ForEach功能不同，但是用法类似。items表示要操作的字符串，delims（delimiter）表示分隔符，var代表每次取值的变量，begin、end表示开始结束位置，varStatus表示状态，这几个属性用法与ForEach一样。</p>
<p>截取前5的单词：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;c:forTokens items=&quot;abc-def-ghi-jkl-mn-opq&quot; delims=&quot;-&quot; var=&quot;str&quot; begin=&quot;0&quot; end=&quot;4&quot;&gt;</div><div class="line">	&lt;c:out value=&quot;$&#123;str &#125;&quot;&gt;&lt;/c:out&gt;&lt;br/&gt;</div><div class="line">&lt;/c:forTokens&gt;</div><div class="line"></div><div class="line">结果：</div><div class="line">	abc</div><div class="line">	def</div><div class="line">	ghi</div><div class="line">	jkl</div><div class="line">	mn</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> JSP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JSP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JSP---EL表达式]]></title>
      <url>/2017/07/20/JSP-EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>之前获得request中的参数需要使用getParameter()获得，使用EL可以更加简单：<br><code>${param.username}</code>，param表示从request的请求参数中获得name为username的属性值。EL减少了Scriptlet的使用。例如一个求和的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String a = request.getParameter(&quot;a&quot;);</div><div class="line">String b = request.getParameter(&quot;b&quot;);</div><div class="line">out.println(&quot;a+b=&quot;+(Integer.parseInt(a)+Integer.parseInt(b)));</div></pre></td></tr></table></figure>
<p>用EL表达式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$&#123;param.a&#125; + $&#123;param.b&#125; = $&#123;param.a+param.b&#125;</div></pre></td></tr></table></figure></p>
<p>EL可以自动完成类型的转换，通过param.a简单的获取request中的参数</p>
<h1 id="使用EL获得属性"><a href="#使用EL获得属性" class="headerlink" title="使用EL获得属性"></a>使用EL获得属性</h1><p><code>.</code> <code>[]</code> 都可以用来获得属性</p>
<ul>
<li>如果使用<code>.</code>，那么，左边可以是JavaBean、Map对象</li>
<li>如果使用<code>[]</code>，那么，左边可以是JavaBean、Map、数组、List对象</li>
</ul>
<p>访问数组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;%</div><div class="line">  	// 数组</div><div class="line">  	String [] str = &#123;&quot;tom&quot;,&quot;jerry&quot;&#125;;</div><div class="line">  	session.setAttribute(&quot;str&quot;, str);</div><div class="line">%&gt;</div><div class="line">    &lt;p&gt;数组 $&#123;str[1]&#125;  &lt;/p&gt;</div><div class="line"> 	&lt;p&gt;数组 $&#123;str[&quot;1&quot;]&#125; &lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>访问集合List：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;%</div><div class="line">  	// List</div><div class="line">  	List&lt;String&gt; strList = new ArrayList(); </div><div class="line">  	strList.add(&quot;a&quot;);</div><div class="line">  	strList.add(&quot;b&quot;);</div><div class="line">  	session.setAttribute(&quot;strList&quot;, strList);</div><div class="line">%&gt;</div><div class="line">    &lt;p&gt;List $&#123;strList[0]&#125; &lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>访问Map：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;% 	</div><div class="line"> 	// Map</div><div class="line">  	Map&lt;String,String&gt; map = new HashMap();</div><div class="line">  	map.put(&quot;tom&quot;, &quot;a&quot;);</div><div class="line">  	map.put(&quot;jerry&quot;, &quot;b&quot;);</div><div class="line">  	session.setAttribute(&quot;map&quot;, map);</div><div class="line">  	</div><div class="line">%&gt;</div><div class="line">    &lt;p&gt;Map $&#123;map[&quot;tom&quot;]&#125; &lt;/p&gt;</div><div class="line">	&lt;p&gt;Map $&#123;map.tom&#125; &lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>对于Map，建议使用<code>[]</code> 因为如果参数名含有特殊字符时，使用<code>.</code>会报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;Map $&#123;map[&quot;tom jerry&quot;] &#125; &lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>还可以嵌套使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;嵌套 $&#123;map[str[0]] &#125;&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<h1 id="EL-隐式对象"><a href="#EL-隐式对象" class="headerlink" title="EL 隐式对象"></a>EL 隐式对象</h1><table>
<thead>
<tr>
<th style="text-align:center">隐式对象</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">pageScope</td>
<td style="text-align:center">PageContext范围</td>
</tr>
<tr>
<td style="text-align:center">requestScope</td>
<td style="text-align:center">request范围</td>
</tr>
<tr>
<td style="text-align:center">sessionScope</td>
<td style="text-align:center">session范围</td>
</tr>
<tr>
<td style="text-align:center">applicationScope</td>
<td style="text-align:center">application范围</td>
</tr>
<tr>
<td style="text-align:center">pageContext</td>
<td style="text-align:center">当前页面</td>
</tr>
<tr>
<td style="text-align:center">param</td>
<td style="text-align:center">请求参数</td>
</tr>
<tr>
<td style="text-align:center">paramValues</td>
<td style="text-align:center">获得请求参数的所有值</td>
</tr>
<tr>
<td style="text-align:center">Header</td>
<td style="text-align:center">数据包的头部信息</td>
</tr>
<tr>
<td style="text-align:center">HeaderValues</td>
<td style="text-align:center">数据包的头部信息的name对应的所有value</td>
</tr>
<tr>
<td style="text-align:center">cookie</td>
<td style="text-align:center">cookie</td>
</tr>
<tr>
<td style="text-align:center">initParam</td>
<td style="text-align:center">ServletContext的初始化参数，即&lt;context-param&gt;中的参数</td>
</tr>
</tbody>
</table>
<ul>
<li><p>属性范围：pageScope、requestScope、sessionScope、application可以获得setAttribute()方法获得的属性。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;%</div><div class="line">String test = &quot;test&quot;;</div><div class="line">pageContext.setAttribute(&quot;test&quot;, test);</div><div class="line">session.setAttribute(&quot;test&quot;, test);</div><div class="line"></div><div class="line">%&gt;</div><div class="line">&lt;p&gt;$&#123;pageScope.test&#125;&lt;/p&gt;</div><div class="line">&lt;p&gt;$&#123;sessionScope.test&#125;&lt;/p&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>请求参数：<strong>param</strong> 相当于getParameter() 。<strong>paramValues</strong> 相当于getParameterValues()，返回数组可以用 <code>[]</code>获取 。(Header与HeaderValues与之类似)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// http://localhost:8080/Test/EL/ELTest1.jsp?name=tom</div><div class="line">    &lt;p&gt;$&#123;param.name &#125;&lt;/p&gt;</div><div class="line">//http://localhost:8080/Test/EL/ELTest1.jsp?name=tom&amp;name=jerry</div><div class="line">    &lt;p&gt;$&#123;paramValues.name[1] &#125;&lt;/p&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>cookie可以获得cookie中的值</p>
</li>
<li><p>initParam可以获得ServletContext的初始化参数<br>参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;context-param&gt;</div><div class="line">	&lt;param-name&gt;username&lt;/param-name&gt;</div><div class="line">	&lt;param-value&gt;tim&lt;/param-value&gt;</div><div class="line">&lt;/context-param&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>使用initParam获得参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;initParam $&#123;initParam.username &#125;&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<h1 id="关闭EL"><a href="#关闭EL" class="headerlink" title="关闭EL"></a>关闭EL</h1><p>可以使用page指示元素的isELIgnored属性设置是否使用El <code>&lt;%@ page isELIgnored=&quot;true&quot; %&gt;</code></p>
<p>还可以使用自定义函数，日后在做总结</p>
]]></content>
      
        <categories>
            
            <category> JSP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JSP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[cutey]]></title>
      <url>/2017/07/19/2333/</url>
      <content type="html"><![CDATA[<center><br><div style="width:600px;height:600px;"><br><object type="application/x-shockwave-flash" style="outline:none;" data="http://cdn.abowman.com/widgets/hamster/hamster.swf?" width="600px" height="600px"><param name="movie" value="http://cdn.abowman.com/widgets/hamster/hamster.swf?"><param name="AllowScriptAccess" value="always"><param name="wmode" value="opaque"></object><br><br></div><br><br></center>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JSP---隐式对象、pageContext、错误处理]]></title>
      <url>/2017/07/18/JSP-%E9%9A%90%E5%BC%8F%E5%AF%B9%E8%B1%A1%E3%80%81pageContext%E3%80%81%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>隐式对象是_jspService()中的局部变量，故只能在<code>&lt;% %&gt;</code> 和 <code>&lt;%= %&gt;</code>中使用</p>
<h1 id="隐式对象"><a href="#隐式对象" class="headerlink" title="隐式对象"></a>隐式对象</h1><table>
<thead>
<tr>
<th style="text-align:center">隐式对象</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">out</td>
<td style="text-align:center">JspWriter对象，内部关联PrintWriter对象</td>
</tr>
<tr>
<td style="text-align:center">request</td>
<td style="text-align:center">对应HttpServletRequest对象</td>
</tr>
<tr>
<td style="text-align:center">response</td>
<td style="text-align:center">对应HttpServletResponse对象</td>
</tr>
<tr>
<td style="text-align:center">config</td>
<td style="text-align:center">对应ServletConfig</td>
</tr>
<tr>
<td style="text-align:center">application</td>
<td style="text-align:center">对应ServletContext</td>
</tr>
<tr>
<td style="text-align:center">session</td>
<td style="text-align:center">对应HttpSession</td>
</tr>
<tr>
<td style="text-align:center">pageContext</td>
<td style="text-align:center">对应PageContent对象。将所有JSP页面信息封装起来，可以通过pageContext获得所有的隐式对象</td>
</tr>
<tr>
<td style="text-align:center">exception</td>
<td style="text-align:center">对应Throwable对象，代表由其他JSP页面抛出的一场对象，只会出现在JSP错误页面</td>
</tr>
<tr>
<td style="text-align:center">page</td>
<td style="text-align:center">对应转译后的this</td>
</tr>
</tbody>
</table>
<h1 id="pageContext"><a href="#pageContext" class="headerlink" title="pageContext"></a>pageContext</h1><p>使用pageContext可以获取所有隐式对象，也可以访问 page、request、session、application范围的变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">request = pageContext.getRequest();</div><div class="line">response = pageContext.getResponse();</div><div class="line">config = pageContext.getServletConfig();</div><div class="line">application = pageContext.getServletContext();</div><div class="line">session = pageContext.getSession();</div><div class="line">out = pageContext.getOut();</div></pre></td></tr></table></figure></p>
<h2 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h2><ul>
<li>setAttribute(String name, String value, int scope)：如果没有指定scope，该属性默认在page范围内</li>
<li>getAttribute(String name, int scope) 获得属性值</li>
<li>removeAttribute(String name, int scope) 移除属性</li>
<li>findAttribute()依次从页面、请求、会话、应用程序范围查找有无对应的属性</li>
</ul>
<h2 id="查找范围-scope"><a href="#查找范围-scope" class="headerlink" title="查找范围(scope)"></a>查找范围(scope)</h2><ul>
<li>pageContext.APPLICATION_SCOPE ServletContext（application）</li>
<li>pageContext.REQUEST_SCOPE request</li>
<li>pageContext.SESSION_SCOPE session</li>
<li>pageContext.PAGE_SCOPE pageContext</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;%</div><div class="line">pageContext.setAttribute(&quot;scope&quot;, &quot;page&quot;);</div><div class="line">session.setAttribute(&quot;scope&quot;, &quot;session&quot;);</div><div class="line">application.setAttribute(&quot;scope&quot;, &quot;application&quot;);</div><div class="line">request.setAttribute(&quot;scope&quot;, &quot;request&quot;);</div><div class="line"></div><div class="line">%&gt;</div><div class="line">page:&lt;%= pageContext.getAttribute(&quot;scope&quot;, pageContext.PAGE_SCOPE) %&gt;&lt;br/&gt;</div><div class="line">session:&lt;%= pageContext.getAttribute(&quot;scope&quot;, pageContext.SESSION_SCOPE) %&gt;&lt;br/&gt;</div><div class="line">application:&lt;%= pageContext.getAttribute(&quot;scope&quot;, pageContext.APPLICATION_SCOPE) %&gt;&lt;br/&gt;</div><div class="line">request:&lt;%= pageContext.getAttribute(&quot;scope&quot;, pageContext.REQUEST_SCOPE) %&gt;&lt;br/&gt;</div></pre></td></tr></table></figure>
<h1 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h1><p>错误界面只有iserrorPage为true时才可以使用exception对象</p>
<p>发生错误的页面 hello.jsp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</div><div class="line">&lt;%@ page errorPage=&quot;Error.jsp&quot; %&gt;</div><div class="line"></div><div class="line">&lt;html&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;%=1/0 %&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>错误页面 error.jsp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</div><div class="line">&lt;%@ page isErrorPage=&quot;true&quot; %&gt;</div><div class="line">&lt;html&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">  &lt;h1&gt;这是一个错误界面&lt;/h1&gt;</div><div class="line">    &lt;%=exception %&gt;</div><div class="line">    &lt;hr/&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h2 id="error-page"><a href="#error-page" class="headerlink" title="error-page"></a>error-page</h2><p>如果希望容器在发现某个错误或者异常时，自动转发至错误页面，则可以使用 <code>&lt;error-page&gt;&lt;/error-page&gt;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;error-page&gt;</div><div class="line">	&lt;exception-type&gt;java.lang.ArithmeticException&lt;/exception-type&gt;</div><div class="line">	&lt;location&gt;/JSPTest/Error.jsp&lt;/location&gt;</div><div class="line">&lt;/error-page&gt;</div><div class="line"></div><div class="line"> &lt;error-page&gt;</div><div class="line">	&lt;error-code&gt;404&lt;/error-code&gt;</div><div class="line">	&lt;location&gt;/JSPTest/Error.jsp&lt;/location&gt;</div><div class="line">&lt;/error-page&gt;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> JSP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JSP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Servlet---请求封装器]]></title>
      <url>/2017/07/18/Servlet-%E8%AF%B7%E6%B1%82%E5%B0%81%E8%A3%85%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;如果前端传入的字符串中包含特殊字符。例如HTML标签 <code>&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;</code>,传入这种参数会导致后台吧字符串当成了HTML链接。为了避免这种情况的发生，需要过滤用户输入的字符串。<br>&nbsp;&nbsp;&nbsp;&nbsp;从Request中可以用 getParameter()方法获取参数，可以将获得的参数进行处理，但是Request却没有类似“setParameter()”的方法。当然，也可以直接重写getParameter，但是就需要接口中的所有方法都重写，非常麻烦。<br>&nbsp;&nbsp;&nbsp;&nbsp;HttpServletRequestWrapper类使用了HttpServletRequest接口，并实现了所有的方法，使用时只需集成该类，并重写需要的特定方法即可。</p>
<p>WrapperTest继承自HttpServletRequestWrapper，并重写了getParameter，构造函数传入的是真正的Request，可以使用getRequest()获取它，之后可以通过过滤器用WrapperTest替换HttpServletRequest<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class WrapperTest extends HttpServletRequestWrapper &#123;</div><div class="line"></div><div class="line">	// 传入真正的request</div><div class="line">	public WrapperTest(HttpServletRequest request) &#123;</div><div class="line">		super(request);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	// 处理从request中获得的参数</div><div class="line">	public String getParameter(String name) &#123;</div><div class="line">		String result = this.getRequest().getParameter(name);</div><div class="line">		// 使用StringEscapeUtils过滤特殊字符</div><div class="line">		return StringEscapeUtils.escapeHtml3(result);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>用WrapperTest替换HttpServletRequest，doFilter()中将WrapperTest传入，之后的Servlet就会从WrapperTest中获得参数，而不是从HttpServletRequest中获得。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class WrapperFilter implements Filter &#123;</div><div class="line"></div><div class="line">	public void doFilter(ServletRequest arg0, ServletResponse arg1,</div><div class="line">			FilterChain arg2) throws IOException, ServletException &#123;</div><div class="line">		// 创建新的Request</div><div class="line">		HttpServletRequestWrapper requestWrapper = new WrapperTest((HttpServletRequest)arg0);</div><div class="line">		</div><div class="line">		// 用WrapperTest对象替换HttpServletRequest，使getParameter具有过滤的功能</div><div class="line">		arg2.doFilter(requestWrapper, arg1);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void init(FilterConfig arg0) throws ServletException &#123;&#125;</div><div class="line">	public void destroy() &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>直接访问Servlet（<code>http://localhost:8080/Test/hello?html=&lt;a href=&#39;http://www.baidu.com&gt;百度&lt;/a&gt;</code>）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String html =  req.getParameter(&quot;html&quot;);</div><div class="line">System.out.println(&quot;#&quot;+html);</div><div class="line"></div><div class="line">结果：</div><div class="line">&amp;lt;a href=&apos;http://www.baidu.com&apos;&amp;gt;百度&amp;lt;/a&amp;gt;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Servlet </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Servlet </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Servlet---过滤器]]></title>
      <url>/2017/07/18/Servlet-%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>要实现过滤器，必须实现Filter接口，并再web.xml或者注解中定义过滤器。过滤器有三个主要方法：<a id="more"></a></p>
<ul>
<li>init(FilterConfig config) 获得初始化参数，用法与servlet相同，需要配置初始化参数</li>
<li>doFilter(ServltRequest request,ServletResponse response,FilterChain chain) 执行过滤流程</li>
<li>destory()过滤器关闭时执行</li>
</ul>
<h1 id="web-xml-配置过滤器"><a href="#web-xml-配置过滤器" class="headerlink" title="web.xml 配置过滤器"></a>web.xml 配置过滤器</h1><p>与Servlet的配置基本类似，除了url-pattern外，还可以通过servlet指定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;filter&gt;</div><div class="line">	&lt;filter-name&gt;FirstFilter&lt;/filter-name&gt;</div><div class="line">	&lt;filter-class&gt;filter.FirstFilter&lt;/filter-class&gt;</div><div class="line">	&lt;init-param&gt;</div><div class="line">		&lt;param-name&gt;name&lt;/param-name&gt;</div><div class="line">		&lt;param-value&gt;tom&lt;/param-value&gt;</div><div class="line">	&lt;/init-param&gt;</div><div class="line">&lt;/filter&gt;</div><div class="line"></div><div class="line">&lt;filter-mapping&gt;</div><div class="line">	&lt;filter-name&gt;FirstFilter&lt;/filter-name&gt;</div><div class="line">	&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</div><div class="line">&lt;/filter-mapping&gt;</div></pre></td></tr></table></figure></p>
<p>通过servlet-name指定servlet<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;filter-mapping&gt;</div><div class="line">	&lt;filter-name&gt;FirstFilter&lt;/filter-name&gt;</div><div class="line">	&lt;servlet-name&gt;dispatcher.Dispatch&lt;/servlet-name&gt;</div><div class="line">&lt;/filter-mapping&gt;</div></pre></td></tr></table></figure></p>
<h2 id="web3-0中使用注解配置过滤器"><a href="#web3-0中使用注解配置过滤器" class="headerlink" title="web3.0中使用注解配置过滤器"></a>web3.0中使用注解配置过滤器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@WebFilter(</div><div class="line">		filterName=&quot;WrapperFilter&quot;,</div><div class="line">		urlPatterns=&#123;&quot;/*&quot;&#125;,</div><div class="line">		servletNames=&#123;&#125;,</div><div class="line">		initParams=&#123;</div><div class="line">			@WebInitParam(name=&quot;name&quot;,value=&quot;tom&quot;),</div><div class="line">			@WebInitParam(name=&quot;password&quot;,value=&quot;123&quot;)</div><div class="line">		&#125;</div><div class="line">		)</div></pre></td></tr></table></figure>
<p>当同时有urlPattern和servletNames，则先对比urlPattern 再对比servletNames</p>
<h1 id="多个过滤器"><a href="#多个过滤器" class="headerlink" title="多个过滤器"></a>多个过滤器</h1><p>一个servlet可以同时有多个过滤器，执行时，按照web.xml先后顺序组装成一条链，执行完毕后，限制性最后进来执行的过滤器，即后进先出，类似于栈。</p>
<p>同时具有两个过滤器的情况：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// FirstFilter</div><div class="line">	public void doFilter(ServletRequest arg0, ServletResponse arg1,</div><div class="line">			FilterChain arg2) throws IOException, ServletException &#123;</div><div class="line">		// TODO Auto-generated method stub</div><div class="line">		System.out.println(&quot;start-doFilter---FirstFilter&quot;);</div><div class="line">		arg2.doFilter(arg0, arg1);</div><div class="line">		System.out.println(&quot;end-doFilter---FirstFilter&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">// SecondFilter</div><div class="line">	public void doFilter(ServletRequest request, ServletResponse response,</div><div class="line">			FilterChain chain) throws IOException, ServletException &#123;</div><div class="line">		// TODO Auto-generated method stub</div><div class="line">		System.out.println(&quot;start---doFilter---SecondFilter&quot;);</div><div class="line">		chain.doFilter(request, response);</div><div class="line">		System.out.println(&quot;end---doFilter---SecondFilter&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">// 结果：</div><div class="line">		start-doFilter---FirstFilter</div><div class="line">		start---doFilter---SecondFilter</div><div class="line">		end---doFilter---SecondFilter</div><div class="line">		end-doFilter---FirstFilter</div></pre></td></tr></table></figure></p>
<h1 id="过滤器类别"><a href="#过滤器类别" class="headerlink" title="过滤器类别"></a>过滤器类别</h1><ul>
<li>request 用户直接访问页面时，调用过滤器</li>
<li>forward 通过RequestDispatcher的forward访问时调用过滤器</li>
<li>include 通过RequestDispatcher的include访问时调用过滤器</li>
<li>error 一场处理机制调用时，调用过滤器</li>
<li>async 异步</li>
</ul>
<p>当Test1被forward方式访问时，触发FirstFilter过滤器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;filter-mapping&gt;</div><div class="line">	&lt;filter-name&gt;FirstFilter&lt;/filter-name&gt;</div><div class="line">	&lt;url-pattern&gt;/Test1&lt;/url-pattern&gt;</div><div class="line">	&lt;dispatcher&gt;forward&lt;/dispatcher&gt;</div><div class="line">&lt;/filter-mapping&gt;</div></pre></td></tr></table></figure></p>
<h2 id="触发方式"><a href="#触发方式" class="headerlink" title="触发方式"></a>触发方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// Servlet</div><div class="line">	RequestDispatcher dispatch = req.getRequestDispatcher(&quot;/Test1&quot;).forward(req, resp);</div><div class="line">// JSP</div><div class="line">  &lt;jsp:forward page=&quot;index.jsp&quot;&gt;&lt;/js</div></pre></td></tr></table></figure>
<h2 id="error"><a href="#error" class="headerlink" title="error"></a>error</h2><p>error-page可以在发生特定的错误时，跳转到指定的页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;error-page&gt;</div><div class="line">	&lt;error-code&gt;404&lt;/error-code&gt;</div><div class="line">	&lt;location&gt;/error.jsp&lt;/location&gt;</div><div class="line">&lt;/error-page&gt;</div></pre></td></tr></table></figure></p>
<p>由error-page跳转的页面需要经过error类型的过滤器,配置dispatcher后，发生错误时，过滤器可以采取相应措施<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;filter-mapping&gt;</div><div class="line">	&lt;filter-name&gt;FirstFilter&lt;/filter-name&gt;</div><div class="line">	&lt;url-pattern&gt;/error.jsp&lt;/url-pattern&gt;</div><div class="line">	&lt;dispatcher&gt;error&lt;/dispatcher&gt;</div><div class="line">&lt;/filter-mapping&gt;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Servlet </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Servlet </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL---储存过程]]></title>
      <url>/2017/07/11/MySQL-%E5%82%A8%E5%AD%98%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h1><p><strong>CREATE PROCEDURE sp_name ([proc_parameter[,…]])</strong><br><strong>routine_body</strong><br><a id="more"></a></p>
<p><strong>proc_parameter:</strong></p>
<ul>
<li><strong>[IN|OUT|INOUT] param_name type</strong></li>
</ul>
<p><strong>参数</strong></p>
<ul>
<li><strong>IN，表示给参数的值必须在调用存储过程时指定</strong></li>
<li><strong>OUT，表示该参数的额值可以被存储过程改变，并可以返回</strong></li>
<li><strong>INOUT，表示该参数的调用时指定，并且可以被改变和返回</strong></li>
</ul>
<h1 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h1><ul>
<li>CALL sp_name([parameter[,…]])</li>
<li>CALL sp_name[()]</li>
</ul>
<p><strong>无参过程的调用可以不写小括号</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 创建无参数的储存过程</div><div class="line">mysql&gt; CREATE PROCEDURE sp1() SELECT VERSION();</div><div class="line"></div><div class="line"># 调用无参数的储存过程可以不加括号</div><div class="line">mysql&gt; CALL sp1;</div><div class="line">mysql&gt; CALL sp1();</div><div class="line">+------------+</div><div class="line">| VERSION()  |</div><div class="line">+------------+</div><div class="line">| 5.7.18-log |</div><div class="line">+------------+</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 创建IN类型参数</div><div class="line">mysql&gt; CREATE PROCEDURE removeUserById(IN p_id INT UNSIGNED)</div><div class="line">    -&gt; BEGIN</div><div class="line">    -&gt; DELETE FROM user WHERE id = p_id ;</div><div class="line">    -&gt; END</div><div class="line">    -&gt; //</div><div class="line"></div><div class="line">mysql&gt; CALL removeUserById(9)//</div></pre></td></tr></table></figure>
<h1 id="删除储存过程"><a href="#删除储存过程" class="headerlink" title="删除储存过程"></a>删除储存过程</h1><p><strong>DROP PROCEDURE [IF EXISTS] sp_name</strong></p>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 删除指定的记录，并返回剩余记录的数量</div><div class="line">mysql&gt; CREATE PROCEDURE removeUserAndReturnUserNums(IN p_id INT UNSIGNED,OUT userNums INT UNSIGNED)</div><div class="line">    -&gt; BEGIN</div><div class="line">    -&gt; DELETE FROM user WHERE id = p_id;</div><div class="line">    -&gt; SELECT COUNT(id) FROM user INTO userNums;</div><div class="line">    -&gt; END</div><div class="line">    -&gt; //</div><div class="line">Query OK, 0 rows affected (0.00 sec)</div></pre></td></tr></table></figure>
<ul>
<li><strong>ROW_COUNT(); 被增删改更改的行数</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># 使用ROW_COUNT() 获得被更改的行数</div><div class="line">mysql&gt; DELIMITER //</div><div class="line">mysql&gt; CREATE PROCEDURE removeUserByUserName(IN user_name VARCHAR(20),OUT deleteCount INT,OUT restCount INT)</div><div class="line">    -&gt; BEGIN</div><div class="line">    -&gt; DELETE FROM user WHERE username = user_name;</div><div class="line">    -&gt; SELECT ROW_COUNT() INTO deleteCount;</div><div class="line">    -&gt; SELECT COUNT(id) FROM user INTO restCount;</div><div class="line">    -&gt; END</div><div class="line">    -&gt; //</div><div class="line"></div><div class="line">mysql&gt; SELECT @a,@b;</div><div class="line">+------+------+</div><div class="line">| @a   | @b   |</div><div class="line">+------+------+</div><div class="line">|    3 |    4 |</div><div class="line">+------+------+</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL---自定义函数]]></title>
      <url>/2017/07/11/MySQL-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>用户自定义函数（user-defined function,UDF）。UDF可以没有参数,但UDF必须有且只有一个返回值<br><a id="more"></a></p>
<h1 id="创建UDF"><a href="#创建UDF" class="headerlink" title="创建UDF"></a>创建UDF</h1><pre>
CREATE FUNCTION function_name(parameter_name type,[parameter_name2 type2,...])
RETURNS  {STRING|INTEGER|REAL|DECIMAL}
BEGIN
    body
END
</pre>

<h1 id="删除UDF"><a href="#删除UDF" class="headerlink" title="删除UDF"></a>删除UDF</h1><p>DROP FUNCTION fun_name 删除自定义函数</p>
<h1 id="DELIMITER-“字符串”"><a href="#DELIMITER-“字符串”" class="headerlink" title="DELIMITER “字符串”"></a>DELIMITER “字符串”</h1><p>更改结束标识<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">mysql&gt; DELIMITER &quot;//&quot;</div><div class="line">mysql&gt; SHOW TABLES //</div><div class="line">+----------------+</div><div class="line">| Tables_in_test |</div><div class="line">+----------------+</div><div class="line">| provinces      |</div><div class="line">| user           |</div><div class="line">| user2          |</div><div class="line">| userinfo       |</div><div class="line">+----------------+</div></pre></td></tr></table></figure></p>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 计算两个数的平均值</div><div class="line">mysql&gt; CREATE FUNCTION f2_2(num1 SMALLINT,num2 SMALLINT)</div><div class="line">    -&gt; RETURNS FLOAT(10,2)</div><div class="line">    -&gt; RETURN (num1+num2)/2;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; CREATE FUNCTION adduser(username VARCHAR(20))</div><div class="line">    -&gt; RETURNS VARCHAR(20)</div><div class="line">    -&gt; BEGIN</div><div class="line">    -&gt; INSERT INTO user(username) VALUES(username);</div><div class="line">    -&gt; RETURN LAST_INSERT_ID();</div><div class="line">    -&gt; END</div><div class="line">    -&gt; //</div></pre></td></tr></table></figure>
<h1 id="定义局部变量"><a href="#定义局部变量" class="headerlink" title="定义局部变量"></a>定义局部变量</h1><p><strong>DECLARE var_name [,var_name…] date_type [DEFAULT VALUE];</strong></p>
<p>为变量赋值语法(全局变量也是如此):</p>
<ul>
<li>SET parameter_name = value[,parameter_name = value…]</li>
<li>SELECT INTO parameter_name</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># 使用default 指定默认值</div><div class="line">CREATE FUNCTION add(num INT)</div><div class="line">RETURNS INT</div><div class="line">BEGIN</div><div class="line">	DECLARE temp INT DEFAULT 10 ; </div><div class="line">	RETURN temp+num;</div><div class="line">END</div><div class="line"></div><div class="line"># 使用select into 为变量赋值</div><div class="line">CREATE FUNCTION userNum()</div><div class="line">RETURNS INT</div><div class="line">BEGIN</div><div class="line">	DECLARE temp INT DEFAULT 10 ; </div><div class="line">	SELECT COUNT(id) FROM user INTO temp;</div><div class="line">	RETURN temp;</div><div class="line">END</div></pre></td></tr></table></figure>
<p>#用户变量(可以理解成全局变量)</p>
<ul>
<li>声名：<strong>SET @param_name = value；</strong></li>
<li>使用：<strong>SELECT @allParam;</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># 声名A=100</div><div class="line">mysql&gt; SET @A = 100 ;</div><div class="line">#声名B= 200</div><div class="line">mysql&gt; SET @B = 200;</div><div class="line">#声名C=A+B</div><div class="line">mysql&gt; SET @C = @A+@B;</div><div class="line">#输出C</div><div class="line">mysql&gt; SELECT @C ;</div><div class="line">+------+</div><div class="line">| @C   |</div><div class="line">+------+</div><div class="line">|  300 |</div><div class="line">+------+</div></pre></td></tr></table></figure>
<h1 id="判断语句-IF"><a href="#判断语句-IF" class="headerlink" title="判断语句 IF"></a>判断语句 IF</h1><p><strong>IF condition THEN statement </strong><br><strong>[ELSEIF condition THEN statement]</strong><br><strong>[ELSE statement] </strong><br><strong>END IF </strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">CREATE FUNCTION if_test(age INT)</div><div class="line">RETURNS VARCHAR(20)</div><div class="line">BEGIN</div><div class="line">IF age&gt;18 THEN RETURN &quot;成年&quot;;</div><div class="line">ELSEIF age&gt;10 THEN RETURN &quot;未成年&quot;;</div><div class="line">ELSE RETURN &quot;小学生&quot;;</div><div class="line">END IF;</div><div class="line">END</div></pre></td></tr></table></figure>
<h1 id="分支语句-CASE"><a href="#分支语句-CASE" class="headerlink" title="分支语句 CASE"></a>分支语句 CASE</h1><p><strong>CASE case_value </strong><br><strong>WHEN when_value THEN statement </strong><br><strong>[WHEN when_value THEN statement] … </strong><br><strong>[ELSE statement_list] </strong><br><strong>END CASE </strong></p>
<p>另一种方式：<br><strong>CASE </strong><br><strong>WHEN search_condition THEN statement_list </strong><br><strong>[WHEN search_condition THEN statement_list] … </strong><br><strong>[ELSE statement_list] </strong><br><strong>END CASE </strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"># 第一种方式</div><div class="line">CREATE FUNCTION case_test(age INT)</div><div class="line">RETURNS VARCHAR(20)</div><div class="line">BEGIN</div><div class="line">CASE age</div><div class="line">WHEN 20 THEN RETURN &quot;20#&quot;;</div><div class="line">WHEN 30 THEN RETURN &quot;30#&quot;;</div><div class="line">ELSE RETURN &quot;#&quot;;</div><div class="line">END CASE;</div><div class="line">END</div><div class="line"></div><div class="line"># 第二种方式</div><div class="line">CREATE FUNCTION case_test2(age INT)</div><div class="line">RETURNS VARCHAR(20)</div><div class="line">BEGIN</div><div class="line">CASE </div><div class="line">WHEN age=20 THEN RETURN &quot;20#&quot;;</div><div class="line">WHEN age=30 THEN RETURN &quot;30#&quot;;</div><div class="line">ELSE RETURN &quot;#&quot;;</div><div class="line">END CASE;</div><div class="line">END</div></pre></td></tr></table></figure>
<h1 id="循环-LOOP"><a href="#循环-LOOP" class="headerlink" title="循环 LOOP"></a>循环 LOOP</h1><p><strong>[begin_label:] LOOP </strong><br><strong>statement </strong><br><strong>END LOOP [end_label] ;</strong></p>
<h2 id="LEAVE"><a href="#LEAVE" class="headerlink" title="LEAVE"></a>LEAVE</h2><p>leave用于终止loop循环<br><strong>LEAVE label </strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># 累加</div><div class="line">CREATE FUNCTION loop_test()</div><div class="line">RETURNS INT </div><div class="line">BEGIN</div><div class="line">	DECLARE count int DEFAULT 10;</div><div class="line">	adds: LOOP</div><div class="line">		SET count = count+1;</div><div class="line">		IF count &gt; 100 THEN LEAVE adds;</div><div class="line">		END IF;</div><div class="line">	END LOOP adds ;</div><div class="line">	RETURN count;</div><div class="line">END</div></pre></td></tr></table></figure>
<p>关于循环还有许多语句，以后用到再做总结</p>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL---常见函数]]></title>
      <url>/2017/07/11/MySQL-%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h1><table>
<thead>
<tr>
<th style="text-align:center">函数名</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CONCAT()</td>
<td style="text-align:center">字符连接</td>
</tr>
<tr>
<td style="text-align:center">CANCAT_WS(“分隔符”,”value”,”value”,..)</td>
<td style="text-align:center">用指定分隔符进行字符连接</td>
</tr>
<tr>
<td style="text-align:center">FORMAT()</td>
<td style="text-align:center">数字格式化</td>
</tr>
<tr>
<td style="text-align:center">LOWER()</td>
<td style="text-align:center">转换成小写</td>
</tr>
<tr>
<td style="text-align:center">UPPER()</td>
<td style="text-align:center">转换成大写</td>
</tr>
<tr>
<td style="text-align:center">LEFT()</td>
<td style="text-align:center">从左侧开始截取</td>
</tr>
<tr>
<td style="text-align:center">RIGHT()</td>
<td style="text-align:center">从右侧开始截取</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">// 使用CONCAT拼接字符串</div><div class="line">mysql&gt; SELECT CONCAT(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;);</div><div class="line">+---------------------+</div><div class="line">| CONCAT(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;) |</div><div class="line">+---------------------+</div><div class="line">| ABC                 |</div><div class="line">+---------------------+</div><div class="line"></div><div class="line">// CONCAT_WS用指定分隔符拼接字符串</div><div class="line">mysql&gt; SELECT CONCAT_WS(&quot;-&quot;,&quot;A&quot;,&quot;B&quot;,&apos;C&apos;);</div><div class="line">+----------------------------+</div><div class="line">| CONCAT_WS(&quot;-&quot;,&quot;A&quot;,&quot;B&quot;,&apos;C&apos;) |</div><div class="line">+----------------------------+</div><div class="line">| A-B-C                      |</div><div class="line">+----------------------------+</div><div class="line"></div><div class="line">mysql&gt; SELECT CONCAT_WS(&quot;-&quot;,id,username) FROM user ;</div><div class="line">+----------------------------+</div><div class="line">| CONCAT_WS(&quot;-&quot;,id,username) |</div><div class="line">+----------------------------+</div><div class="line">| 1-TOM                      |</div><div class="line">| 2-JERRY                    |</div><div class="line">| 3-ALICE                    |</div><div class="line">+----------------------------+</div><div class="line"></div><div class="line">// 格式化数字函数</div><div class="line">mysql&gt; SELECT FORMAT(100.111,2);</div><div class="line">+-------------------+</div><div class="line">| FORMAT(100.111,2) |</div><div class="line">+-------------------+</div><div class="line">| 100.11            |</div><div class="line">+-------------------+</div><div class="line"></div><div class="line">// 小写</div><div class="line">mysql&gt; SELECT LOWER(&quot;MYSQL&quot;);</div><div class="line">+----------------+</div><div class="line">| LOWER(&quot;MYSQL&quot;) |</div><div class="line">+----------------+</div><div class="line">| mysql          |</div><div class="line">+----------------+</div><div class="line"></div><div class="line">// 大写</div><div class="line">mysql&gt; SELECT UPPER(&quot;mysql&quot;);</div><div class="line">+----------------+</div><div class="line">| UPPER(&quot;mysql&quot;) |</div><div class="line">+----------------+</div><div class="line">| MYSQL          |</div><div class="line">+----------------+</div><div class="line"></div><div class="line">// 从左侧截取</div><div class="line">mysql&gt; SELECT LEFT(&quot;MYSQL&quot;,2);</div><div class="line">+-----------------+</div><div class="line">| LEFT(&quot;MYSQL&quot;,2) |</div><div class="line">+-----------------+</div><div class="line">| MY              |</div><div class="line">+-----------------+</div><div class="line"></div><div class="line">// 从右侧截取</div><div class="line">mysql&gt; SELECT RIGHT(&quot;MYSQL&quot;,2);</div><div class="line">+------------------+</div><div class="line">| RIGHT(&quot;MYSQL&quot;,2) |</div><div class="line">+------------------+</div><div class="line">| QL               |</div><div class="line">+------------------+</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">函数名</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">LENGTH()</td>
<td style="text-align:center">获取字符串长度</td>
</tr>
<tr>
<td style="text-align:center">LTRIM()</td>
<td style="text-align:center">删除签到空格</td>
</tr>
<tr>
<td style="text-align:center">RTRIM()</td>
<td style="text-align:center">删除后续空格</td>
</tr>
<tr>
<td style="text-align:center">TRIM()</td>
<td style="text-align:center">删除和替换前导和后续空格(完整格式：TRIM([{BOTH / LEADING /TRAILING} [remstr] FROM] str))</td>
</tr>
<tr>
<td style="text-align:center">SUBSTRING()</td>
<td style="text-align:center">字符串截取</td>
</tr>
<tr>
<td style="text-align:center">[NOT] LIKE</td>
<td style="text-align:center">字符串匹配(%任意多个字符，_单个字符)</td>
</tr>
<tr>
<td style="text-align:center">REPLACE()</td>
<td style="text-align:center">字符串替换</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line">// 获得字符串长度</div><div class="line">mysql&gt; SELECT LENGTH (&quot;MY SQL&quot;);</div><div class="line">+-------------------+</div><div class="line">| LENGTH (&quot;MY SQL&quot;) |</div><div class="line">+-------------------+</div><div class="line">|                 6 |</div><div class="line">+-------------------+</div><div class="line"></div><div class="line">// 清除左边的空格</div><div class="line">mysql&gt; SELECT LTRIM(&quot;    MYSQL   &quot;);</div><div class="line">+-----------------------+</div><div class="line">| LTRIM(&quot;    MYSQL   &quot;) |</div><div class="line">+-----------------------+</div><div class="line">| MYSQL                 |</div><div class="line">+-----------------------+</div><div class="line"></div><div class="line">// 计算清除过后的长度</div><div class="line">mysql&gt; SELECT LENGTH(LTRIM(&quot;   MY SQL &quot;));</div><div class="line">+-----------------------------+</div><div class="line">| LENGTH(LTRIM(&quot;   MY SQL &quot;)) |</div><div class="line">+-----------------------------+</div><div class="line">|                           7 |</div><div class="line">+-----------------------------+</div><div class="line"></div><div class="line">// 清除右侧的空格</div><div class="line">mysql&gt; SELECT LENGTH(RTRIM(&quot;   MY SQL &quot;));</div><div class="line">+-----------------------------+</div><div class="line">| LENGTH(RTRIM(&quot;   MY SQL &quot;)) |</div><div class="line">+-----------------------------+</div><div class="line">|                           9 |</div><div class="line">+-----------------------------+</div><div class="line"></div><div class="line">// 清除左侧和右侧的空格</div><div class="line">mysql&gt; SELECT LENGTH(TRIM(&quot;   MY SQL &quot;));</div><div class="line">+----------------------------+</div><div class="line">| LENGTH(TRIM(&quot;   MY SQL &quot;)) |</div><div class="line">+----------------------------+</div><div class="line">|                          6 |</div><div class="line">+----------------------------+</div><div class="line"></div><div class="line">// trim还可以用来替换指定字符</div><div class="line">mysql&gt; SELECT TRIM(BOTH &quot;?&quot; FROM &quot;?MY?SQL?&quot;);</div><div class="line">+--------------------------------+</div><div class="line">| TRIM(BOTH &quot;?&quot; FROM &quot;?MY?SQL?&quot;) |</div><div class="line">+--------------------------------+</div><div class="line">| MY?SQL                         |</div><div class="line">+--------------------------------+</div><div class="line"></div><div class="line">// 求字串，序号从1开始</div><div class="line">mysql&gt; SELECT SUBSTRING(&quot;MYSQL&quot;,1,2);</div><div class="line">+------------------------+</div><div class="line">| SUBSTRING(&quot;MYSQL&quot;,1,2) |</div><div class="line">+------------------------+</div><div class="line">| MY                     |</div><div class="line">+------------------------+</div><div class="line"></div><div class="line">mysql&gt; SELECT SUBSTRING(&quot;MYSQL&quot;,-3);</div><div class="line">+-----------------------+</div><div class="line">| SUBSTRING(&quot;MYSQL&quot;,-3) |</div><div class="line">+-----------------------+</div><div class="line">| SQL                   |</div><div class="line">+-----------------------+</div><div class="line"></div><div class="line">// 模糊查找，% 表示任意多个字符</div><div class="line">mysql&gt; SELECT * FROM user WHERE username LIKE &quot;%O%&quot;；</div><div class="line">+----+----------+------+</div><div class="line">| id | username | pid  |</div><div class="line">+----+----------+------+</div><div class="line">|  1 | TOM      |    1 |</div><div class="line">+----+----------+------+</div><div class="line"></div><div class="line">// \表示转义字符</div><div class="line">mysql&gt; SELECT * FROM user WHERE username LIKE &quot;%\%%&quot;;</div><div class="line">+----+-----------+------+</div><div class="line">| id | username  | pid  |</div><div class="line">+----+-----------+------+</div><div class="line">|  4 | TOM%JERRY |    1 |</div><div class="line">+----+-----------+------+</div><div class="line"></div><div class="line">// 使用escape自定义转移字符</div><div class="line">mysql&gt; SELECT * FROM user WHERE username LIKE &quot;%:%%&quot; ESCAPE &quot;:&quot;;</div><div class="line">+----+-----------+------+</div><div class="line">| id | username  | pid  |</div><div class="line">+----+-----------+------+</div><div class="line">|  4 | TOM%JERRY |    1 |</div><div class="line">+----+-----------+------+</div></pre></td></tr></table></figure>
<h1 id="数值运算符函数"><a href="#数值运算符函数" class="headerlink" title="数值运算符函数"></a>数值运算符函数</h1><table>
<thead>
<tr>
<th style="text-align:center">函数名</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">DIV</td>
<td style="text-align:center">整数除法</td>
</tr>
<tr>
<td style="text-align:center">MOD</td>
<td style="text-align:center">取余数</td>
</tr>
<tr>
<td style="text-align:center">CEIL()</td>
<td style="text-align:center">进一取整</td>
</tr>
<tr>
<td style="text-align:center">FLOOR()</td>
<td style="text-align:center">舍一取证</td>
</tr>
<tr>
<td style="text-align:center">POWER(a,b)</td>
<td style="text-align:center">幂运算(a的b次方)</td>
</tr>
<tr>
<td style="text-align:center">ROUND(num[,length])</td>
<td style="text-align:center">四舍五入，指定位数的四舍五入</td>
</tr>
<tr>
<td style="text-align:center">TRUNCATE()</td>
<td style="text-align:center">数字截取（不进行四舍五入）</td>
</tr>
<tr>
<td style="text-align:center">[NOT]BETWEEN…AND…</td>
<td style="text-align:center">[不]在范围内</td>
</tr>
<tr>
<td style="text-align:center">[NOT]IN()</td>
<td style="text-align:center">[不]在列出值范围内</td>
</tr>
<tr>
<td style="text-align:center">IS [NOT] NULL</td>
<td style="text-align:center">判断是否为空</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">// 进一</div><div class="line">mysql&gt; SELECT CEIL(3.01);</div><div class="line">+------------+</div><div class="line">| CEIL(3.01) |</div><div class="line">+------------+</div><div class="line">|          4 |</div><div class="line">+------------+</div><div class="line"></div><div class="line">// 舍一</div><div class="line">mysql&gt; SELECT FLOOR(3.99);</div><div class="line">+-------------+</div><div class="line">| FLOOR(3.99) |</div><div class="line">+-------------+</div><div class="line">|           3 |</div><div class="line">+-------------+</div><div class="line"></div><div class="line">// 指定位数的四舍五入</div><div class="line">mysql&gt; SELECT ROUND(10.1234,3);</div><div class="line">+------------------+</div><div class="line">| ROUND(10.1234,3) |</div><div class="line">+------------------+</div><div class="line">|           10.123 |</div><div class="line">+------------------+</div><div class="line"></div><div class="line">// 数字的截取</div><div class="line">mysql&gt; SELECT TRUNCATE(1.23456,2);</div><div class="line">+---------------------+</div><div class="line">| TRUNCATE(1.23456,2) |</div><div class="line">+---------------------+</div><div class="line">|                1.23 |</div><div class="line">+---------------------+</div><div class="line"></div><div class="line">// between .. and...</div><div class="line">mysql&gt; SELECT 10 BETWEEN 1 AND 100 ;</div><div class="line">+----------------------+</div><div class="line">| 10 BETWEEN 1 AND 100 |</div><div class="line">+----------------------+</div><div class="line">|                    1 |</div><div class="line">+----------------------+</div><div class="line"></div><div class="line">mysql&gt; SELECT 10 IN(10,20,30);</div><div class="line">+-----------------+</div><div class="line">| 10 IN(10,20,30) |</div><div class="line">+-----------------+</div><div class="line">|               1 |</div><div class="line">+-----------------+</div><div class="line">1 row in set (0.04 sec)</div></pre></td></tr></table></figure>
<h1 id="日期和时间函数"><a href="#日期和时间函数" class="headerlink" title="日期和时间函数"></a>日期和时间函数</h1><table>
<thead>
<tr>
<th style="text-align:center">函数名</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">NOW()</td>
<td style="text-align:center">当前日期和时间(2017-07-10 11:16:20)</td>
</tr>
<tr>
<td style="text-align:center">CURDATE()</td>
<td style="text-align:center">当前日期(2017-07-10)</td>
</tr>
<tr>
<td style="text-align:center">SURTIME()</td>
<td style="text-align:center">当前时间(11:16:38 )</td>
</tr>
<tr>
<td style="text-align:center">DATE_ADD(date,INTERVAL expr type)</td>
<td style="text-align:center">日期变化(YEAR/MONTH/WEEK/DAY/HOUR/MINUTE/SECOND)</td>
</tr>
<tr>
<td style="text-align:center">DATEDIFF()</td>
<td style="text-align:center">日期差值</td>
</tr>
<tr>
<td style="text-align:center">DATE_FORMAT(date,format)</td>
<td style="text-align:center">日期格式化（%Y=年 %m=月 %d=日 %H=时 %i=分 %s=秒）</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">// 当前时间</div><div class="line">mysql&gt; SELECT NOW();</div><div class="line">+---------------------+</div><div class="line">| NOW()               |</div><div class="line">+---------------------+</div><div class="line">| 2017-07-10 11:16:20 |</div><div class="line">+---------------------+</div><div class="line"></div><div class="line">// 当前日期</div><div class="line">mysql&gt; SELECT CURDATE();</div><div class="line">+------------+</div><div class="line">| CURDATE()  |</div><div class="line">+------------+</div><div class="line">| 2017-07-10 |</div><div class="line">+------------+</div><div class="line"></div><div class="line">// 当前时间</div><div class="line">mysql&gt; SELECT CURTIME();</div><div class="line">+-----------+</div><div class="line">| CURTIME() |</div><div class="line">+-----------+</div><div class="line">| 11:16:38  |</div><div class="line">+-----------+</div><div class="line"></div><div class="line">// 更改时间</div><div class="line">mysql&gt; SELECT DATE_ADD(&quot;2017-07-10&quot;,INTERVAL 1 YEAR);</div><div class="line">+----------------------------------------+</div><div class="line">| DATE_ADD(&quot;2017-07-10&quot;,INTERVAL 1 YEAR) |</div><div class="line">+----------------------------------------+</div><div class="line">| 2018-07-10                             |</div><div class="line">+----------------------------------------+</div><div class="line"></div><div class="line">// 计算时间差</div><div class="line">mysql&gt; SELECT DATEDIFF(&quot;2017-7-10&quot;,&quot;2017-6-10&quot;);</div><div class="line">+-----------------------------------+</div><div class="line">| DATEDIFF(&quot;2017-7-10&quot;,&quot;2017-6-10&quot;) |</div><div class="line">+-----------------------------------+</div><div class="line">|                                30 |</div><div class="line">+-----------------------------------+</div><div class="line"></div><div class="line">// 更改时间格式</div><div class="line">mysql&gt; SELECT DATE_FORMAT(NOW(),&quot;%Y年 %m月%d日%H时%i分%s秒&quot;);</div><div class="line">+------------------------------------------------+</div><div class="line">| DATE_FORMAT(NOW(),&quot;%Y年 %m月%d日%H时%i分%s秒&quot;) |</div><div class="line">+------------------------------------------------+</div><div class="line">| 2017年 07月10日11时28分16秒                    |</div><div class="line">+------------------------------------------------+</div></pre></td></tr></table></figure>
<h1 id="信息函数"><a href="#信息函数" class="headerlink" title="信息函数"></a>信息函数</h1><table>
<thead>
<tr>
<th style="text-align:center">函数名</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CONNECTION_ID()</td>
<td style="text-align:center">连接ID</td>
</tr>
<tr>
<td style="text-align:center">DATABASE()</td>
<td style="text-align:center">返回当前数据库</td>
</tr>
<tr>
<td style="text-align:center">LAST_INSERT_ID()</td>
<td style="text-align:center">最后插入记录的数据表的ID字段</td>
</tr>
<tr>
<td style="text-align:center">USER()</td>
<td style="text-align:center">当前用户</td>
</tr>
<tr>
<td style="text-align:center">VERSION()</td>
<td style="text-align:center">当前版本信息</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SELECT CONNECTION_ID();</div><div class="line">+-----------------+</div><div class="line">| CONNECTION_ID() |</div><div class="line">+-----------------+</div><div class="line">|               5 |</div><div class="line">+-----------------+</div><div class="line"></div><div class="line">mysql&gt; SELECT DATABASE();</div><div class="line">+------------+</div><div class="line">| DATABASE() |</div><div class="line">+------------+</div><div class="line">| test       |</div><div class="line">+------------+</div><div class="line"></div><div class="line">mysql&gt; SELECT LAST_INSERT_ID();</div><div class="line">+------------------+</div><div class="line">| LAST_INSERT_ID() |</div><div class="line">+------------------+</div><div class="line">|                5 |</div><div class="line">+------------------+</div><div class="line"></div><div class="line">mysql&gt; SELECT USER();</div><div class="line">+----------------+</div><div class="line">| USER()         |</div><div class="line">+----------------+</div><div class="line">| root@localhost |</div><div class="line">+----------------+</div><div class="line"></div><div class="line">mysql&gt; SELECT VERSION();</div><div class="line">+------------+</div><div class="line">| VERSION()  |</div><div class="line">+------------+</div><div class="line">| 5.7.18-log |</div><div class="line">+------------+</div></pre></td></tr></table></figure>
<h1 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h1><table>
<thead>
<tr>
<th style="text-align:center">函数名</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AVG()</td>
<td style="text-align:center">平均值</td>
</tr>
<tr>
<td style="text-align:center">COUNT()</td>
<td style="text-align:center">计数</td>
</tr>
<tr>
<td style="text-align:center">MAX()</td>
<td style="text-align:center">求最大值</td>
</tr>
<tr>
<td style="text-align:center">MIN()</td>
<td style="text-align:center">最小值</td>
</tr>
<tr>
<td style="text-align:center">SUM()</td>
<td style="text-align:center">求总和</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SELECT MAX(goods_price) AS price FROM tdb_goods;</div><div class="line">+-----------+</div><div class="line">| price     |</div><div class="line">+-----------+</div><div class="line">| 28888.000 |</div><div class="line">+-----------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; SELECT MIN(goods_price) AS price FROM tdb_goods;</div><div class="line">+--------+</div><div class="line">| price  |</div><div class="line">+--------+</div><div class="line">| 99.000 |</div><div class="line">+--------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; SELECT AVG(goods_price) AS price FROM tdb_goods;</div><div class="line">+--------------+</div><div class="line">| price        |</div><div class="line">+--------------+</div><div class="line">| 5845.1000000 |</div><div class="line">+--------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; SELECT SUM(goods_price) AS price FROM tdb_goods;</div><div class="line">+------------+</div><div class="line">| price      |</div><div class="line">+------------+</div><div class="line">| 116902.000 |</div><div class="line">+------------+</div><div class="line">1 row in set (0.00 sec)</div><div class="line"></div><div class="line">mysql&gt; SELECT COUNT(goods_id) AS COUNT FROM tdb_goods;</div><div class="line">+-------+</div><div class="line">| COUNT |</div><div class="line">+-------+</div><div class="line">|    20 |</div><div class="line">+-------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure>
<h1 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数"></a>加密函数</h1><table>
<thead>
<tr>
<th style="text-align:center">函数名</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">MD5()</td>
<td style="text-align:center">信息摘要算法</td>
</tr>
<tr>
<td style="text-align:center">PASSWORD()</td>
<td style="text-align:center">密码算法</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SELECT MD5(&quot;MYSQL &quot;);</div><div class="line">+----------------------------------+</div><div class="line">| MD5(&quot;MYSQL &quot;)                    |</div><div class="line">+----------------------------------+</div><div class="line">| 31d72f67ea8d0f7ee426456e83327af2 |</div><div class="line">+----------------------------------+</div><div class="line"></div><div class="line">mysql&gt; SELECT PASSWORD(&quot;MYSQL &quot;);</div><div class="line">+-------------------------------------------+</div><div class="line">| PASSWORD(&quot;MYSQL &quot;)                        |</div><div class="line">+-------------------------------------------+</div><div class="line">| *50E5F8E9E5335C3578BF217737DB2DCDEDCB8B98 |</div><div class="line">+-------------------------------------------+</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NTR1czU1bTk=]]></title>
      <url>/2017/07/09/%E7%8B%AC%E7%99%BD/</url>
      <content type="html"><![CDATA[<pre style="white-space: pre-wrap; word-wrap: break-word;">

NWFXOTVMbUY1cktoNkxlZjVMcTY2SyswNkwrSDZZS2o1THFiNWI2QTVMcUw0NENDNUx1SzVwbWE1WktNNUxpQTVMMk41YVNuNUwyczZJR0s1YVNwNzd5TTVweUo1TGlBNTRLNTU0SzU1b1NmNktlbTQ0Q0M1NDZ3NVp5bzVhUzA2SVNSNXB5SjU0SzU1TG14NDRDQzQ0Q0M1cHlKNTRLNTVMbXg0NENDNDRDQ0NncmxwYjNtc1lua3VJM21qNURsdlpQbHViVGxpNGZqZ0lMbWlKSG5qckRsbktqbm1vVGxyYWJrdWFEbWdJSGx1cWJ2dkl6bHQ3TG51NC9tcjVUa3VZdmxpWTNtbjZYa3VvYmx2b2pscEpyamdJTG5xYmJsaGJibGpwL2xtNkR2dkl6bWlKSG1zcUhtbklub3A0VGxpSkx2dkl6bHNMSG5ycGZtbklua3VvYm9wNFRsaUpMbWlKSGt1Wi9sdm9qcG1yN21pYWZvb1l6amdJTGt1Wi9vcnJqbW1LL29oNnJtanFmbGlwdmt1STNscEovbGtLZmpnSUlLNWFTbjVMcU03N3lNNW9pUjU1cUU1YTJtNUxtZzZZZU41YitENUxpQTU1dTA1YTZlNVp5bzVvcUE1cHl2NUxpSzZaMmk3N3lNNklxeDVMcUc1YjZJNWFTYTVwZTI2WmUwNWEybTVMbWc1b3FBNXB5djc3eU02Sm05NTRTMjVhMm01NXFFNUxtZjVMaU41b0NPNUxtSTVxQzM3N3lNNWErODZJZTA1TGlUNUxpYTZLKys2WU85NXBpdjVMK2Q1b3lCNVp5bzVMaU41b3lDNTZlUjU1cUU1ckMwNWJtejVMaUs3N3lNNWFTbjVMaUE1cGUyNkwrWTVvT3o2TCtINW91LzVhV1c1YTJtNlllUjc3eU01NDZ3NVp5bzU1eUw1cDJsNVlpdzVZT1A1TGlxNTZ5UjZLK2Q0NENDNWEybTVMbWc1b3FBNXB5djc3eU01b2lSNWJDeDVMaUE1cTJsNUxpQTVxMmw2TFd3NVpDUjVMcUc1NkNCNVlhYzU1cUU2SXFDNWFXUDc3eU01TDJHNXBpdjVvaVI1Ym0yNUxpTjVvT3o2TCtaNXFDMzc3eU01b2lSNkwrWTVvT3o1bzZsNktlbTVwdTA1YVNhNUx5WTU2ZUE1NXFFNUxxNjQ0Q0M1b2lSNkwrWTVvT3o1bytRNVkySDZJZXE1YmV4NDRDQzVvaVI2TCtZNW9PejZJQ0Q1NkNVNDRDQzQ0Q0NDdWl2dE9XSXNPaUFnK2VnbE8rOGpPaS9tZVM4dk9TNWp1YXlvZWFjaWVTN2dPUzVpT21BaWVhTHFlZWFoT1M5bWVXY3NPKzhqT2lBZysrOGpPaUFnK1dRcCsrOGpPUzRqZWV1b2VlN2srYWVuT2FBanVTNWlPYWd0Kys4ak9pdmxlaXZsZVdRcCtPQWd1UzRqZWVFdHVXa3ArV3RwdVM0Z09lQ3VlYXpvdWErbk9tRHZlYXlvZWFjaWUrOGpPYWVyK2VIcGVhWG9PV1JzK09BZ2dya3ZZYm1pSkhtbklEbWk0WGx2NFBubW9UdnZJem1tSy9taUpIb2c3M2t1STNvZzczbG5acm1qSUh2dkl6bm5JdmxpTERscEtma3Zhemt1NnpwZzczbG5LamxyYWJrdWFEdnZJem9nSXptaUpIbm1vVG1nSUhsdXFibGpiVG1nTHZtbUsvbWo1RGt1STNrdUlybW5hWHZ2SXptaUpIbWc3UG1pYjdrdUlEa3VLcm9nNzNsdWJib2dxbmxyYWJrdWFEbm1vVGt1cnJqZ0lMbGo2L2t1NlhscGIzbGc0L2x2b2pwbXI3bWliN2pnSUxtaUpIa3VJRGt1S3JrdXJybm1vVG1nN1BtczVYbWdMdm1tSy9sdm9qbHJybm1tSlBvb3F2bGthamxtN1RubW9Ua3VycmxrSXpsakpidnZJem1pSkhubW9Ubm02N21vSWZscGIzbGc0L290b3JtbmFYb3Rvcm92NXpqZ0lMamdJTGpnSUlLNXB5QTZMK1I2SUNCNXBpdjVvT3o2TFczNWFXNTc3eU01cGUyNlplMDViZXk1N3VQNkwrSDVZNjc1THFHNllLajVMbUk1TG1GNzd5TTVZK3Y1cGl2NkwrWTVwaXY1YjZJNlpxKzViMjc1YnFWNllHWDViK1k3N3lNNXErUDViMlQ2SWVxNWJleDZaZXk1TGlMNXAybDc3eU01YkN4NWI2STVhNjU1cGlUNW9PejVZaXc1YVc1NDRDQzVZK3Y2SU85NXBpdjViMlQ1cGUyNWE2ZTVaeW81cGl2NkwrcjVMaU41YjZYNWJleTc3eU01YSs4NkllMDVvaVI1TGlBNTV1MDVwUys1TGlONUxpTDQ0Q0M1WVcyNWE2ZTZLZUo1YjZYNkllcTViZXg2TCtZNXBpdjVhU3E1YVNwNTV5ZjQ0Q0M2TCtaNUxxYjVMaWM2S1cvNTV5ZjU1cUU1cktoNWIrRjZLYUI1NVdaNW9HTDQ0Q0M1clM3NVp5bzVadWU1YitHNUxpdDU1cUU1THE2NVkrcTZJTzk1cTJpNXEybDVMaU41WW1ONDRDQ0Nncm1uSURvdjVIb2lySGt1b2Jsdm9qbHBKcm1sN2JwbDdUa3VvYm9wNlBsam9ibGo3THZ2SXptbUk3bW5KM2pnSUhtc1lubW5KM2pnSUhscm92bW5KM2pnSUhwbW92bGxKRGpnSUxrdUkzbW1LL210N0hsaGFYa3VvYm9wNlB2dkl6bGo2cm1tSy9rdW9ib3A2UGpnSUxrdW9ib3A2UGt1SURrdXB2bGpvYmxqN0xsa0k3bWlZM21oSi9vcDRubGlMRHZ2SXprdUszbGpZN2t1SXJrdUl2a3VwVGxqWVBsdWJUbm1vVG1sb2ZtbUk3bm5KL25tb1RtbUsvbHZvamxnTHpsdnBmb2g2cm9zYXJqZ0lMbGpZN2xwSS9tc0pIbWw0L2xuS2psajZUa3U2UG5tb1RudTQvbXRZN21sb2ZsakpibnJZbmx2b2pscEpybWxybnBuYUxwZzczbW1LL3Bvb2JsaFlqa3VvN29wYi9tbHJubm1vVGpnSUxsajZybW1LL21sN2JrdTZQbW03VG1tNy9qZ0lMbGhiVG9vYkRrdXFUbW03L2pnSUxtdUlYbW5KM25tb1RvcG9ibmdhM21pSkhrdTZ6a3ZwM25oTGJvcnJEbHY0YmxzS1RtbHJEamdJTGxoYkhrdXFmbGhacm5tb1RsdUtibW5hWG5tb1RudVlIb2phUG5vYTdscnA3bHZvamxnTHpsdnBmb2g2cm9zYXJqZ0lMa3ZZYm1tSy9sbktqa3VLM2xqWTdrdXBUbGpZUGx1YlRubW9UbGpvYmxqN0xrdUlydnZJem92NW5ucDQzbnVZSG9qYVBubW9UbWw3Ymt1NlBsdWJia3VJM21tSy9uckt6a3VJRG1yS0hqZ0lMbHU3cmxtNzNsaUozbW5KL25tb1RudVlIb2phUGx1YmJrdUkzb2c3M2t1NlBvb2FqbGlMYmx1cWJubW9Ua3ZKam90b3JtZ0tmamdJTGxqNnJvZzczb29ham5wTHJsdlpQa3VJdmpnSUxscG9MbW5wdzFNRERsdWJUbGtJN2xoYkhrdXFmbGhacm92NWpvZzczbHNibm5xNHZrdW83a3VKYm5sWXpvZ0l6a3VJM2xnSkxqZ0lMcGdxUG1pSkhsc0xIb3JxVGt1THJvdjVubW1LL2xpTGJsdXFibnU1bm1pSkhrdTZ6bHVLYm1uYVhubW9UbnBvL3BuN1BqZ0lMb2dJemt1SlR2dkl6bWlKSG5qckRsbktqb3Rvcm1uYVhvdG9ybGxwem1yS0xrdUlEa3VwdmxqNlRrdTZQbm1vVG1sb2ZscmFia3ZaemxrNEhqZ0lMbm5KL25tb1RtbUsvbHZvam5zcjduZ3J6dnZJem5uNjNubjYzbm1vVGxoNkRrdUtybHJaZmxzTEhvZzczbHNJYm1pWURtbklubm1vVG1nNFhtaEovbG00cm1pNnpsaGJia3VLM2pnSUxsZ0x6bHZwZm9oNnJvc2FydnZJSGt1STNvdjRmbm1vVG1pSkhubW9Ub3I2M21sb2ZtbUsvbG5Lamx2b2psdDY3dnZJem9wb0htbUsvbWlKSG1sNm5uZ3JubWhJL29yNGJsaUxEb3Y1bmt1SURuZ3JudnZJemxqNi9vZzczbHNMSGt1STNrdkpybW5Jbmt1NHJscEtuamdJTGpnSUxqZ0lMamdJSUtDZ3JrdTRybW1acmxrb3pscEtma3Zhem9nWXJrdW9ibHZvamt1WVh2dkl6bWlKSGx2b2prdmFubW5JM2xwS2ZrdmF6bWxhTGt1bzdvdjczbXNZTG5tb1Ruc3I3bnBaN3Z2SXpvaDZybHQ3SGxscHptcktMbm1vVGxzTEhsaTRmbWxhTG5tb1RsanJ2b3Y3M21zWUx2dkl6bGdMemx2cGZtaUpIbHJhYmt1YURsbFlyamdJTGxqNmJscEpidnZJem1uSW5uZ3JubHNJL2xzSS9ubW9UbHBMSG9rTDNqZ0lMbG02RGt1THJqZ0lMamdJTGpnSUxqZ0lMamdJTGpnSUxqZ0lMamdJTGpnSUxqZ0lMamdJSUtDdWFjZ09XUWp1T0FndWlBZytlZ2xPKzhnUW9LNVlXbzU0bUg1cFdqNW9tdjc3eU02SWVxNW9pUjU0dXM1NW05NDRDQ0Nnbz0=

</pre>




<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="0" height="0" src="http://music.163.com/outchain/player?type=2&auto=1&id=407002483&height=66"></iframe>

]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL---子查询、表的连接]]></title>
      <url>/2017/07/08/MySQL-%E5%AD%90%E6%9F%A5%E8%AF%A2%E3%80%81%E8%A1%A8%E7%9A%84%E8%BF%9E%E6%8E%A5/</url>
      <content type="html"><![CDATA[<h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><p>常用的比较运算符： =、&gt;、&lt;、&gt;=、&lt;=、&lt;&gt;、!=、&lt;=&gt;</p>
<p>修饰运算符<br><a id="more"></a></p>
<table>
<thead>
<tr>
<th style="text-align:center">运算符</th>
<th style="text-align:center">关键字</th>
<th style="text-align:center">关键字</th>
<th style="text-align:center">关键字</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&nbsp;</td>
<td style="text-align:center">ANY</td>
<td style="text-align:center">SOME</td>
<td style="text-align:center">ALL</td>
</tr>
<tr>
<td style="text-align:center">&gt;、&gt;=</td>
<td style="text-align:center">最小值</td>
<td style="text-align:center">最小值</td>
<td style="text-align:center">最大值</td>
</tr>
<tr>
<td style="text-align:center">&lt;、&lt;=</td>
<td style="text-align:center">最大值</td>
<td style="text-align:center">最大值</td>
<td style="text-align:center">最小值</td>
</tr>
<tr>
<td style="text-align:center">=</td>
<td style="text-align:center">任意值</td>
<td style="text-align:center">任意值</td>
<td style="text-align:center">&nbsp;</td>
</tr>
<tr>
<td style="text-align:center">&lt;&gt;、!=</td>
<td style="text-align:center">&nbsp;</td>
<td style="text-align:center">&nbsp;</td>
<td style="text-align:center">任意值</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 查找所有价格大于平均值的行</div><div class="line">mysql&gt; SELECT goods_id,goods_name,goods_price FROM tdb_goods</div><div class="line">    -&gt; WHERE goods_price &gt; (SELECT ROUND(AVG(goods_price)) FROM tdb_goods)</div><div class="line">    -&gt; ORDER BY goods_price;</div></pre></td></tr></table></figure>
<p>运算符=ANY 和 =SOME 相当于 IN<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">=ANY =SOME --IN</div><div class="line">mysql&gt; SELECT goods_id,goods_name,goods_price FROM tdb_goods WHERE goods_price = ANY (SELECT goods_price FROM tdb_goods WHERE goods_cate=&apos;超级本&apos;);</div><div class="line">+----------+---------------------------------+-------------+</div><div class="line">| goods_id | goods_name                      | goods_price |</div><div class="line">+----------+---------------------------------+-------------+</div><div class="line">|        5 | X240(20ALA0EYCD) 12.5英寸超极本 |    4999.000 |</div><div class="line">|        6 | U330P 13.3英寸超极本            |    4299.000 |</div><div class="line">|        7 | SVP13226SCB 13.3英寸触控超极本  |    7999.000 |</div><div class="line">+----------+---------------------------------+-------------+</div></pre></td></tr></table></figure></p>
<p>&gt; ANY  表示大于最小值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// &gt; ANY </div><div class="line">mysql&gt; SELECT goods_id,goods_name,goods_price FROM tdb_goods WHERE goods_price &gt; ANY (SELECT goods_price FROM tdb_goods WHERE goods_cate=&apos;超级本&apos;);</div><div class="line">+----------+----------------------------------+-------------+</div><div class="line">| goods_id | goods_name                       | goods_price |</div><div class="line">+----------+----------------------------------+-------------+</div><div class="line">|        2 | Y400N 14.0英寸笔记本电脑         |    4899.000 |</div><div class="line">|        3 | G150TH 15.6英寸游戏本            |    8499.000 |</div><div class="line">|        5 | X240(20ALA0EYCD) 12.5英寸超极本  |    4999.000 |</div><div class="line">|        7 | SVP13226SCB 13.3英寸触控超极本   |    7999.000 |</div><div class="line">|       13 | iMac ME086CH/A 21.5英寸一体电脑  |    9188.000 |</div><div class="line">|       16 | PowerEdge T110 II服务器          |    5388.000 |</div><div class="line">|       17 | Mac Pro MD878CH/A 专业级台式电脑 |   28888.000 |</div><div class="line">|       18 |  HMZ-T3W 头戴显示设备            |    6999.000 |</div><div class="line">|       20 | X3250 M4机架式服务器 2583i14     |    6888.000 |</div><div class="line">|       21 |  HMZ-T3W 头戴显示设备            |    6999.000 |</div><div class="line">+----------+----------------------------------+-------------+</div></pre></td></tr></table></figure></p>
<p>&gt; ALL表示大于最大值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// &gt; ALL </div><div class="line">mysql&gt; SELECT goods_id,goods_name,goods_price FROM tdb_goods WHERE goods_price &gt; ALL (SELECT goods_price FROM tdb_goods WHERE goods_cate=&apos;超级本&apos;);</div><div class="line">+----------+----------------------------------+-------------+</div><div class="line">| goods_id | goods_name                       | goods_price |</div><div class="line">+----------+----------------------------------+-------------+</div><div class="line">|        3 | G150TH 15.6英寸游戏本            |    8499.000 |</div><div class="line">|       13 | iMac ME086CH/A 21.5英寸一体电脑  |    9188.000 |</div><div class="line">|       17 | Mac Pro MD878CH/A 专业级台式电脑 |   28888.000 |</div><div class="line">+----------+----------------------------------+-------------+</div></pre></td></tr></table></figure></p>
<h2 id="IN-和NOT-IN"><a href="#IN-和NOT-IN" class="headerlink" title="IN 和NOT IN"></a>IN 和NOT IN</h2><p><strong>NOT IN等效于！=ALL 或 &lt;&gt;ALL</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">// NOT IN 与 ！= ALL等效 ，以下查询不是超极本的电脑，两次查询的结果相同</div><div class="line">mysql&gt; SELECT goods_id,goods_name,goods_price FROM tdb_goods WHERE goods_price NOT IN  (SELECT goods_price FROM tdb_goods WHERE goods_cate=&apos;超级本&apos;);</div><div class="line">mysql&gt; SELECT goods_id,goods_name,goods_price FROM tdb_goods WHERE goods_price != ALL  (SELECT goods_price FROM tdb_goods WHERE goods_cate=&apos;超级本&apos;);</div><div class="line">+----------+------------------------------------------------------------------------+-------------+</div><div class="line">| goods_id | goods_name                                                             | goods_price |</div><div class="line">+----------+------------------------------------------------------------------------+-------------+</div><div class="line">|        1 | R510VC 15.6英寸笔记本                                                  |    3399.000 |</div><div class="line">|        2 | Y400N 14.0英寸笔记本电脑                                               |    4899.000 |</div><div class="line">|        3 | G150TH 15.6英寸游戏本                                                  |    8499.000 |</div><div class="line">|        4 | X550CC 15.6英寸笔记本                                                  |    2799.000 |</div><div class="line">|        8 | iPad mini MD531CH/A 7.9英寸平板电脑                                    |    1998.000 |</div><div class="line">|        9 | iPad Air MD788CH/A 9.7英寸平板电脑 （16G WiFi版）                      |    3388.000 |</div><div class="line">|       10 |  iPad mini ME279CH/A 配备 Retina 显示屏 7.9英寸平板电脑 （16G WiFi版） |    2788.000 |</div><div class="line">|       11 | IdeaCentre C340 20英寸一体电脑                                         |    3499.000 |</div><div class="line">|       12 | Vostro 3800-R1206 台式电脑                                             |    2899.000 |</div><div class="line">|       13 | iMac ME086CH/A 21.5英寸一体电脑                                        |    9188.000 |</div><div class="line">|       14 | AT7-7414LP 台式电脑 （i5-3450四核 4G 500G 2G独显 DVD 键鼠 Linux ）     |    3699.000 |</div><div class="line">|       15 | Z220SFF F4F06PA工作站                                                  |    4288.000 |</div><div class="line">|       16 | PowerEdge T110 II服务器                                                |    5388.000 |</div><div class="line">|       17 | Mac Pro MD878CH/A 专业级台式电脑                                       |   28888.000 |</div><div class="line">|       18 |  HMZ-T3W 头戴显示设备                                                  |    6999.000 |</div><div class="line">|       19 | 商务双肩背包                                                           |      99.000 |</div><div class="line">|       20 | X3250 M4机架式服务器 2583i14                                           |    6888.000 |</div><div class="line">|       21 |  HMZ-T3W 头戴显示设备                                                  |    6999.000 |</div><div class="line">|       22 | 商务双肩背包                                                           |      99.000 |</div><div class="line">+----------+------------------------------------------------------------------------+-------------+</div></pre></td></tr></table></figure></p>
<h1 id="EXISTS"><a href="#EXISTS" class="headerlink" title="EXISTS"></a>EXISTS</h1><p>如果子查询返回任何行，EXISTS将返回TRUE ，否则返回FALSE<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from t1 where exists (select * from t1 where id = 2);</div></pre></td></tr></table></figure></p>
<h1 id="INSERT-INTO-tbl-name-col-name-…-SELECT-…"><a href="#INSERT-INTO-tbl-name-col-name-…-SELECT-…" class="headerlink" title="INSERT INTO tbl_name [(col_name,…)] SELECT …"></a>INSERT INTO tbl_name [(col_name,…)] SELECT …</h1><p>使用查询插入数据表</p>
<p>创建分类表，用以上语句更新分类表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; INSERT INTO tdb_goods_cate (cate_name) SELECT goods_cate FROM tdb_goods GROUP BY goods_cate;</div></pre></td></tr></table></figure></p>
<h1 id="多表更新"><a href="#多表更新" class="headerlink" title="多表更新"></a>多表更新</h1><p>UPDATE tbl_name1 [LEFT|RIGHT]JOIN tbl_name2 ON condition SET name=value… WHERE condition..</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 按照分类表，将商品表中的数据更新</div><div class="line">mysql&gt; UPDATE tdb_goods INNER JOIN tdb_goods_cate </div><div class="line">ON tdb_goods.goods_cate=tdb_goods_cate.cate_name </div><div class="line">SET tdb_goods.goods_cate = tdb_goods_cate.id;</div></pre></td></tr></table></figure>
<h1 id="创建表的同时插入数据"><a href="#创建表的同时插入数据" class="headerlink" title="创建表的同时插入数据"></a>创建表的同时插入数据</h1><p>CREATE TABLE [IF NOT EXISTS] tbl_name [(create_defition,…)] select_statement…</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 创建表的同时插入表信息</div><div class="line">mysql&gt; CREATE TABLE tdb_goods_brand(</div><div class="line">    -&gt; id INT(5) UNSIGNED PRIMARY KEY AUTO_INCREMENT,</div><div class="line">    -&gt; brand_name VARCHAR(40)</div><div class="line">    -&gt; )</div><div class="line">    -&gt; SELECT brand_name FROM tdb_goods GROUP BY brand_name;</div></pre></td></tr></table></figure>
<h1 id="连接类型"><a href="#连接类型" class="headerlink" title="连接类型"></a>连接类型</h1><ul>
<li><strong>INNER JOIN ： 内链接。 显示左表和右表都存在的记录（显示交集）</strong></li>
<li><strong>LEFT [OUTER] JOIN ： 左外连接 ，显示左表的所有记录和右表中满足条件的记录</strong></li>
<li><p><strong>RIGHT [OUUTER] JOIN ： 右外连接，显示右表的所有记录和左表中满足条件的记录</strong></p>
</li>
<li><p>在MySQL中，JOIN,CROSS JOIN 和INNER JOIN 是等价的 </p>
</li>
<li>用ON 关键字类设定连接条件，也可以使用WHERE来代替。通常使用ON关键字类设定连接条件。使用WHERE关键字今昔你个结果集记录的过滤</li>
</ul>
<h1 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h1><p>mysql&gt; SELECT goods_id,goods_name,cate_name,brand_name,goods_price,is_show ,is_saleoff<br>    -&gt; FROM tdb_goods g<br>    -&gt; JOIN tdb_goods_cate c on c.id = g.goods_cate_id<br>    -&gt; JOIN tdb_goods_brand b on b.id = g.brand_id;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">// 多表查询</div><div class="line">mysql&gt; SELECT goods_id,goods_name,cate_name,brand_name,goods_price,is_show ,is_saleoff </div><div class="line">FROM tdb_goods </div><div class="line">INNER JOIN tdb_goods_cate ON tdb_goods.goods_cate_id = tdb_goods_cate.id </div><div class="line">INNER JOIN  tdb_goods_brand ON tdb_goods.brand_id = tdb_goods_brand.id;</div><div class="line"></div><div class="line">// 使用AS未每个表重命名</div><div class="line">mysql&gt; SELECT goods_id,goods_name,cate_name,brand_name,goods_price,is_show ,is_saleoff</div><div class="line">    -&gt; FROM tdb_goods g</div><div class="line">    -&gt; JOIN tdb_goods_cate c on c.id = g.goods_cate_id</div><div class="line">    -&gt; JOIN tdb_goods_brand b on b.id = g.brand_id;</div><div class="line"></div><div class="line">// 结果相同</div><div class="line">+----------+------------------------------------------------------------------------+---------------+------------+-------------+---------+------------+</div><div class="line">| goods_id | goods_name                                                             | cate_name     | brand_name | goods_price | is_show | is_saleoff |</div><div class="line">+----------+------------------------------------------------------------------------+---------------+------------+-------------+---------+------------+</div><div class="line">|        1 | R510VC 15.6英寸笔记本                                                  | 笔记本        | 华硕       |    3399.000 |       1 |          0 |</div><div class="line">|        2 | Y400N 14.0英寸笔记本电脑                                               | 笔记本        | 联想       |    4899.000 |       1 |          0 |</div><div class="line">|        3 | G150TH 15.6英寸游戏本                                                  | 游戏本        | 雷神       |    8499.000 |       1 |          0 |</div><div class="line">|        4 | X550CC 15.6英寸笔记本                                                  | 笔记本        | 华硕       |    2799.000 |       1 |          0 |</div><div class="line">|        5 | X240(20ALA0EYCD) 12.5英寸超极本                                        | 超级本        | 联想       |    4999.000 |       1 |          0 |</div><div class="line">|        6 | U330P 13.3英寸超极本                                                   | 超级本        | 联想       |    4299.000 |       1 |          0 |</div><div class="line">|        7 | SVP13226SCB 13.3英寸触控超极本                                         | 超级本        | 索尼       |    7999.000 |       1 |          0 |</div><div class="line">|        8 | iPad mini MD531CH/A 7.9英寸平板电脑                                    | 平板电脑      | 苹果       |    1998.000 |       1 |          0 |</div><div class="line">|        9 | iPad Air MD788CH/A 9.7英寸平板电脑 （16G WiFi版）                      | 平板电脑      | 苹果       |    3388.000 |       1 |          0 |</div><div class="line">|       10 |  iPad mini ME279CH/A 配备 Retina 显示屏 7.9英寸平板电脑 （16G WiFi版） | 平板电脑      | 苹果       |    2788.000 |       1 |          0 |</div><div class="line">|       11 | IdeaCentre C340 20英寸一体电脑                                         | 台式机        | 联想       |    3499.000 |       1 |          0 |</div><div class="line">|       12 | Vostro 3800-R1206 台式电脑                                             | 台式机        | 戴尔       |    2899.000 |       1 |          0 |</div><div class="line">|       13 | iMac ME086CH/A 21.5英寸一体电脑                                        | 台式机        | 苹果       |    9188.000 |       1 |          0 |</div><div class="line">|       14 | AT7-7414LP 台式电脑 （i5-3450四核 4G 500G 2G独显 DVD 键鼠 Linux ）     | 台式机        | 宏碁       |    3699.000 |       1 |          0 |</div><div class="line">|       15 | Z220SFF F4F06PA工作站                                                  | 服务器/工作站 | 惠普       |    4288.000 |       1 |          0 |</div><div class="line">|       16 | PowerEdge T110 II服务器                                                | 服务器/工作站 | 戴尔       |    5388.000 |       1 |          0 |</div><div class="line">|       17 | Mac Pro MD878CH/A 专业级台式电脑                                       | 服务器/工作站 | 苹果       |   28888.000 |       1 |          0 |</div><div class="line">|       18 |  HMZ-T3W 头戴显示设备                                                  | 笔记本配件    | 索尼       |    6999.000 |       1 |          0 |</div><div class="line">|       19 | 商务双肩背包                                                           | 笔记本配件    | 索尼       |      99.000 |       1 |          0 |</div><div class="line">|       20 | X3250 M4机架式服务器 2583i14                                           | 服务器/工作站 | IBM        |    6888.000 |       1 |          0 |</div><div class="line">|       21 |  HMZ-T3W 头戴显示设备                                                  | 笔记本配件    | 索尼       |    6999.000 |       1 |          0 |</div><div class="line">|       22 | 商务双肩背包                                                           | 笔记本配件    | 索尼       |      99.000 |       1 |          0 |</div><div class="line">+----------+------------------------------------------------------------------------+---------------+------------+-------------+---------+------------+</div></pre></td></tr></table></figure></p>
<p>无限分组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// 使用左连接查询每个子类的父类</div><div class="line">mysql&gt;  SELECT s.type_id AS son_id, s.type_name AS son_name,p.type_name AS parent_name</div><div class="line">    -&gt; FROM tdb_goods_types AS s LEFT JOIN tdb_goods_types AS p</div><div class="line">    -&gt; ON s.parent_id = p.type_id;</div><div class="line">+--------+------------+-------------+</div><div class="line">| son_id | son_name   | parent_name |</div><div class="line">+--------+------------+-------------+</div><div class="line">|      1 | 家用电器   | NULL        |</div><div class="line">|      2 | 电脑、办公 | NULL        |</div><div class="line">|      3 | 大家电     | 家用电器    |</div><div class="line">|      4 | 生活电器   | 家用电器    |</div><div class="line">|      5 | 平板电视   | 大家电      |</div><div class="line">|      6 | 空调       | 大家电      |</div><div class="line">|      7 | 电风扇     | 生活电器    |</div><div class="line">|      8 | 饮水机     | 生活电器    |</div><div class="line">|      9 | 电脑整机   | 电脑、办公  |</div><div class="line">|     10 | 电脑配件   | 电脑、办公  |</div><div class="line">|     11 | 笔记本     | 电脑整机    |</div><div class="line">|     12 | 超级本     | 电脑整机    |</div><div class="line">|     13 | 游戏本     | 电脑整机    |</div><div class="line">|     14 | CPU        | 电脑配件    |</div><div class="line">|     15 | 主机       | 电脑配件    |</div><div class="line">+--------+------------+-------------+</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">使用左查询查询所有父类的子类</div><div class="line">mysql&gt; SELECT p.type_id parent_id, p.type_name parent_name, s.type_name son_name</div><div class="line">    -&gt; FROM tdb_goods_types AS p LEFT JOIN tdb_goods_types AS s</div><div class="line">    -&gt; ON p.type_id = s.parent_id</div><div class="line">    -&gt; ORDER BY parent_id;</div><div class="line">+-----------+-------------+----------+</div><div class="line">| parent_id | parent_name | son_name |</div><div class="line">+-----------+-------------+----------+</div><div class="line">|         1 | 家用电器    | 大家电   |</div><div class="line">|         1 | 家用电器    | 生活电器 |</div><div class="line">|         2 | 电脑、办公  | 电脑整机 |</div><div class="line">|         2 | 电脑、办公  | 电脑配件 |</div><div class="line">|         3 | 大家电      | 平板电视 |</div><div class="line">|         3 | 大家电      | 空调     |</div><div class="line">|         4 | 生活电器    | 电风扇   |</div><div class="line">|         4 | 生活电器    | 饮水机   |</div><div class="line">|         5 | 平板电视    | NULL     |</div><div class="line">|         6 | 空调        | NULL     |</div><div class="line">|         7 | 电风扇      | NULL     |</div><div class="line">|         8 | 饮水机      | NULL     |</div><div class="line">|         9 | 电脑整机    | 笔记本   |</div><div class="line">|         9 | 电脑整机    | 游戏本   |</div><div class="line">|         9 | 电脑整机    | 超级本   |</div><div class="line">|        10 | 电脑配件    | 主机     |</div><div class="line">|        10 | 电脑配件    | CPU      |</div><div class="line">|        11 | 笔记本      | NULL     |</div><div class="line">|        12 | 超级本      | NULL     |</div><div class="line">|        13 | 游戏本      | NULL     |</div><div class="line">|        14 | CPU         | NULL     |</div><div class="line">|        15 | 主机        | NULL     |</div><div class="line">+-----------+-------------+----------+</div><div class="line"></div><div class="line">// 查看父类的子类个数</div><div class="line">mysql&gt; SELECT p.type_id AS parent_id, p.type_name AS parent_name, count(p.parent_id) AS son_count</div><div class="line">    -&gt; FROM tdb_goods_types AS p LEFT JOIN tdb_goods_types AS s</div><div class="line">    -&gt; ON p.type_id = s.parent_id</div><div class="line">    -&gt; GROUP BY parent_name ORDER BY parent_id;</div><div class="line">+-----------+-------------+-----------+</div><div class="line">| parent_id | parent_name | son_count |</div><div class="line">+-----------+-------------+-----------+</div><div class="line">|         1 | 家用电器    |         2 |</div><div class="line">|         2 | 电脑、办公  |         2 |</div><div class="line">|         3 | 大家电      |         2 |</div><div class="line">|         4 | 生活电器    |         2 |</div><div class="line">|         5 | 平板电视    |         1 |</div><div class="line">|         6 | 空调        |         1 |</div><div class="line">|         7 | 电风扇      |         1 |</div><div class="line">|         8 | 饮水机      |         1 |</div><div class="line">|         9 | 电脑整机    |         3 |</div><div class="line">|        10 | 电脑配件    |         2 |</div><div class="line">|        11 | 笔记本      |         1 |</div><div class="line">|        12 | 超级本      |         1 |</div><div class="line">|        13 | 游戏本      |         1 |</div><div class="line">|        14 | CPU         |         1 |</div><div class="line">|        15 | 主机        |         1 |</div><div class="line">+-----------+-------------+-----------+</div></pre></td></tr></table></figure>
<h1 id="多表删除"><a href="#多表删除" class="headerlink" title="多表删除"></a>多表删除</h1><p><strong>DELETE tbl_name1,tbl_name2.. FROM table_references WHERE condidtions</strong></p>
<p>同时删除多个表的记录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DELETE t1,t2 FROM t1,t2 WHERE t1.name = t2.name;</div></pre></td></tr></table></figure></p>
<p>使用多表删除删除表中的重复数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">// 先用group by删选出名称相同的数量大于2的分组，筛选出的分组既是需要删除的记录</div><div class="line">SELECT goods_id,goods_name FROM tdb_goods GROUP BY goods_name HAVING count(goods_name) &gt;= 2</div><div class="line">+----------+-----------------------+</div><div class="line">| goods_id | goods_name            |</div><div class="line">+----------+-----------------------+</div><div class="line">|       18 |  HMZ-T3W 头戴显示设备 |</div><div class="line">|       19 | 商务双肩背包          |</div><div class="line">+----------+-----------------------+</div><div class="line"></div><div class="line">// 将上表与原表内连接，</div><div class="line">mysql&gt; SELECT * FROM tdb_goods AS t1</div><div class="line">    -&gt; INNER JOIN (SELECT goods_id,goods_name FROM tdb_goods GROUP BY goods_name HAVING count(goods_name) &gt;= 2) AS t2</div><div class="line">    -&gt; ON t1.goods_name = t2.goods_name ;</div><div class="line">+----------+-----------------------+---------------+----------+-------------+---------+------------+----------+-----------------------+</div><div class="line">| goods_id | goods_name            | goods_cate_id | brand_id | goods_price | is_show | is_saleoff | goods_id | goods_name            |</div><div class="line">+----------+-----------------------+---------------+----------+-------------+---------+------------+----------+-----------------------+</div><div class="line">|       18 |  HMZ-T3W 头戴显示设备  |            37 |        6 |    6999.000 |       1 |          0 |       18 |  HMZ-T3W 头戴显示设备 |</div><div class="line">|       19 | 商务双肩背包           |            37 |        6 |      99.000 |       1 |          0 |       19 | 商务双肩背包          |</div><div class="line">|       21 |  HMZ-T3W 头戴显示设备  |            37 |        6 |    6999.000 |       1 |          0 |       18 |  HMZ-T3W 头戴显示设备 |</div><div class="line">|       22 | 商务双肩背包           |            37 |        6 |      99.000 |       1 |          0 |       19 | 商务双肩背包          |</div><div class="line">+----------+-----------------------+---------------+----------+-------------+---------+------------+----------+-----------------------+</div><div class="line"></div><div class="line">// 最后删除重复的记录</div><div class="line">DELETE t1 FROM tdb_goods AS t1 </div><div class="line">INNER JOIN (SELECT goods_id,goods_name FROM tdb_goods GROUP BY goods_name HAVING count(goods_name) &gt;= 2) AS t2 </div><div class="line">ON t1.goods_name = t2.goods_name </div><div class="line">WHERE t1.goods_id &gt; t2.goods_id;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL---操作数据表基本操作（增删改查）]]></title>
      <url>/2017/07/04/MySQL-%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="插入记录"><a href="#插入记录" class="headerlink" title="插入记录"></a>插入记录</h1><p><strong>INSERT [INTO] tbl_name [{col_name,…}] {VALUES|VALUE} (values…),(values…)</strong><br><a id="more"></a></p>
<ul>
<li>不加列名表示需要插入全部数据</li>
<li>对于自增主键，可以用NULL 和 DEFAULT 使之自己增加</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mysql&gt; INSERT INTO users VALUES(NULL,&apos;TOM&apos;,&apos;123&apos;,20,1);</div><div class="line">Query OK, 1 row affected (0.08 sec)</div><div class="line"></div><div class="line">mysql&gt; INSERT INTO users VALUES(DEFAULT,&apos;TOM&apos;,&apos;123&apos;,20,1);</div><div class="line">Query OK, 1 row affected (0.08 sec)</div></pre></td></tr></table></figure>
<ul>
<li>可以写数字运算、函数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mysql&gt; INSERT INTO users VALUES(DEFAULT,&apos;TOM&apos;,&apos;123&apos;,10*2-1,1);</div><div class="line">Query OK, 1 row affected (0.08 sec)</div><div class="line"></div><div class="line">// 使用自带的md5()计算md5</div><div class="line">mysql&gt; INSERT INTO users VALUES(DEFAULT,&apos;TOM&apos;,md5(&apos;123&apos;),10*2-1,1);</div></pre></td></tr></table></figure>
<ul>
<li>有默认值的列，使用<strong>DEFAULT</strong>表示使用默认值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; INSERT INTO users VALUES(DEFAULT,&apos;TOM&apos;,&apos;123&apos;,DEFAULT,1);</div><div class="line">Query OK, 1 row affected (0.08 sec)</div></pre></td></tr></table></figure>
<ul>
<li>插入多条记录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysql&gt; INSERT INTO users VALUES(DEFAULT,&apos;TOM&apos;,&apos;123&apos;,DEFAULT,1),(NULL,&apos;JERRY&apos;,&apos;456&apos;,DEFAULT,0);</div><div class="line">Query OK, 2 rows affected (0.08 sec)</div><div class="line">Records: 2  Duplicates: 0  Warnings: 0</div></pre></td></tr></table></figure>
<h2 id="INSERT-INTO-tbl-name-SET-col-name-value，…"><a href="#INSERT-INTO-tbl-name-SET-col-name-value，…" class="headerlink" title="INSERT [INTO] tbl_name SET col_name=value，…"></a>INSERT [INTO] tbl_name SET col_name=value，…</h2><p>此方法可以使用子查询<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INSERT INTO users SET username=&apos;TIM&apos; , password=&apos;789&apos; ,sex=1;</div></pre></td></tr></table></figure></p>
<h2 id="INSERT-INTO-tbl-name-col-name-…-SELECT-…"><a href="#INSERT-INTO-tbl-name-col-name-…-SELECT-…" class="headerlink" title="INSERT [INTO] tbl_name [(col_name,…)] SELECT …"></a>INSERT [INTO] tbl_name [(col_name,…)] SELECT …</h2><p>经查询结果插入到指定数据表中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">将查询到的数据的前5条插入到test表中。</div><div class="line">mysql&gt; INSERT INTO test (id,subject) SELECT studentNo, subjectNo FROM result LIMIT 5;</div></pre></td></tr></table></figure></p>
<h1 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h1><p><strong>UPDATE table_name SET col_name1=value1 [,col_name2=value2…] [WHERE condition]</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 	更改username为TOM的行</div><div class="line">mysql&gt; UPDATE userinfo SET username=&apos;AAA&apos; WHERE username=&apos;TOM&apos;;</div><div class="line"></div><div class="line">// 在更改信息时使用表达式</div><div class="line">mysql&gt; UPDATE userinfo SET id = id+10;</div><div class="line"></div><div class="line">// 使用 % 运算符判断奇偶</div><div class="line">mysql&gt; UPDATE userinfo SET email=&apos;ABC&apos; WHERE id%2=0;</div></pre></td></tr></table></figure>
<h1 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h1><p><strong>DELETE FROM tbl_name [WHERE condition]</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 删除一条记录</div><div class="line">mysql&gt; DELETE FROM username WHERE username=&apos;AAA&apos;;</div></pre></td></tr></table></figure></p>
<h1 id="查找记录"><a href="#查找记录" class="headerlink" title="查找记录"></a>查找记录</h1><p><strong>SELECT value1 [,value2…]</strong><br><strong>[</strong><br><strong>    from table_name </strong><br><strong>    [WHERE condition]</strong><br><strong>    [GROUP BY {col_name|position} [ASC|DESC],…]</strong><br><strong>    [HAVING where_condition]</strong><br><strong>    [ORDER BY {col_name | expr |position}[ASC|DESC],…]</strong><br><strong>    [LIMIT {[offset,]row_count |row_count OFFSET offset}]</strong><br><strong>]</strong></p>
<ul>
<li>每个表达式表示一列，至少有一个</li>
<li>多个列之间用逗号分隔</li>
<li>星号表示所有列，tbl_name.* 可以表示表的所有列</li>
<li><strong>查询表达式可以使用[AS] alias_name 为其服务赋予别名。AS 可以省略不写</strong></li>
<li>别名用于GROUP BY ORDER BY和HAVING子句</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">// 多个表达式之间用逗号隔开</div><div class="line">mysql&gt; SELECT id,username FROM userinfo;</div><div class="line"></div><div class="line">// table_name.colname 表示特定表中的列</div><div class="line">mysql&gt; SELECT userinfo.id ,userinfo.username,userinfo.email FROM userinfo ;</div><div class="line"></div><div class="line">// table_name.* 表示特定表中的所有行，单表查询时，table_name.* 与 * 效果相同</div><div class="line">mysql&gt; SELECT userinfo.* FROM userinfo ;</div><div class="line"></div><div class="line">// 用 AS 给变量取别名</div><div class="line">mysql&gt; SELECT id AS userid FROM userinfo ;</div><div class="line">+--------+</div><div class="line">| userid |</div><div class="line">+--------+</div><div class="line">|     12 |</div><div class="line">|     13 |</div><div class="line">+--------+</div><div class="line"></div><div class="line">// AS 可以省略</div><div class="line">mysql&gt; SELECT id userid FROM userinfo ;</div></pre></td></tr></table></figure>
<h1 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h1><p><strong>GROUP BY {col_name|position} [ASC|DESC],…</strong><br>用GROUP BY分组后，结果的每一列从1开始递增编号。分组时可以用数字代替列名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 按性别分组，student为各组的第一位的信息。</div><div class="line">mysql&gt; SELECT studentName, count(studentNo) AS number  FROM student GROUP BY sex;</div><div class="line">+-------------+--------+</div><div class="line">| studentName | number |</div><div class="line">+-------------+--------+</div><div class="line">| 张萍        |      7 |</div><div class="line">| newName     |      6 |</div><div class="line">+-------------+--------+</div></pre></td></tr></table></figure></p>
<h2 id="筛选分组-HAVING"><a href="#筛选分组-HAVING" class="headerlink" title="筛选分组(HAVING)"></a>筛选分组(HAVING)</h2><p><strong>HAVING condition</strong><br>在分组完成后，筛选满足条件的组。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// 按照gradeId分组</div><div class="line">mysql&gt; SELECT studentName,count(studentNo) AS number FROM student GROUP BY gradeId ;</div><div class="line">+-------------+--------+</div><div class="line">| studentName | number |</div><div class="line">+-------------+--------+</div><div class="line">| newName     |      9 |</div><div class="line">| 王宝宝      |      2 |</div><div class="line">| 陈志强      |      2 |</div><div class="line">+-------------+--------+</div><div class="line"></div><div class="line">// 从分组中筛选number大于3的分组</div><div class="line">mysql&gt; SELECT studentName,count(studentNo) AS number FROM student GROUP BY gradeId HAVING number&gt;=3;</div><div class="line">+-------------+--------+</div><div class="line">| studentName | number |</div><div class="line">+-------------+--------+</div><div class="line">| newName     |      9 |</div><div class="line">+-------------+--------+</div></pre></td></tr></table></figure>
<p><strong>用数字代替列名,GROUP BY 2 结果中的第二个参数 GROUP BY examDate</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// 2 表示第二个参数，即examDate</div><div class="line">mysql&gt; SELECT studentNo,examDate,count(studentNo) AS count FROM result GROUP BY examDate HAVING count&gt;2;</div><div class="line">+-----------+---------------------+-------+</div><div class="line">| studentNo | examDate            | count |</div><div class="line">+-----------+---------------------+-------+</div><div class="line">|     10000 | 2016-02-17 00:00:00 |     8 |</div><div class="line">+-----------+---------------------+-------+</div><div class="line"></div><div class="line">// 效果与下列相同</div><div class="line">mysql&gt; SELECT studentNo,examDate,count(studentNo) AS count FROM result GROUP BY 2 HAVING count&gt;2;</div><div class="line">+-----------+---------------------+-------+</div><div class="line">| studentNo | examDate            | count |</div><div class="line">+-----------+---------------------+-------+</div><div class="line">|     10000 | 2016-02-17 00:00:00 |     8 |</div><div class="line">+-----------+---------------------+-------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<h2 id="排序-ORDER"><a href="#排序-ORDER" class="headerlink" title="排序(ORDER)"></a>排序(ORDER)</h2><p><strong>ORDER BY col_name [ASC|DESC]</strong><br>将查询结构按照升序（ASC）或者降序（DESC）排列</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// 降序排列查询到的结果</div><div class="line">mysql&gt; SELECT studentNo ,studentName FROM student ORDER BY studentNo DESC;</div><div class="line">+-----------+-------------+</div><div class="line">| studentNo | studentName |</div><div class="line">+-----------+-------------+</div><div class="line">|     30012 | 李露露      |</div><div class="line">|     30011 | 陈志强      |</div><div class="line">|     20010 | 何小华      |</div><div class="line">|     20000 | 王宝宝      |</div><div class="line">|     10008 | 何睛睛      |</div><div class="line">|     10007 | 秦洋        |</div><div class="line">|     10006 | 肖梅        |</div><div class="line">|     10005 | 张秋丽      |</div><div class="line">|     10004 | 韩秋洁      |</div><div class="line">|     10003 | 张萍        |</div><div class="line">|     10002 | 李斯文      |</div><div class="line">|     10001 | 李文才      |</div><div class="line">|     10000 | newName     |</div><div class="line">+-----------+-------------+</div></pre></td></tr></table></figure>
<h2 id="限制查询返回的数量-LIMIT"><a href="#限制查询返回的数量-LIMIT" class="headerlink" title="限制查询返回的数量(LIMIT)"></a>限制查询返回的数量(LIMIT)</h2><p><strong>LIMIT  length (start,length)</strong></p>
<ul>
<li>返回的数据，序号从0开始。</li>
<li>length 表示返回前length条记录，（start，length）表示返回从序号为start开始的length条数据</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// 选择前三条数据</div><div class="line">mysql&gt; SELECT studentNo, studentName FROM student LIMIT 3;</div><div class="line">+-----------+-------------+</div><div class="line">| studentNo | studentName |</div><div class="line">+-----------+-------------+</div><div class="line">|     10000 | newName     |</div><div class="line">|     10001 | 李文才      |</div><div class="line">|     10002 | 李斯文      |</div><div class="line">+-----------+-------------+</div><div class="line"></div><div class="line">// 选择从序号为2开始的3条数据</div><div class="line">mysql&gt; SELECT studentNo, studentName FROM student LIMIT 2,3;</div><div class="line">+-----------+-------------+</div><div class="line">| studentNo | studentName |</div><div class="line">+-----------+-------------+</div><div class="line">|     10002 | 李斯文      |</div><div class="line">|     10003 | 张萍        |</div><div class="line">|     10004 | 韩秋洁      |</div><div class="line">+-----------+-------------+</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL---外键、添加删除约束、ON DELETE参照、添加|删除|修改数据表列定义]]></title>
      <url>/2017/07/03/MySQL-%E5%A4%96%E9%94%AE%E3%80%81%E6%B7%BB%E5%8A%A0%E5%88%A0%E9%99%A4%E7%BA%A6%E6%9D%9F%E3%80%81ON-DELETE%E5%8F%82%E7%85%A7%E3%80%81%E6%B7%BB%E5%8A%A0-%E5%88%A0%E9%99%A4-%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%88%97%E5%AE%9A%E4%B9%89/</url>
      <content type="html"><![CDATA[<h1 id="外键-FOREIGN-KEY"><a href="#外键-FOREIGN-KEY" class="headerlink" title="外键(FOREIGN KEY)"></a>外键(FOREIGN KEY)</h1><p>外键约束需要满足一些基本要求：<a id="more"></a></p>
<ul>
<li>父表和子表必须是相同的引擎，而且禁止使用临时表</li>
<li>数据表的存储引擎只能是InnoDB</li>
<li>外键列和参照列必须具有相似的数据烈性。其中数字的长度或是否有符号为必须相同。而字符串的长度可以不同。</li>
<li>外键列和参照列必须创建索引。如果外键列不存在索引的话，MaSQL将自动创建索引。</li>
</ul>
<p>显示索引，test表由于同时有主键和外键，所以有两个索引<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SHOW INDEX FROM user \G;</div><div class="line">*************************** 1. row ***************************</div><div class="line">        Table: user</div><div class="line">   Non_unique: 0</div><div class="line">     Key_name: PRIMARY</div><div class="line"> Seq_in_index: 1</div><div class="line">  Column_name: id</div><div class="line">    Collation: A</div><div class="line">  Cardinality: 0</div><div class="line">     Sub_part: NULL</div><div class="line">       Packed: NULL</div><div class="line">         Null:</div><div class="line">   Index_type: BTREE</div><div class="line">      Comment:</div><div class="line">Index_comment:</div><div class="line">*************************** 2. row ***************************</div><div class="line">        Table: user</div><div class="line">   Non_unique: 1</div><div class="line">     Key_name: pid</div><div class="line"> Seq_in_index: 1</div><div class="line">  Column_name: pid</div><div class="line">    Collation: A</div><div class="line">  Cardinality: 0</div><div class="line">     Sub_part: NULL</div><div class="line">       Packed: NULL</div><div class="line">         Null: YES</div><div class="line">   Index_type: BTREE</div><div class="line">      Comment:</div><div class="line">Index_comment:</div><div class="line">2 rows in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<h1 id="ON-DELETE-参照操作"><a href="#ON-DELETE-参照操作" class="headerlink" title="ON DELETE 参照操作"></a>ON DELETE 参照操作</h1><ul>
<li>CASCADE 从父表删除或更新，自动删除或更新字表中匹配的行</li>
<li>SET NULL 从父表删除或更新行，并设置字表中的外键列为NULL。如果使用该选项必须保障字表列没有指定NOT NULL </li>
<li>RESTRICT 拒绝对父表的删除或更新曹祖</li>
<li>NO ACTION 标准的SQL关键字，在MySQL中与RESTRICT相同</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mysql&gt; CREATE TABLE user2 (</div><div class="line">    -&gt; id SMALLINT  UNSIGNED PRIMARY KEY ,</div><div class="line">    -&gt; name VARCHAR(20) NOT NULL ,</div><div class="line">    -&gt; pid SMALLINT UNSIGNED,</div><div class="line">    -&gt; FOREIGN KEY (pid) REFERENCES provinces (id) ON DELETE CASCADE</div><div class="line">    -&gt; );</div></pre></td></tr></table></figure>
<h1 id="表级约束与列级约束"><a href="#表级约束与列级约束" class="headerlink" title="表级约束与列级约束"></a>表级约束与列级约束</h1><ul>
<li>对一个数据列建立的约束，成为列级约束</li>
<li>对多个数据列建立的约束，成为标记约束。</li>
<li>劣迹约束既可以在列定义时声名，也可以在列定义后声名</li>
<li>表级约束只能在列定义后声名</li>
</ul>
<p>常见的DEFAULT 和 NOT NULL是列级约束</p>
<h1 id="修改表约束"><a href="#修改表约束" class="headerlink" title="修改表约束"></a>修改表约束</h1><h2 id="添加主键约束"><a href="#添加主键约束" class="headerlink" title="添加主键约束"></a>添加主键约束</h2><p><strong>ALTER TABLE tbl_name ADD [CONSTRAINT [constraint_name]] PRIMARY KEY [index_type] (index_col_name,…)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE test ADD CONSTRAINT pk_test PRIMARY KEY (id);</div></pre></td></tr></table></figure></p>
<h2 id="添加唯一约束"><a href="#添加唯一约束" class="headerlink" title="添加唯一约束"></a>添加唯一约束</h2><p><strong>ALTER TABLE tbl_name ADD [CONSTRAINT [constraint_col_name]] UNIQUE [INDEX|KEY] [index_name][index_type](index_col_name,…)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ALTER TABLE test ADD CONSTRAINT unique_test UNIQUE KEY(name) ;</div></pre></td></tr></table></figure></p>
<h2 id="添加外键约束"><a href="#添加外键约束" class="headerlink" title="添加外键约束"></a>添加外键约束</h2><p><strong>ALTER TABLE tbl_name ADD [CONSTRAINT [constraint_name]] FOREIGN KEY [index_name](index_col_name,…) REFERENCES table_name(col_name)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; ALTER TABLE test0 ADD CONSTRAINT fk_test0 FOREIGN KEY (data) REFERENCES test(id);</div></pre></td></tr></table></figure></p>
<h2 id="添加、删除默认约束"><a href="#添加、删除默认约束" class="headerlink" title="添加、删除默认约束"></a>添加、删除默认约束</h2><p><strong>ALTER TABLE tbl_name ALTER [COLUMN] col_name {SET DEFAULT value|DROP DEFAULT}</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 添加默认约束</div><div class="line">mysql&gt; ALTER TABLE test ALTER COLUMN name SET DEFAULT &apos;TOM&apos;;</div><div class="line">// 删除默认约束</div><div class="line">mysql&gt; ALTER TABLE test ALTER COLUMN name DROP DEFAULT;</div></pre></td></tr></table></figure></p>
<h2 id="删除主键约束"><a href="#删除主键约束" class="headerlink" title="删除主键约束"></a>删除主键约束</h2><p><strong>ALTER TABLE tbl_name DROP PRIMARY KEY </strong><br>删除主键时，如果主键有AUTO_INCREMENT约束，就不可以删除该主键约束，必须要先删除AUTO_INCREMENT，才可以删除主键约束。因为数据库将具有AUTO_INCREMENT约束的列看成主键</p>
<h2 id="删除唯一约束"><a href="#删除唯一约束" class="headerlink" title="删除唯一约束"></a>删除唯一约束</h2><p><strong>ALTER TABLE tbl_name DROP {INDEX|KEY} index_name</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 先查看唯一约束的名字</div><div class="line">mysql&gt; SHOW CREATE TABLE test ;</div><div class="line">| test  | CREATE TABLE `test` (</div><div class="line">  `id` int(50) NOT NULL,</div><div class="line">  `name` varchar(10),</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  UNIQUE KEY `unique_test` (`name`)</div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=gbk |</div><div class="line"></div><div class="line">// 根据唯一约束的名字删除对应的约束</div><div class="line">mysql&gt; ALTER TABLE test DROP INDEX unique_test;</div></pre></td></tr></table></figure></p>
<h2 id="删除外键约束"><a href="#删除外键约束" class="headerlink" title="删除外键约束"></a>删除外键约束</h2><p><strong>ALTER TABLE tbl_name DROP FOREIGN KEY fk_name</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; ALTER TABLE test0 DROP FOREIGN KEY fk_test0;</div></pre></td></tr></table></figure></p>
<h2 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h2><p><strong>SHOW INDEX FROM tbl_name </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SHOW INDEX FROM test0 ;</div><div class="line">+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</div><div class="line">| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |</div><div class="line">+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</div><div class="line">| test0 |          0 | PRIMARY  |            1 | id          | A         |           0 |     NULL | NULL   |      | BTREE      |         |               |</div><div class="line">| test0 |          1 | fk_test0 |            1 | data        | A         |           0 |     NULL | NULL   | YES  | BTREE      |         |               |</div><div class="line">+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</div><div class="line">2 rows in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<p><strong>\G 将查询结果按列输出</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mysql&gt; CREATE TABLE provinces(</div><div class="line">    -&gt; id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</div><div class="line">    -&gt; pname VARCHAR(20) NOT NULL</div><div class="line">    -&gt; );</div><div class="line"></div><div class="line">mysql&gt; CREATE TABLE user (</div><div class="line">    -&gt; id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</div><div class="line">    -&gt; username VARCHAR(20) NOT NULL ,</div><div class="line">    -&gt; pid SMALLINT UNSIGNED,</div><div class="line">    -&gt; FOREIGN KEY (pid) REFERENCES provinces (id)</div><div class="line">    -&gt; );</div></pre></td></tr></table></figure></p>
<h2 id="查看表信息"><a href="#查看表信息" class="headerlink" title="查看表信息"></a>查看表信息</h2><p><strong>SHOW CREATE TABLE tbl_name</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show create table test0 ;</div><div class="line">| test0 | CREATE TABLE `test0` (</div><div class="line">  `id` int(50) NOT NULL,</div><div class="line">  `data` int(50) DEFAULT NULL,</div><div class="line">  PRIMARY KEY (`id`),</div><div class="line">  KEY `fk_test0` (`data`)</div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=gbk |</div></pre></td></tr></table></figure></p>
<h1 id="修改数据表"><a href="#修改数据表" class="headerlink" title="修改数据表"></a>修改数据表</h1><h2 id="添加、删除列"><a href="#添加、删除列" class="headerlink" title="添加、删除列"></a>添加、删除列</h2><h3 id="添加列"><a href="#添加列" class="headerlink" title="添加列"></a>添加列</h3><p><strong>ALTER TABLE tbl_name ADD [COLUMN] col_name column_definition [(FIRST) | (AFTER col_name)]</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 插入一条记录</div><div class="line">ALTER TABLE tb4 ADD COLUMN age INT(10) UNSIGNED DEFAULT 10 ;</div><div class="line"></div><div class="line">// 在最前面插入一条记录</div><div class="line">ALTER TABLE tb4 ADD COLUMN truename VARCHAR(20) NOT NULL FIRST;</div><div class="line"></div><div class="line">// 在sex列后面插入一条记录</div><div class="line">mysql&gt; ALTER TABLE tb4 ADD COLUMN password VARCHAR(20) AFTER sex ;</div></pre></td></tr></table></figure>
<h3 id="添加多列"><a href="#添加多列" class="headerlink" title="添加多列"></a>添加多列</h3><p><strong>ALTER TABLE tbl_name ADD [COLUMN] col_name column_definition (,ADD [column] col_name2 column_definetion…)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 添加school、和grade列</div><div class="line">mysql&gt; ALTER TABLE test ADD COLUMN school VARCHAR(20),ADD COLUMN grade FLOAT;</div></pre></td></tr></table></figure></p>
<h3 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h3><p><strong>ALTER TABLE tbl_name DROP [COLUMN] col_name</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 删除grade列</div><div class="line">mysql&gt; ALTER TABLE test DROP COLUMN grade ;</div></pre></td></tr></table></figure></p>
<h3 id="同时使用多个操作"><a href="#同时使用多个操作" class="headerlink" title="同时使用多个操作"></a>同时使用多个操作</h3><p><strong>ALTER TABLE tbl_name DROP(|ADD) [COLUMN] col_name,DROP(|ADD) [COLUMN] col_name2,…</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 删除grade列 ，添加school列</div><div class="line">mysql&gt; ALTER TABLE test ADD COLUMN grade FLOAT ,DROP COLUMN school ;</div></pre></td></tr></table></figure></p>
<h2 id="修改数据表列定义"><a href="#修改数据表列定义" class="headerlink" title="修改数据表列定义"></a>修改数据表列定义</h2><ul>
<li><strong>ALTER TABLE tbl_name MODIFY [COLUMN] col_name column_definition [FIRST|ALTER col_name] </strong><br>在不改变列名的情况下修改列定义</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mysql&gt; ALTER TABLE test MODIFY name VARCHAR(20) DEFAULT &apos;JERRY&apos;;</div><div class="line">mysql&gt; DESCRIBE test;</div><div class="line">+-------+-------------+------+-----+---------+----------------+</div><div class="line">| Field | Type        | Null | Key | Default | Extra          |</div><div class="line">+-------+-------------+------+-----+---------+----------------+</div><div class="line">| id    | int(10)     | NO   | PRI | NULL    | auto_increment |</div><div class="line">| name  | varchar(20) | YES  |     | JERRY   |                |</div><div class="line">| sex   | varchar(5)  | YES  |     | NULL    |                |</div><div class="line">+-------+-------------+------+-----+---------+----------------+</div></pre></td></tr></table></figure>
<p>新的参数中如果没有包含原来的约束，那么原来的约束会被删除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mysql&gt; ALTER TABLE test MODIFY name VARCHAR(30) ;</div><div class="line">mysql&gt; DESCRIBE test;</div><div class="line">+-------+-------------+------+-----+---------+----------------+</div><div class="line">| Field | Type        | Null | Key | Default | Extra          |</div><div class="line">+-------+-------------+------+-----+---------+----------------+</div><div class="line">| id    | int(10)     | NO   | PRI | NULL    | auto_increment |</div><div class="line">| name  | varchar(30) | YES  |     | NULL    |                |</div><div class="line">| sex   | varchar(5)  | YES  |     | NULL    |                |</div><div class="line">+-------+-------------+------+-----+---------+----------------+</div></pre></td></tr></table></figure></p>
<ul>
<li><strong>ALTER TABLE tbl_name CHANGE [COLUMN] old_col_name new_col_name column_definition [FIRST|AFTER col_name] </strong><br>可以修改列名，和列定义</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mysql&gt; ALTER TABLE test CHANGE name new_name VARCHAR(20) DEFAULT &apos;TOM&apos; FIRST ;</div><div class="line">mysql&gt; DESCRIBE test;</div><div class="line">+----------+-------------+------+-----+---------+-------+</div><div class="line">| Field    | Type        | Null | Key | Default | Extra |</div><div class="line">+----------+-------------+------+-----+---------+-------+</div><div class="line">| new_name | varchar(20) | YES  |     | TOM     |       |</div><div class="line">| id       | int(20)     | NO   | PRI | NULL    |       |</div><div class="line">| sex      | varchar(5)  | YES  |     | NULL    |       |</div><div class="line">+----------+-------------+------+-----+---------+-------+</div></pre></td></tr></table></figure>
<h2 id="修改数据表名称"><a href="#修改数据表名称" class="headerlink" title="修改数据表名称"></a>修改数据表名称</h2><ul>
<li><strong>ALTER TABLE tbl_name RENAME [TO|AS] new_tbl_name</strong> 修改单个表名称</li>
<li><strong>RENAME TABLE tbl_name TO new_tbl_name [,tbl_name2 TO new_tbl_name2…]</strong> 修改多个表名称</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 修改单个表名称</div><div class="line">mysql&gt; ALTER TABLE test RENAME TO  db_test ;</div><div class="line"></div><div class="line">// 修改多个表名称</div><div class="line">mysql&gt; RENAME TABLE db_test TO test ,tb4 TO tb5 ;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL入门---数据库登陆与退出、数据库基本操作、开启数据库服务]]></title>
      <url>/2017/07/03/MySQL%E5%85%A5%E9%97%A8-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%99%BB%E9%99%86%E4%B8%8E%E9%80%80%E5%87%BA%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E3%80%81%E5%BC%80%E5%90%AF%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<h1 id="开启和关闭服务"><a href="#开启和关闭服务" class="headerlink" title="开启和关闭服务"></a>开启和关闭服务</h1><ul>
<li>net start mysql 启动服务</li>
<li>net stop mysql 停止服务<a id="more"></a>
执行此命令前，需要安装服务：<blockquote>
<p>mysqld -install </p>
</blockquote>
</li>
</ul>
<p>服务的名称往往不是mysql，而是mysql加上版本号，例如mysql57</p>
<h1 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h1><p>登陆使用mysql命令，该命令有以下参数：</p>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-D</td>
<td style="text-align:center">打开指定数据库</td>
</tr>
<tr>
<td style="text-align:center">–delimiter=name</td>
<td style="text-align:center">指定分隔符</td>
</tr>
<tr>
<td style="text-align:center">-h(–host=name)</td>
<td style="text-align:center">服务器名称(如果是默认的localhost，可以不写该选项)</td>
</tr>
<tr>
<td style="text-align:center">-p(小写)(–password[=password])</td>
<td style="text-align:center">输入密码</td>
</tr>
<tr>
<td style="text-align:center">-P(大写)(–port)</td>
<td style="text-align:center">端口号（如果是默认3306端口可以不写该选项）</td>
</tr>
<tr>
<td style="text-align:center">-u(–user=name)</td>
<td style="text-align:center">用户名</td>
</tr>
<tr>
<td style="text-align:center">-V(大写)（–version）</td>
<td style="text-align:center">获得版本</td>
</tr>
</tbody>
</table>
<h1 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h1><p>三个命令作用相同：</p>
<ul>
<li>exit </li>
<li>quit </li>
<li>\q </li>
</ul>
<h1 id="修改MySQL提示符"><a href="#修改MySQL提示符" class="headerlink" title="修改MySQL提示符"></a>修改MySQL提示符</h1><h2 id="登陆时指定"><a href="#登陆时指定" class="headerlink" title="登陆时指定"></a>登陆时指定</h2><p>可以在登陆时用–prompt指定提示符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">C:\Users\twilight&gt;mysql -uroot -p123456 --prompt \u@\h-\d</div></pre></td></tr></table></figure></p>
<h2 id="登陆后指定"><a href="#登陆后指定" class="headerlink" title="登陆后指定"></a>登陆后指定</h2><p>用<strong> prompt </strong>命令<br>常用的参数：</p>
<ul>
<li>\D 完整的日期</li>
<li>\d 当前数据库</li>
<li>\h 服务器名称</li>
<li>\u 当前用户</li>
</ul>
<p>因为当前没有选择数据库，所以\d 显示none<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mysql&gt;prompt \u@\h \d</div><div class="line">root@localhost (none)</div><div class="line">root@localhost (none)use student</div><div class="line">Database changed</div><div class="line">root@localhost student</div><div class="line">root@localhost student prompt \u@\h-\d \D：</div><div class="line">PROMPT set to &apos;prompt \u@\h-\d \D：&apos;</div><div class="line">prompt root@localhost-student Fri Jun 30 10:42:56 2017：</div></pre></td></tr></table></figure></p>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><ul>
<li>select version();显示当前服务器版本号</li>
<li>select now();  显示当前日期时间</li>
<li>select user(); 显示当前用户</li>
</ul>
<h1 id="语句规范"><a href="#语句规范" class="headerlink" title="语句规范"></a>语句规范</h1><ul>
<li>关键字与函数名称全部大写</li>
<li>数据库名、表名称、字段名称全部小写</li>
<li>sql语句必须以分号结尾</li>
</ul>
<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p><strong>CREATE {DATABASE | SHEMAS} [IF NOT EXISTS] db_name [DEFAULT] CHARACTER SET [=] charset_set_name</strong></p>
<p>直接创建<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; CREATE DATABASE test;</div><div class="line">Query OK, 1 row affected (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>创建时指定编码方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; CREATE DATABASE test2 CHARACTER SET GBK;</div><div class="line">Query OK, 1 row affected (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>使用IF NOT EXISTS判断数据库是否已存在：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; CREATE DATABASE IF NOT EXISTS test;</div><div class="line">Query OK, 1 row affected, 1 warning (0.00 sec)</div></pre></td></tr></table></figure></p>
<h2 id="备份和还原数据库"><a href="#备份和还原数据库" class="headerlink" title="备份和还原数据库"></a>备份和还原数据库</h2><h3 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h3><ul>
<li><code>mysqldump -u 用户名 -p 数据库名 &gt; 导出的文件名</code> 在CMD下执行以下命令，会将数据库导出到指定的文件中</li>
</ul>
<h3 id="还原数据库"><a href="#还原数据库" class="headerlink" title="还原数据库"></a>还原数据库</h3><ul>
<li>方法一：</li>
</ul>
<ol>
<li>先进入数据库：<code>mysql -uroot -p</code></li>
<li>再创建空数据库：<code>create database databasename</code></li>
<li>用source命令导入数据：<code>source 路径+文件名</code></li>
</ol>
<ul>
<li>方法二：</li>
</ul>
<ol>
<li>先创建空数据库。</li>
<li>在cmd窗口中直接导入数据： <code>mysql -uroot -p 数据库名 &lt; D:/桌面/market.sql</code></li>
</ol>
<h2 id="显示数据库"><a href="#显示数据库" class="headerlink" title="显示数据库"></a>显示数据库</h2><p><strong>SHOW {DATABASES | SCHEMAS} [LIKE ‘pattern’ | WHERE expr]</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SHOW DATABASES;</div><div class="line">+--------------------+</div><div class="line">| Database           |</div><div class="line">+--------------------+</div><div class="line">| information_schema |</div><div class="line">| mysql              |</div><div class="line">| performance_schema |</div><div class="line">| sakila             |</div><div class="line">| student            |</div><div class="line">| sys                |</div><div class="line">| test               |</div><div class="line">| test2              |</div><div class="line">| world              |</div><div class="line">+--------------------+</div><div class="line">9 rows in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<h3 id="显示WARNINGS"><a href="#显示WARNINGS" class="headerlink" title="显示WARNINGS"></a>显示WARNINGS</h3><p><strong>SHOW WARNINGS</strong><br>产生WARNINGS时查看警告的具体信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SHOW WARNINGS;</div><div class="line">+-------+------+-----------------------------------------------+</div><div class="line">| Level | Code | Message                                       |</div><div class="line">+-------+------+-----------------------------------------------+</div><div class="line">| Note  | 1007 | Can&apos;t create database &apos;test&apos;; database exists |</div><div class="line">+-------+------+-----------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<h2 id="显示创建数据库的指令（查看数据库信息）"><a href="#显示创建数据库的指令（查看数据库信息）" class="headerlink" title="显示创建数据库的指令（查看数据库信息）"></a>显示创建数据库的指令（查看数据库信息）</h2><p><strong>SHOW CREATE DATABASE NAEM</strong></p>
<p>用该命令可以查看数据库的信息，比如，该数据库的编码方式是gbk<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SHOW CREATE DATABASE test2;</div><div class="line">+----------+---------------------------------------------------------------+</div><div class="line">| Database | Create Database                                               |</div><div class="line">+----------+---------------------------------------------------------------+</div><div class="line">| test2    | CREATE DATABASE `test2` /*!40100 DEFAULT CHARACTER SET gbk */ |</div><div class="line">+----------+---------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<h2 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h2><p><strong>ALTER {DATABASE | SCHEMA}[db_name] [DEFAULT] CHARACTER SET [=] charset_name </strong></p>
<p>使用alter修改数据库的默认编码方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysql&gt; ALTER DATABASE test2 CHARACTER SET UTF8;</div><div class="line">Query OK, 1 row affected (0.00 sec)</div></pre></td></tr></table></figure></p>
<p>查看修改后的编码,已经变成了utf-8：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql&gt; SHOW CREATE DATABASE test2;</div><div class="line">+----------+----------------------------------------------------------------+</div><div class="line">| Database | Create Database                                                |</div><div class="line">+----------+----------------------------------------------------------------+</div><div class="line">| test2    | CREATE DATABASE `test2` /*!40100 DEFAULT CHARACTER SET utf8 */ |</div><div class="line">+----------+----------------------------------------------------------------+</div><div class="line">1 row in set (0.00 sec)</div></pre></td></tr></table></figure></p>
<h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><p><strong>DROP {DATABASE | SCHEMA} [IF EXISTS] db_name</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">mysql&gt; DROP DATABASE test2;</div><div class="line">Query OK, 0 rows affected (0.01 sec)</div><div class="line"></div><div class="line">mysql&gt; SHOW DATABASES;</div><div class="line">+--------------------+</div><div class="line">| Database           |</div><div class="line">+--------------------+</div><div class="line">| information_schema |</div><div class="line">| mysql              |</div><div class="line">| performance_schema |</div><div class="line">| sakila             |</div><div class="line">| student            |</div><div class="line">| sys                |</div><div class="line">| test               |</div><div class="line">| world              |</div><div class="line">+--------------------+</div><div class="line">8 rows in set (0.00 sec)</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java反射---方法的反射、深入了解泛型]]></title>
      <url>/2017/06/28/Java%E5%8F%8D%E5%B0%84-%E6%96%B9%E6%B3%95%E7%9A%84%E5%8F%8D%E5%B0%84%E3%80%81%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3%E6%B3%9B%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h1 id="方法的反射"><a href="#方法的反射" class="headerlink" title="方法的反射"></a>方法的反射</h1><p>invoke(对象，参数列表)<br>1、获得类类型<br><code>Class data = a.getClass();</code><br><a id="more"></a><br>2、获得方法</p>
<ul>
<li>getMethod(“方法名”,可变参数(Class[]))  获得自身和继承的public方法</li>
<li>getDeclaredMethod(“方法名”,可变参数(Class[])) 获得自身的所有方法，不包括继承的方法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Method print = data.getMethod(&quot;print&quot;, new Class[]&#123;int.class,int.class&#125;);</div><div class="line">Method print2 = data.getDeclaredMethod(&quot;print&quot;, new Class[]&#123;String.class,String.class&#125;);</div></pre></td></tr></table></figure>
<p>3、执行方法<br>invoke(对象obj，参数列表)  使用对象obj调用方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">print.invoke(a, 10, 20);</div><div class="line">print2.invoke(a, new String[]&#123;&quot;hello&quot;,&quot;world&quot;&#125;);</div></pre></td></tr></table></figure></p>
<p>如果没有参数，可以不写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Method print3 = data.getMethod(&quot;print&quot;);</div><div class="line">print3.invoke(a);</div></pre></td></tr></table></figure></p>
<h1 id="通过反射了解泛型的本质"><a href="#通过反射了解泛型的本质" class="headerlink" title="通过反射了解泛型的本质"></a>通过反射了解泛型的本质</h1><p>所谓泛型，是在编译阶段判断变量类型是否满足泛型要求。例如ArrayList&lt;Stirng&gt; 在编译时如果add一个int类型的变量肯定会出错，但是，在编译完成后，不同类型的泛型实际上是一样的。如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ArrayList list1 = new ArrayList();</div><div class="line">ArrayList&lt;String&gt; list2 = new ArrayList&lt;String&gt;();</div><div class="line"></div><div class="line">Class c1 = list1.getClass();</div><div class="line">Class c2 = list2.getClass();</div><div class="line"></div><div class="line">System.out.println(c1 == c2); // true</div></pre></td></tr></table></figure></p>
<p>说明不同类型的泛型在编译后是一样的，泛型只是帮助判断变量类型的一种机制。<br>String类型的泛型，只能加入String类型的变量，所以集合中保存的变量原本都是String类型。而Object类型的泛型可以加入任意类型的变量，所有变量都会被转换为Object类型后保存，所以在去变量时，需要手动的将Object类型强制转换为指定的类型。</p>
<p>反射机制是在编译之后完成的。所以可以利用反绕过泛型的编译:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Method add = c2.getMethod(&quot;add&quot;, Object.class);</div><div class="line">add.invoke(list2, 100);</div><div class="line"></div><div class="line">System.out.println(list2.size());		// 1</div><div class="line">System.out.println(list2);				// [100]</div></pre></td></tr></table></figure></p>
<p>上面的例子在String类型的泛型集合中加入了整形变量，说明泛型的类型检查是在运行之前进行的。编译过后不会有泛型的类型检查，所以不会报错。另外我在编写的过程中还发现一个细节：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Method add = c2.getMethod(&quot;add&quot;, String.class);</div></pre></td></tr></table></figure></p>
<p>上面这行代码会报错，c2是ArrayList&lt;String&gt;的类类型。一个String类型的泛型集合却无法获得String类型的add方法。原因是在编译过后所有类型会被擦除。在ArrayList的源码中用一个Object类型的数组来储存数据。编译过变量会被保存在Object数组中，所以add方法中的类型也会被转化为Object<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">transient Object[] elementData; // non-private to simplify nested class access</div></pre></td></tr></table></figure></p>
<p>个人理解，欢迎指正</p>
<p>参考资料：<a href="http://www.imooc.com/video/3738" title="Cedar" target="_blank" rel="external">反射</a></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java反射---Class对象，获得类的方法、成员变量和构造函数信息]]></title>
      <url>/2017/06/27/Java%E5%8F%8D%E5%B0%84-Class%E5%AF%B9%E8%B1%A1%EF%BC%8C%E8%8E%B7%E5%BE%97%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95%E3%80%81%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%BF%A1%E6%81%AF/</url>
      <content type="html"><![CDATA[<h1 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h1><p>任何一个类都是Class类的实例，而我们常见的对象，是用普通的类实例化出来的，也就是Class类的实例的实例。一个普通的类Foo的Class实例有三种表示方式：<a id="more"></a></p>
<ul>
<li>1、知道类名获取Foo的Class实例<br><code>Class c1 = Foo.class;</code></li>
<li>2、通过Foo对象获得Foo的Class实例<br><code>Class c2 = foo.getClass();</code></li>
<li>3、通过forName()获得实例<br><code>Class c3 = Class.forName(&quot;test.reflect.Foo&quot;);</code></li>
</ul>
<p>这三者是相等的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">System.out.println(c1 == c2&amp;&amp;c2 == c3);</div><div class="line">// True</div></pre></td></tr></table></figure></p>
<p>可以用Class的实例创建Foo的实例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Foo foo2 = (Foo)c1.newInstance();</div></pre></td></tr></table></figure></p>
<h1 id="动态加载类"><a href="#动态加载类" class="headerlink" title="动态加载类"></a>动态加载类</h1><p>1、静态加载类。编译时加载类，在编译时刻就需要加载所有的可能的使用到的类。所有的类都会加载，不管有没有被使用<br>2、动态加载类。运行时加载类 </p>
<p>使用Class.forName()动态加载类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public static void main(String [] args)&#123;</div><div class="line">	try&#123;</div><div class="line">		Class c = Class.forName(args[0]);</div><div class="line">		// OfficeUtil 是接口</div><div class="line">		OfficeUtil obj = (OfficeUtil)c.newInstance();</div><div class="line">		obj.print();</div><div class="line">	&#125;</div><div class="line">	catch(Exception e)&#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用了OfficeUtil接口的Word类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class Word implements OfficeUtil&#123;</div><div class="line">	public void print()&#123;</div><div class="line">		System.out.println(&quot;Word&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用了OfficeUtil接口的Excel类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class Excel implements OfficeUtil&#123;</div><div class="line">	public void print()&#123;</div><div class="line">		System.out.println(&quot;Excel&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>OfficeUtil接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">interface OfficeUtil&#123;</div><div class="line">	public void print();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="获得类类型的信息"><a href="#获得类类型的信息" class="headerlink" title="获得类类型的信息"></a>获得类类型的信息</h1><p>通过Class类的对象获得某个类的信息</p>
<ul>
<li>getName()  返回类类型的名称</li>
<li>getSimpleName() 返回类类型的名称的简写</li>
</ul>
<p>获得类名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Class c1 = int.class;</div><div class="line">Class c2 = String.class;</div><div class="line">Class c3 = void.class;</div><div class="line">Class c4 = double.class;</div><div class="line">Class c5 = Double.class;</div><div class="line">System.out.println(c1.getName());</div><div class="line">System.out.println(c2.getName());</div><div class="line">System.out.println(c3.getName());</div><div class="line">System.out.println(c4.getName());</div><div class="line">System.out.println(c5.getName());</div></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">int</div><div class="line">java.lang.String</div><div class="line">void</div><div class="line">double</div><div class="line">java.lang.Double</div></pre></td></tr></table></figure></p>
<p>getSimpleName()和getName():<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">java.lang.String    // getName()</div><div class="line">String				// getSimpleName()</div></pre></td></tr></table></figure></p>
<h1 id="Method对象"><a href="#Method对象" class="headerlink" title="Method对象"></a>Method对象</h1><p>方法也是对象，一个成员方法就是一个Method对象实例。method实例有以下常用方法：</p>
<ul>
<li>getReturnType() 获得返回值，返回的是 Class&lt;?&gt;</li>
<li>getParameterTypes 获得参数列表类型的类类型集合 返回的是Class&lt;?&gt;[]</li>
<li>getName 获得方法名，返回 String</li>
<li>getmethods() 返回继承的方法和自己定义的public方法（Class对象的方法）</li>
<li>getDeclaredMethods(); 返回所有方法，但是不包括继承的方法（Class对象的方法）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public static void printClassMethodMessage(Object obj)&#123;</div><div class="line">	// 获得对象的类类型</div><div class="line">	Class data = obj.getClass();</div><div class="line">	// 获得类类型的名称</div><div class="line">	System.out.println(&quot;类名（getName）:&quot;+data.getName());</div><div class="line">	</div><div class="line">	/**</div><div class="line">	 * Method类，一个成员方法就是一个Method对象实例。方法也是对象</div><div class="line">	 * getDeclaredMethods(); 返回所有方法，但是不包括继承的方法</div><div class="line">	 * getmethods() 返回继承的方法和自己定义的public方法</div><div class="line">	 */</div><div class="line">	Method [] methods = data.getMethods();</div><div class="line">	for(Method temp : methods)&#123;</div><div class="line">		// 获得返回值类型</div><div class="line">		Class returnType = temp.getReturnType();</div><div class="line">		System.out.print(returnType.getSimpleName()+&quot; &quot;);</div><div class="line">		// 获得方法名</div><div class="line">		System.out.print(temp.getName()+&quot;(&quot;);</div><div class="line">		// 获得参数数组</div><div class="line">		Class [] params = temp.getParameterTypes();</div><div class="line">		for(Class param : params)&#123;</div><div class="line">			System.out.print(param.getSimpleName()+&quot;,&quot;);</div><div class="line">		&#125;</div><div class="line">		System.out.println(&quot;)&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public static void main(String[] args) &#123;</div><div class="line">	ClassUtil.printClassMethodMessage(&quot;bbb&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">类名（getName）:java.lang.String</div><div class="line">boolean equals(Object,)</div><div class="line">String toString()</div><div class="line">int hashCode()</div><div class="line">int compareTo(String,)</div><div class="line">int compareTo(Object,)</div><div class="line">int indexOf(String,int,)</div><div class="line">int indexOf(String,)</div><div class="line">int indexOf(int,int,)</div><div class="line">int indexOf(int,)</div><div class="line">String valueOf(int,)</div><div class="line">String valueOf(long,)</div><div class="line">String valueOf(float,)</div><div class="line">String valueOf(boolean,)</div><div class="line">String valueOf(char[],)</div><div class="line">String valueOf(char[],int,int,)</div><div class="line">String valueOf(Object,)</div><div class="line">String valueOf(char,)</div><div class="line">String valueOf(double,)</div><div class="line">...</div></pre></td></tr></table></figure></p>
<h1 id="获得成员变量的信息"><a href="#获得成员变量的信息" class="headerlink" title="获得成员变量的信息"></a>获得成员变量的信息</h1><p>Field对象表示成员变量。每一个变量都是一个Field对象</p>
<ul>
<li>getFields()  获得public变量。返回Field[]</li>
<li>getDeclaredFields() 获得所有变量，但不包括继承的变量 。返回Field[]</li>
<li>getType获得 变量的类型。返回Class&lt;?&gt;</li>
<li>getName() 变量名。返回 String</li>
</ul>
<p>获得所有的成员变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public static void printClassFieldMessage(Object obj)&#123;</div><div class="line">	Class data = obj.getClass();</div><div class="line">	// 获得所有成员变量</div><div class="line">	Field []  fields = data.getDeclaredFields();</div><div class="line">	for(Field field:fields)&#123;</div><div class="line">		System.out.println(field.getType().getName() +&quot; &quot;);</div><div class="line">		System.out.println(field.getName());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[C </div><div class="line">value</div><div class="line">int </div><div class="line">hash</div><div class="line">long </div><div class="line">serialVersionUID</div><div class="line">[Ljava.io.ObjectStreamField; </div><div class="line">serialPersistentFields</div><div class="line">java.util.Comparator </div><div class="line">CASE_INSENSITIVE_ORDER</div></pre></td></tr></table></figure></p>
<h1 id="获得构造方法"><a href="#获得构造方法" class="headerlink" title="获得构造方法"></a>获得构造方法</h1><p>Constructor类的实例化对象，表示构造函数 </p>
<p>获得构造函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public static void printClassConFieldMessage(Object obj)&#123;</div><div class="line">	Class data = obj.getClass();</div><div class="line">	// 获得所有的构造函数</div><div class="line">	Constructor[] cons = data.getConstructors();</div><div class="line">	for(Constructor con:cons)&#123;</div><div class="line">		// 获得函数名</div><div class="line">		System.out.print(con.getName()+&quot;(&quot;);</div><div class="line">		// 获得参数列表</div><div class="line">		Class [] params = con.getParameterTypes();</div><div class="line">		for(Class param : params)&#123;</div><div class="line">			System.out.print(param.getName()+&quot;,&quot;);</div><div class="line">		&#125;</div><div class="line">		System.out.println(&quot;)&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">java.lang.String([B,int,int,)</div><div class="line">java.lang.String([B,java.nio.charset.Charset,)</div><div class="line">java.lang.String([B,java.lang.String,)</div><div class="line">java.lang.String([B,int,int,java.nio.charset.Charset,)</div><div class="line">java.lang.String([B,int,int,java.lang.String,)</div><div class="line">java.lang.String(java.lang.StringBuilder,)</div><div class="line">java.lang.String(java.lang.StringBuffer,)</div><div class="line">java.lang.String([B,)</div><div class="line">java.lang.String([I,int,int,)</div><div class="line">java.lang.String()</div><div class="line">java.lang.String([C,)</div><div class="line">java.lang.String(java.lang.String,)</div><div class="line">java.lang.String([C,int,int,)</div><div class="line">java.lang.String([B,int,)</div><div class="line">java.lang.String([B,int,int,int,)</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Servlet-监听器获得当前在线人数]]></title>
      <url>/2017/06/26/Servlet-%E7%9B%91%E5%90%AC%E5%99%A8%E8%8E%B7%E5%BE%97%E5%BD%93%E5%89%8D%E5%9C%A8%E7%BA%BF%E4%BA%BA%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h1><p>使用监听器获得当前在线的人数。用变量count表示当前在线人数。在HttpSessionListener每次调用sessionCreated方法时更新count，并保存在ServletContext中。之后需要使用时从ServletContext中获取即可。<a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@WebListener</div><div class="line">public class MySessionListener implements HttpSessionListener  &#123;</div><div class="line">	private int count = 0 ;</div><div class="line">	</div><div class="line">	@Override</div><div class="line">	public void sessionCreated(HttpSessionEvent se) &#123;</div><div class="line">		count++;</div><div class="line">		se.getSession().getServletContext().setAttribute(&quot;count&quot;,  count);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void sessionDestroyed(HttpSessionEvent se) &#123;</div><div class="line">		count--;</div><div class="line">		se.getSession().getServletContext().setAttribute(&quot;count&quot;, count);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h1><p>下面这个例子，除了获得在线的人数，还可以需要获得一些其他信息</p>
<p>ServletRequestListener监听器，对于每一次请求，获得请求的相关信息，并保存在ArrayList中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">package listener;</div><div class="line"></div><div class="line">import java.text.SimpleDateFormat;</div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.Date;</div><div class="line"></div><div class="line">import javax.servlet.ServletRequestEvent;</div><div class="line">import javax.servlet.ServletRequestListener;</div><div class="line">import javax.servlet.annotation.WebListener;</div><div class="line">import javax.servlet.http.HttpServletRequest;</div><div class="line">import javax.servlet.http.HttpSession;</div><div class="line"></div><div class="line">import util.SessionUtil;</div><div class="line">import entity.User;</div><div class="line"></div><div class="line">@WebListener</div><div class="line">public class MyServletRequestListener implements ServletRequestListener &#123;</div><div class="line">	ArrayList&lt;User&gt; userList = null ;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void requestDestroyed(ServletRequestEvent arg0) &#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void requestInitialized(ServletRequestEvent arg0) &#123;</div><div class="line">		HttpServletRequest request = (HttpServletRequest)arg0.getServletRequest();</div><div class="line">		HttpSession session = request.getSession();</div><div class="line">		</div><div class="line">		userList = (ArrayList&lt;User&gt;)arg0.getServletContext().getAttribute(&quot;userList&quot;);</div><div class="line">		if(userList == null)&#123;</div><div class="line">			userList = new ArrayList();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		</div><div class="line">		String sessionId = session.getId();</div><div class="line">		String Ip = request.getLocalAddr();</div><div class="line">		String time = new SimpleDateFormat(&quot;yy-MM-dd hh:mm:ss&quot;).format(new Date());</div><div class="line">		User user = new User();</div><div class="line">		user.setFirstTime(time);</div><div class="line">		user.setIp(Ip);</div><div class="line">		user.setSessionID(sessionId);</div><div class="line">		</div><div class="line">		if(SessionUtil.getSessionByID(userList, sessionId)==null)&#123;</div><div class="line">			userList.add(user);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		arg0.getServletContext().setAttribute(&quot;userList&quot;, userList);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>HttpSessionListener监听器，更新count的值，并在用户退出时删除ArrayList中的用户数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">package listener;</div><div class="line"></div><div class="line">import java.util.ArrayList;</div><div class="line"></div><div class="line">import javax.servlet.annotation.WebListener;</div><div class="line">import javax.servlet.http.HttpSessionEvent;</div><div class="line">import javax.servlet.http.HttpSessionListener;</div><div class="line"></div><div class="line">import util.SessionUtil;</div><div class="line">import entity.User;</div><div class="line"></div><div class="line">@WebListener</div><div class="line">public class MyHttpSessionListener implements HttpSessionListener &#123;</div><div class="line">	private int count = 0 ;</div><div class="line">	</div><div class="line">	@Override</div><div class="line">	public void sessionCreated(HttpSessionEvent arg0) &#123;</div><div class="line">		count++;</div><div class="line">		arg0.getSession().getServletContext().setAttribute(&quot;count&quot;, count);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void sessionDestroyed(HttpSessionEvent arg0) &#123;</div><div class="line">		count--;</div><div class="line">		arg0.getSession().getServletContext().setAttribute(&quot;count&quot;, count);</div><div class="line">		</div><div class="line">		String id = arg0.getSession().getId();</div><div class="line">		ArrayList&lt;User&gt; userList = (ArrayList&lt;User&gt;)arg0.getSession().getServletContext().getAttribute(&quot;userList&quot;);</div><div class="line">		</div><div class="line">		if(SessionUtil.getSessionByID(userList, id) != null)&#123;</div><div class="line">			User user = SessionUtil.getSessionByID(userList,id);</div><div class="line">			userList.remove(user);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>效果如下：<br><img src="http://i1.buimg.com/584041/30cf5df490547f17.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Servlet </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Servlet </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Servlet-监听器（ServletContext、Request、Session）]]></title>
      <url>/2017/06/26/Servlet-%E7%9B%91%E5%90%AC%E5%99%A8%EF%BC%88ServletContext%E3%80%81Request%E3%80%81Session%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="ServletContextListener"><a href="#ServletContextListener" class="headerlink" title="ServletContextListener"></a>ServletContextListener</h1><p>ServletContext对象创建和销毁时触发的监听器<br>该对象有两个方法,分别是contextInitialized() 和contextDestroyed() 对应着ServletContext对象的创建与销毁。一个ServletContext可以有多个listener<br><a id="more"></a></p>
<h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h2><p>一个web应用对应着一个ServletContext，ServletContext的根目录为当前web应用的webRoot目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class FirstListener implements ServletContextListener &#123;</div><div class="line"></div><div class="line">	public void contextDestroyed(ServletContextEvent arg0) &#123;</div><div class="line">		System.out.println(&quot;###contextDestroy&quot;);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void contextInitialized(ServletContextEvent arg0) &#123;</div><div class="line">		ServletContext context = arg0.getServletContext();</div><div class="line">		for(Object temp : context.getResourcePaths(&quot;/&quot;))&#123;</div><div class="line">			System.out.println(temp);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/index.jsp</div><div class="line">/WEB-INF/</div><div class="line">/META-INF/</div></pre></td></tr></table></figure></p>
<h2 id="配置监听器"><a href="#配置监听器" class="headerlink" title="配置监听器"></a>配置监听器</h2><p>在web.xml中添加一下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;listener&gt;</div><div class="line">    &lt;listener-class&gt;com.twilight.listener.FirstListener&lt;/listener-class&gt;</div><div class="line">&lt;/listener&gt;</div></pre></td></tr></table></figure></p>
<h1 id="HttpSessionListener"><a href="#HttpSessionListener" class="headerlink" title="HttpSessionListener"></a>HttpSessionListener</h1><p>在浏览器中访问<a href="http://localhost:8080/FirstFilter" target="_blank" rel="external">http://localhost:8080/FirstFilter</a> 时会创建session，tomcat会输出sessionCreated，一段时间后session会自动失效，然后tomcat会输出sessionDestroyed<br>一个Session对应多个listener</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public void sessionCreated(HttpSessionEvent arg0) &#123;</div><div class="line">	System.out.println(&quot;sessionCreated&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public void sessionDestroyed(HttpSessionEvent arg0) &#123;</div><div class="line">	System.out.println(&quot;sessionDestroyed&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="控制失效时间"><a href="#控制失效时间" class="headerlink" title="控制失效时间"></a>控制失效时间</h2><p>在web.xml 中配置session-timeout 以分钟为单位。当时间是0或复数时表示永久存在。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;session-config&gt;</div><div class="line">	&lt;session-timeout&gt;1&lt;/session-timeout&gt;</div><div class="line">&lt;/session-config&gt;</div></pre></td></tr></table></figure></p>
<h2 id="配置监听器-1"><a href="#配置监听器-1" class="headerlink" title="配置监听器"></a>配置监听器</h2><p>在web.xml中添加一下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;listener&gt;</div><div class="line">    &lt;listener-class&gt;com.twilight.listener.MyHttpSessionListener&lt;/listener-class&gt;</div><div class="line">&lt;/listener&gt;</div></pre></td></tr></table></figure></p>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul>
<li>统计在线人数</li>
<li>记录访问日志</li>
</ul>
<h1 id="ServletRequestListener"><a href="#ServletRequestListener" class="headerlink" title="ServletRequestListener"></a>ServletRequestListener</h1><p>表示用户请求的监听<br>两个方法：requestInitialized() 和requestDestroyed()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public void requestDestroyed(ServletRequestEvent arg0) &#123;</div><div class="line">	System.out.println(&quot;requestDestroyed&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public void requestInitialized(ServletRequestEvent arg0) &#123;</div><div class="line">	System.out.println(&quot;requestInitialized&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">requestInitialized</div><div class="line">sessionCreated</div><div class="line">requestDestroyed</div></pre></td></tr></table></figure></p>
<h2 id="配置监听器-2"><a href="#配置监听器-2" class="headerlink" title="配置监听器"></a>配置监听器</h2><p>在web.xml中添加一下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;listener&gt;</div><div class="line">	&lt;listener-class&gt;com.twilight.listener.MyServletRequestListener&lt;/listener-class&gt;</div><div class="line">&lt;/listener&gt;</div></pre></td></tr></table></figure></p>
<h2 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h2><ul>
<li>读取参数</li>
<li>记录访问历史</li>
</ul>
<h1 id="对象中增加和删除属性的事件监听器"><a href="#对象中增加和删除属性的事件监听器" class="headerlink" title="对象中增加和删除属性的事件监听器"></a>对象中增加和删除属性的事件监听器</h1><p>三个事件都有对应的属性监听器：</p>
<ul>
<li><strong>ServletContext</strong> —  <strong>ServletContextAttributeListener</strong></li>
<li><strong>HttpSession</strong> — <strong>HttpSessionAttributeListener</strong></li>
<li><strong>ServletRequest</strong> —  <strong>ServletRequestAttributeListener</strong></li>
</ul>
<p>每个属性监听器都有三个方法：</p>
<ul>
<li>attributeAdded    () 监听属性的增加</li>
<li>attributeRemoved() 监听属性的移除</li>
<li>attributeReplaced() 监听属性的替换</li>
</ul>
<p>ServletRequestAttributeListener 代码如下，其他监听器代码类似：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class MyServletRequestAttributeListener implements</div><div class="line">		ServletRequestAttributeListener &#123;</div><div class="line"></div><div class="line">	public void attributeAdded(ServletRequestAttributeEvent arg0) &#123;</div><div class="line">		System.out.println(&quot;ServletRequestAttributeListener_attributeAdded_&quot;+arg0.getName());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void attributeRemoved(ServletRequestAttributeEvent arg0) &#123;</div><div class="line">		System.out.println(&quot;ServletRequestAttributeListener_attributeRemoved_&quot;+arg0.getName());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void attributeReplaced(ServletRequestAttributeEvent arg0) &#123;</div><div class="line">		System.out.println(&quot;ServletRequestAttributeListener_attributeReplaced_&quot;+arg0.getName());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>addAttribute.jsp模拟增加属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">request.setAttribute(&quot;ServletRequest&quot;, &quot;ServletRequestValue&quot;);</div><div class="line">session.setAttribute(&quot;Session&quot;, &quot;SessionValue&quot;);</div><div class="line">session.getServletContext().setAttribute(&quot;ServletContext&quot;, &quot;ServletContextValue&quot;);</div></pre></td></tr></table></figure></p>
<p>removeAttribute.jsp 模拟移除属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">request.removeAttribute(&quot;ServletRequest&quot;);</div><div class="line">session.removeAttribute(&quot;Session&quot;);</div><div class="line">session.getServletContext().removeAttribute(&quot;ServletContext&quot;);</div></pre></td></tr></table></figure></p>
<p>第一次访问addAttribute.jsp:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">requestInitialized</div><div class="line">ServletRequestAttributeListener_attributeReplaced_org.apache.catalina.ASYNC_SUPPORTED</div><div class="line">ServletRequestAttributeListener_attributeAdded_ServletRequest</div><div class="line">HttpSessionAttributeListener_attributeAdded_Session</div><div class="line">ServletContextAttributeListener_attributeAdded_ServletContext</div><div class="line">requestDestroyed</div></pre></td></tr></table></figure></p>
<p>重复访问,发现只有Request是add，因为之前的Request已经失效，此时的Request是新创建的对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">requestInitialized</div><div class="line">ServletRequestAttributeListener_attributeReplaced_org.apache.catalina.ASYNC_SUPPORTED</div><div class="line">ServletRequestAttributeListener_attributeAdded_ServletRequest</div><div class="line">HttpSessionAttributeListener_attributeReplaced_Session</div><div class="line">ServletContextAttributeListener_attributeReplaced_ServletContext</div><div class="line">requestDestroyed</div></pre></td></tr></table></figure></p>
<p>访问removeAttribute.jsp,此时之前的Request对象已经被销毁，所以不会看到request被remove<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">requestInitialized</div><div class="line">ServletRequestAttributeListener_attributeReplaced_org.apache.catalina.ASYNC_SUPPORTED</div><div class="line">HttpSessionAttributeListener_attributeRemoved_Session</div><div class="line">ServletContextAttributeListener_attributeRemoved_ServletContext</div><div class="line">requestDestroyed</div></pre></td></tr></table></figure></p>
<h1 id="HttpSession-中对象状态（绑定、解除）"><a href="#HttpSession-中对象状态（绑定、解除）" class="headerlink" title="HttpSession 中对象状态（绑定、解除）"></a>HttpSession 中对象状态（绑定、解除）</h1><ul>
<li>绑定 ：将对象保存到session中</li>
<li>解除 ：从session中移除对象</li>
</ul>
<h2 id="HttpSessionBindingListener"><a href="#HttpSessionBindingListener" class="headerlink" title="HttpSessionBindingListener"></a>HttpSessionBindingListener</h2><p>该类类似一个javabean保存一些需要的信息，它有两个必须的方法：</p>
<ul>
<li><strong>valueBound() </strong> <strong>绑定</strong></li>
<li><strong>valueUnbound() </strong> <strong>解绑定</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">package com.twilight.entity;</div><div class="line"></div><div class="line">import javax.servlet.http.HttpSessionBindingEvent;</div><div class="line">import javax.servlet.http.HttpSessionBindingListener;</div><div class="line"></div><div class="line">public class User implements HttpSessionBindingListener &#123;</div><div class="line">	private String userName ;</div><div class="line">	private String password ;</div><div class="line">	</div><div class="line"></div><div class="line">	public void valueBound(HttpSessionBindingEvent arg0) &#123;</div><div class="line">		System.out.println(&quot;HttpSessionBindingListener_valueBound_&quot;+arg0.getName());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void valueUnbound(HttpSessionBindingEvent arg0) &#123;</div><div class="line">		System.out.println(&quot;HttpSessionBindingListener_valueUnbound+&quot;+arg0.getName());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getUserName() &#123;</div><div class="line">		return userName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setUserName(String userName) &#123;</div><div class="line">		this.userName = userName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getPassword() &#123;</div><div class="line">		return password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setPassword(String password) &#123;</div><div class="line">		this.password = password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该类不需要注册，可以直接使用<strong>，因为他可以认为只是一个继承了HttpSessionBindingListener接口的Javabean</strong>，使用方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">session.setAttribute(&quot;userObj&quot;, new User());</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">session.removeAttribute(&quot;userObj&quot;);</div></pre></td></tr></table></figure>
<p>结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 绑定</div><div class="line">requestInitialized</div><div class="line">HttpSessionBindingListener_valueBound_userObj</div><div class="line">requestDestroyed</div><div class="line"></div><div class="line">// 解绑定</div><div class="line">requestInitialized</div><div class="line">HttpSessionBindingListener_valueUnbound+userObj</div><div class="line">requestDestroyed</div></pre></td></tr></table></figure></p>
<h1 id="钝化和活化"><a href="#钝化和活化" class="headerlink" title="钝化和活化"></a>钝化和活化</h1><ul>
<li>钝化 将session序列化到磁盘</li>
<li>活化 将序列化的对象反序列化到内存中</li>
</ul>
<h2 id="什么时候钝化"><a href="#什么时候钝化" class="headerlink" title="什么时候钝化"></a>什么时候钝化</h2><ul>
<li>当tomcat服务器关闭或重启时，会将当前的session对象钝化</li>
<li>当web应用被重新加载时（reload）钝化</li>
</ul>
<p><strong>当tomcat服务器重启开启时，重新加载文件道内存并删除本地文件</strong></p>
<h2 id="HttpSessionActivationListener"><a href="#HttpSessionActivationListener" class="headerlink" title="HttpSessionActivationListener"></a>HttpSessionActivationListener</h2><p>实现钝化和话的接口，具体方法有两个：</p>
<ul>
<li><strong>sessionWillPassivate</strong> <strong>钝化</strong></li>
<li><strong>sessionDidActivate</strong> <strong>活化</strong></li>
</ul>
<p>由于钝化需要将对象序列化，所以还需要实现Serializable接口。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">package com.twilight.entity;</div><div class="line"></div><div class="line">import java.io.Serializable;</div><div class="line"></div><div class="line">import javax.servlet.http.HttpSessionActivationListener;</div><div class="line">import javax.servlet.http.HttpSessionBindingEvent;</div><div class="line">import javax.servlet.http.HttpSessionBindingListener;</div><div class="line">import javax.servlet.http.HttpSessionEvent;</div><div class="line"></div><div class="line">public class User implements HttpSessionBindingListener ,HttpSessionActivationListener ,Serializable &#123;</div><div class="line">	private String userName ;</div><div class="line">	private String password ;</div><div class="line">	</div><div class="line"></div><div class="line">	public void valueBound(HttpSessionBindingEvent arg0) &#123;</div><div class="line">		System.out.println(&quot;HttpSessionBindingListener_valueBound_&quot;+arg0.getName());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void valueUnbound(HttpSessionBindingEvent arg0) &#123;</div><div class="line">		System.out.println(&quot;HttpSessionBindingListener_valueUnbound+&quot;+arg0.getName());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getUserName() &#123;</div><div class="line">		return userName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setUserName(String userName) &#123;</div><div class="line">		this.userName = userName;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public String getPassword() &#123;</div><div class="line">		return password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void setPassword(String password) &#123;</div><div class="line">		this.password = password;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">	public void sessionDidActivate(HttpSessionEvent se) &#123;</div><div class="line">		System.out.println(&quot;HttpSessionActivationListener_sessionDidActivate_&quot;+se.getSource());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	public void sessionWillPassivate(HttpSessionEvent se) &#123;</div><div class="line">		System.out.println(&quot;HttpSessionActivationListener_sessionWillPassivate_&quot;+se.getSource());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 钝化</div><div class="line">HttpSessionActivationListener_sessionWillPassivate_org.apache.catalina.session.StandardSessionFacade@720a366b</div><div class="line"></div><div class="line">// 活化</div><div class="line">HttpSessionActivationListener_sessionDidActivate_org.apache.catalina.session.StandardSessionFacade@798aa3f4</div></pre></td></tr></table></figure></p>
<p>钝化后的文件保存在 Tomcat\work\Catalina\localhost\项目名\SESSIONS.ser文件中，服务器启动后文件被反序列化，然后被删除</p>
<p>参考资料：<a href="http://www.imooc.com/learn/271" title="Fcming" target="_blank" rel="external">http://www.imooc.com/learn/271</a></p>
]]></content>
      
        <categories>
            
            <category> Servlet </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Servlet </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jQuery动画---自定义动画animate()]]></title>
      <url>/2017/06/20/jQuery%E5%8A%A8%E7%94%BB-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A8%E7%94%BBanimate/</url>
      <content type="html"><![CDATA[<h1 id="同步动画"><a href="#同步动画" class="headerlink" title="同步动画"></a>同步动画</h1><p><em>animate(参数对象,time,回调函数)</em></p>
<p>同时改变多个样式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(&quot;:button&quot;).click(function()&#123;</div><div class="line">	$(&quot;div&quot;).animate(&#123;</div><div class="line">		&apos;width&apos;:&quot;300px&quot;,</div><div class="line">		&apos;height&apos;:&quot;300px&quot;,</div><div class="line">		&apos;opacity&apos;:0.5,</div><div class="line">		&apos;font-size&apos;:&apos;50px&apos;</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>添加速度和回调函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$(&quot;:button&quot;).click(function()&#123;</div><div class="line">	$(&quot;div&quot;).animate(&#123;</div><div class="line">		&apos;width&apos;:&quot;300px&quot;,</div><div class="line">		&apos;height&apos;:&quot;300px&quot;,</div><div class="line">		&apos;opacity&apos;:0.5,</div><div class="line">		&apos;font-size&apos;:&apos;50px&apos;</div><div class="line">	&#125;,200,function()&#123;</div><div class="line">		alert(&quot;动画完成&quot;);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>移动动画。需要将div的样式设置成position:absolte,然后在改变left和top的值即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(&quot;:button&quot;).click(function()&#123;</div><div class="line">	$(&quot;div&quot;).animate(&#123;</div><div class="line">			left:&apos;100px&apos;,</div><div class="line">			top:&apos;100px&apos;</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>位置的自增自减。位置的改变可以自增自减（+=，-=）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(&quot;:button&quot;).click(function()&#123;</div><div class="line">	$(&quot;div&quot;).animate(&#123;</div><div class="line">			left:&apos;+=100px&apos;,</div><div class="line">			top:&apos;-=100px&apos;</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="运动模式"><a href="#运动模式" class="headerlink" title="运动模式"></a>运动模式</h2><p>有两种速度</p>
<ul>
<li>swing  缓动（先快后慢）</li>
<li>linear 匀速</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(&quot;.a&quot;).animate(&#123;</div><div class="line">	left:&quot;500px&quot;</div><div class="line">&#125;,2000,&apos;swing&apos;);</div><div class="line">$(&quot;.b&quot;).animate(&#123;</div><div class="line">	left:&quot;500px&quot;</div><div class="line">&#125;,2000,&apos;linear&apos;);</div></pre></td></tr></table></figure>
<h1 id="列队动画"><a href="#列队动画" class="headerlink" title="列队动画"></a>列队动画</h1><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>嵌套调用回调函数，可以实现队列动画，但是比较繁琐<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$(&quot;:input&quot;).click(function()&#123;</div><div class="line">	$(&quot;div&quot;).animate(&#123;width:&quot;300px&quot;&#125;,function()&#123;</div><div class="line">		$(&quot;div&quot;).animate(&#123;height:&quot;300px&quot;&#125;,function()&#123;</div><div class="line">			$(&quot;div&quot;).animate(&#123;height:&quot;300px&quot;&#125;,function()&#123;</div><div class="line">				$(&quot;div&quot;).animate(&#123;fontSize:&quot;50px&quot;&#125;);</div><div class="line">			&#125;)</div><div class="line">		&#125;);</div><div class="line">	&#125;);		</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="连缀或顺序排列"><a href="#连缀或顺序排列" class="headerlink" title="连缀或顺序排列"></a>连缀或顺序排列</h2><h3 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h3><p>jQuery支持链式调用。因此可以链式的改变多个样式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(&quot;:input&quot;).click(function()&#123;</div><div class="line">	$(&quot;div&quot;).animate(&#123;width:&quot;300px&quot;&#125;)</div><div class="line">			.animate(&#123;height:&quot;300px&quot;&#125;)</div><div class="line">			.animate(&#123;fontSize:&quot;50px&quot;&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="顺序排列"><a href="#顺序排列" class="headerlink" title="顺序排列"></a>顺序排列</h3><p>将动画分解，并列的依次调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(&quot;:input&quot;).click(function()&#123;</div><div class="line">	$(&quot;div&quot;).animate(&#123;width:&quot;300px&quot;&#125;);</div><div class="line">	$(&quot;div&quot;).animate(&#123;height:&quot;300px&quot;&#125;);</div><div class="line">	$(&quot;div&quot;).animate(&#123;fontSize:&quot;50px&quot;&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h2><p>以上方法对于单个元素的样式可以实现列队动画。但是如果同时控制几个元素时，不同的元素同时开始执行。但是执行时是按照队列依次执行自身的动画，如果需要不同的元素之间队列执行，就必须嵌套回调函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(&quot;:input&quot;).click(function()&#123;</div><div class="line">	$(&quot;.a&quot;).animate(&#123;width:&quot;300px&quot;&#125;);</div><div class="line">	$(&quot;.a&quot;).animate(&#123;height:&quot;300px&quot;&#125;);</div><div class="line">	$(&quot;.a&quot;).animate(&#123;fontSize:&quot;50px&quot;&#125;);</div><div class="line">	$(&quot;.b&quot;).animate(&#123;width:&quot;300px&quot;&#125;);</div><div class="line">	$(&quot;.b&quot;).animate(&#123;height:&quot;300px&quot;&#125;);</div><div class="line">	$(&quot;.b&quot;).animate(&#123;fontSize:&quot;50px&quot;&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h1 id="queue"><a href="#queue" class="headerlink" title="queue()"></a>queue()</h1><p>如果在一连串的动画后调用改变样式的函数。那么会先改变css样式，后执行动画。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(&quot;:input&quot;).click(function()&#123;</div><div class="line">	$(&quot;.a&quot;).animate(&#123;width:&quot;300px&quot;&#125;).animate(&#123;height:&quot;300px&quot;&#125;).css(&quot;background-color&quot;,&quot;skyblue&quot;	);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>解决的方法是使用queue函数，该函数会让动画先执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(&quot;:input&quot;).click(function()&#123;</div><div class="line">	$(&quot;.a&quot;).animate(&#123;width:&quot;300px&quot;&#125;).animate(&#123;height:&quot;300px&quot;&#125;).queue(function()&#123;</div><div class="line">		$(&quot;.a&quot;).css(&quot;background-color&quot;,&quot;skyblue&quot;	);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>但是，这是如果在queue后再接着调用其他动画时会失效，解决方法是在queue函数的末尾调用next(),同时在queue的匿名函数入口传入next<br><em>queue(function(next){…  next()});</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(&quot;:input&quot;).click(function()&#123;</div><div class="line">	$(&quot;.a&quot;).animate(&#123;width:&quot;300px&quot;&#125;);</div><div class="line">	$(&quot;.a&quot;).animate(&#123;height:&quot;300px&quot;&#125;).queue(function(next)&#123;</div><div class="line">		$(&quot;.a&quot;).css(&quot;background-color&quot;,&quot;skyblue&quot;);</div><div class="line">		next();</div><div class="line">	&#125;).animate(&#123;width:&quot;800px&quot;&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>较老的版本使用dequeue函数达到同样的效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(&quot;:input&quot;).click(function()&#123;</div><div class="line">	$(&quot;.a&quot;).animate(&#123;width:&quot;300px&quot;&#125;);</div><div class="line">	$(&quot;.a&quot;).animate(&#123;height:&quot;300px&quot;&#125;).queue(function(next)&#123;</div><div class="line">		$(&quot;.a&quot;).css(&quot;background-color&quot;,&quot;skyblue&quot;);</div><div class="line">		$(this).dequeue();</div><div class="line">	&#125;).animate(&#123;width:&quot;800px&quot;&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>queue还可以得到当前动画的长度</p>
<h1 id="clearQueue"><a href="#clearQueue" class="headerlink" title="clearQueue()"></a>clearQueue()</h1><p>清理之后没有开始的动画，并且，clearQueue() 方法移除任何排队的函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$(&quot;:input&quot;).click(function()&#123;</div><div class="line">	$(&quot;.a&quot;).animate(&#123;width:&quot;300px&quot;&#125;,2000);</div><div class="line">	$(&quot;.a&quot;).animate(&#123;height:&quot;300px&quot;&#125;,2000);</div><div class="line">	$(&quot;.a&quot;).animate(&#123;fontSize:&quot;50px&quot;&#125;,2000);</div><div class="line">	$(&quot;.a&quot;).queue(function(next)&#123;</div><div class="line">		$(&quot;.a&quot;).css(&quot;background-color&quot;,&quot;skyblue&quot;);</div><div class="line">		$(this).dequeue();</div><div class="line">	&#125;).animate(&#123;width:&quot;800px&quot;&#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(&quot;:input:eq(1)&quot;).click(function()&#123;</div><div class="line">	$(&quot;.a&quot;).clearQueue();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h1 id="stop"><a href="#stop" class="headerlink" title="stop()"></a>stop()</h1><p>stop(clearQueue,gotoEnd)</p>
<ul>
<li>clearQueue 停止，并清空后面未执行完的动画。默认为 false (true/false)</li>
<li>gotoEnd 停止后，当前动画执行完毕的位置，默认为 false （true/false)</li>
</ul>
<p>默认地，如果有列队动画，stop停止第一个列队动画，而继续执行后面的动画。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$(&quot;:button:eq(0)&quot;).click(function()&#123;</div><div class="line">	$(&quot;.a&quot;).animate(&#123;</div><div class="line">		left:&quot;500px&quot;</div><div class="line">	&#125;,1000);</div><div class="line">	$(&quot;.a&quot;).animate(&#123;</div><div class="line">		top:&quot;500px&quot;</div><div class="line">	&#125;,1000);</div><div class="line">	$(&quot;.a&quot;).animate(&#123;</div><div class="line">		width:&quot;500px&quot;</div><div class="line">	&#125;,1000);</div><div class="line">&#125;);</div><div class="line">$(&quot;:button:eq(1)&quot;).click(function()&#123;</div><div class="line">	$(&quot;.a&quot;).stop(true,true);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h1 id="delay"><a href="#delay" class="headerlink" title="delay()"></a>delay()</h1><p>事件延迟一定的时间<br><em>delay(time)</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$(&quot;:button:eq(0)&quot;).click(function()&#123;</div><div class="line">	$(&quot;.a&quot;).animate(&#123;</div><div class="line">		left:&quot;500px&quot;</div><div class="line">	&#125;);</div><div class="line">	$(&quot;.a&quot;).animate(&#123;</div><div class="line">		top:&quot;500px&quot;</div><div class="line">	&#125;);</div><div class="line">	$(&quot;.a&quot;).delay(1000);</div><div class="line">	$(&quot;.a&quot;).animate(&#123;</div><div class="line">		width:&quot;500px&quot;</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="animated"><a href="#animated" class="headerlink" title="animated"></a>animated</h1><p>之前说过的一个过滤器，可以选择正在执行动画的元素</p>
<p>一个永不停止的动画：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(&quot;.a&quot;).slideToggle(function()&#123;</div><div class="line">	$(&quot;.a&quot;).slideToggle(arguments.callee);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>使用过滤器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(&quot;:button&quot;).click(function()&#123;</div><div class="line">	$(&quot;:animated&quot;).css(&quot;backgroundColor&quot;,&quot;blue&quot;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h1 id="动画的全局属性"><a href="#动画的全局属性" class="headerlink" title="动画的全局属性"></a>动画的全局属性</h1><p>全局的动画属性：</p>
<ul>
<li>$.fx.interval 动画执行的帧数 (num)</li>
<li>$.fx.off 关闭动画（true/false）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$.fx.interval = 100;	设置帧数为100 ，动画变得卡顿</div><div class="line">$.fx.off = true; 取消所有动画</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> jQuery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jQuery动画---显示、卷动、淡入淡出]]></title>
      <url>/2017/06/16/jQuery%E5%8A%A8%E7%94%BB-%E6%98%BE%E7%A4%BA%E3%80%81%E5%8D%B7%E5%8A%A8%E3%80%81%E6%B7%A1%E5%85%A5%E6%B7%A1%E5%87%BA/</url>
      <content type="html"><![CDATA[<h1 id="显示和隐藏"><a href="#显示和隐藏" class="headerlink" title="显示和隐藏"></a>显示和隐藏</h1><p>show()/hide() 显示和隐藏</p>
<h2 id="动画显示"><a href="#动画显示" class="headerlink" title="动画显示"></a>动画显示</h2><p>可以加时间参数，标志显示或者隐藏的快慢，单位为毫秒。还有三个预设的速度：slow、normal 和 fast，分别对应 600 毫秒、400 毫秒和 200 毫秒。<br>如果传递的时间不符合格式要求或者为空字符串，那个将采用normal<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(&quot;:button:eq(0)&quot;).click(function()&#123;</div><div class="line">	$(&quot;div:eq(0)&quot;).show(500);</div><div class="line">&#125;);</div><div class="line">$(&quot;:button:eq(1)&quot;).click(function()&#123;</div><div class="line">	$(&quot;div:eq(0)&quot;).hide(500);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>动画执行完毕后，紧接着执行回调函数。这里如果不写time则依然有速度，速度为normal<br><em>show(time,fun)</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(&quot;div:eq(0)&quot;).show(500,function()&#123;</div><div class="line">	alert(&quot;显示完成&quot;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="队列动画"><a href="#队列动画" class="headerlink" title="队列动画"></a>队列动画</h3><p>在一个动画执行完后，调用另一个动画，由此实现队列动画。采用递归自动遍历所有需要操作的元素。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$(&quot;:button:eq(0)&quot;).click(function()&#123;</div><div class="line">	$(&quot;div&quot;).first().show(100,function test()&#123;</div><div class="line">		$(this).next().show(100,test);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div><div class="line">$(&quot;:button&quot;).last().click(function()&#123;</div><div class="line">	$(&quot;div&quot;).last().hide(100,function test1()&#123;</div><div class="line">		$(&quot;div:visible&quot;).last().hide(100,test1);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>也可以使用arguments.callee表示匿名函数的引用<br>arguments.callee的用法参考 <a href="http://blog.csdn.net/twilight_karl/article/details/55670174" target="_blank" rel="external">js函数</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$(&quot;:button:eq(0)&quot;).click(function()&#123;</div><div class="line">	$(&quot;div&quot;).first().show(100,function ()&#123;</div><div class="line">		$(this).next().show(100, arguments.callee);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div><div class="line">$(&quot;:button&quot;).last().click(function()&#123;</div><div class="line">	$(&quot;div&quot;).last().hide(100,function ()&#123;</div><div class="line">		$(&quot;div:visible&quot;).last().hide(100, arguments.callee);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="toggle"><a href="#toggle" class="headerlink" title="toggle()"></a>toggle()</h2><p>在show和hide之间自动切换<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(&quot;:button:eq(2)&quot;).click(function()&#123;</div><div class="line">	$(&quot;div&quot;).toggle(200);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h1 id="卷动"><a href="#卷动" class="headerlink" title="卷动"></a>卷动</h1><p>用法与show/hide类似，具体方法如下：</p>
<ul>
<li>slideUp()  向上卷起</li>
<li>slideDown()  向下展开</li>
<li>slideToggle()  自动切换</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$(&quot;:button:eq(0)&quot;).click(function()&#123;</div><div class="line">	$(&quot;div&quot;).slideUp(&apos;slow&apos;);</div><div class="line">&#125;);</div><div class="line">$(&quot;:button:eq(1)&quot;).click(function()&#123;</div><div class="line">	$(&quot;div&quot;).slideDown(&apos;slow&apos;);</div><div class="line">&#125;);</div><div class="line">$(&quot;:button:eq(2)&quot;).click(function()&#123;</div><div class="line">	$(&quot;div&quot;).slideToggle(&apos;slow&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="淡入淡出"><a href="#淡入淡出" class="headerlink" title="淡入淡出"></a>淡入淡出</h1><p>与show类似，具体方法如下：</p>
<ul>
<li>fadeIn() 淡入</li>
<li>fadeOut() 淡出</li>
<li>fadeToggle() 自动切换</li>
<li>fadeTo() 指定透明度(0-1)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$(&quot;:button:eq(0)&quot;).click(function()&#123;</div><div class="line">	$(&quot;div&quot;).fadeIn(&apos;slow&apos;);</div><div class="line">&#125;);</div><div class="line">$(&quot;:button:eq(1)&quot;).click(function()&#123;</div><div class="line">	$(&quot;div&quot;).fadeOut(&apos;slow&apos;);</div><div class="line">&#125;);</div><div class="line">$(&quot;:button:eq(2)&quot;).click(function()&#123;</div><div class="line">	$(&quot;div&quot;).fadeToggle(&apos;slow&apos;);</div><div class="line">&#125;);</div><div class="line">$(&quot;:button:eq(2)&quot;).click(function()&#123;</div><div class="line">	$(&quot;div&quot;).fadeTo(&apos;slow&apos;,0.5);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jQuery高级事件---on、off、one和事件委托]]></title>
      <url>/2017/06/16/jQuery%E9%AB%98%E7%BA%A7%E4%BA%8B%E4%BB%B6-on%E3%80%81off%E3%80%81one%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</url>
      <content type="html"><![CDATA[<h1 id="on、off、one"><a href="#on、off、one" class="headerlink" title="on、off、one"></a>on、off、one</h1><p> jQuery1.7 以后推出了.on()和.off()方法，替代之前的方法。on/off整合了bind、unbind、事件委托等方法<br><a id="more"></a></p>
<h2 id="on替代bind方法"><a href="#on替代bind方法" class="headerlink" title="on替代bind方法"></a>on替代bind方法</h2><p>on可以替代bind方法，使用方法和bind一致<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">// 绑定单个事件</div><div class="line">	$(&quot;:button&quot;).on(&quot;click&quot;,function()&#123;</div><div class="line">		alert(&quot;on&quot;);</div><div class="line">	&#125;);</div><div class="line"></div><div class="line">// 传递数据</div><div class="line">	$(&quot;:button&quot;).on(&quot;click&quot;,&#123;name:&quot;tom&quot;&#125;,function(e)&#123;</div><div class="line">		alert(e.data.name);</div><div class="line">	&#125;);</div><div class="line"></div><div class="line">// 绑定多个事件</div><div class="line">	$(&quot;:button&quot;).on(&quot;mouseover mouseout&quot;,function(e)&#123;</div><div class="line">		alert(&quot;移入移出&quot;);</div><div class="line">	&#125;);</div><div class="line"></div><div class="line">// 使用对象绑定多个事件</div><div class="line">	$(&quot;:button&quot;).on(&#123;</div><div class="line">		mouseover:function()&#123;</div><div class="line">			alert(&quot;移入&quot;);</div><div class="line">		&#125;,</div><div class="line">		mouseout:function()&#123;</div><div class="line">			alert(&quot;移出&quot;);</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line"></div><div class="line">// 阻止冒泡和默认行为</div><div class="line">	$(&quot;:submit&quot;).on(&quot;click&quot;,function(e)&#123;</div><div class="line">		e.preventDefault();</div><div class="line">		e.stopPropagation();</div><div class="line">		alert(&quot;取消默认行为和冒泡&quot;);</div><div class="line">	&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="off替代unbind方法"><a href="#off替代unbind方法" class="headerlink" title="off替代unbind方法"></a>off替代unbind方法</h2><p>off可以替代unbind方法，使用方法不变<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function test()&#123;</div><div class="line">	alert(&quot;test&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">$(&quot;:button&quot;).on(&quot;click.on&quot;,test);	//根据函数解除绑定</div><div class="line">$(&quot;:button&quot;).off(&quot;click&quot;);		// 根据事件解除绑定</div><div class="line">$(&quot;:button&quot;).off(&quot;click.on&quot;);	// 根据命名空间解除绑定</div></pre></td></tr></table></figure></p>
<h1 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h1><p>实际上是给祖先绑定一个事件。子元素通过冒泡将事传递到祖先元素，祖先元素再判断点击的是不是button，如果是，就执行相同的事件。因此，当有很多个相同的按钮需要绑定相同的事件时，可以用事件委托将事件委托给祖先节点，有祖先节点判断子节点是否执行某事件。如果不适用事假委托，那个每一个节点都需要绑定一个事件。<br>使用方法是：<br><em>祖先节点.on(“事件”,”子元素”,”绑定的函数”);</em></p>
<p>on的第二个参数需要写成所有相同元素通用的写法，不能写成:button:eq(0)这样的选择不具有通用性，祖先节点在判断的时候会无法达到预期的效果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">	$(&quot;div:eq(0)&quot;).on(&quot;click&quot;,&quot;:button&quot;,function()&#123;</div><div class="line">		$(this).clone(true).appendTo(&quot;div:eq(0)&quot;);</div><div class="line">	&#125;);</div><div class="line"></div><div class="line">// 换成document也可：</div><div class="line">	$(document).on(&quot;click&quot;,&quot;:button&quot;,function()&#123;</div><div class="line">		$(this).clone(true).appendTo(&quot;div:eq(0)&quot;);</div><div class="line">	&#125;);</div></pre></td></tr></table></figure></p>
<h1 id="取消委托"><a href="#取消委托" class="headerlink" title="取消委托"></a>取消委托</h1><p>off函数还可以取消委托,取消委托必须由祖先节点调用调用方法是：<br><em>祖先节点.off(“事件”,”子元素”);</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(&quot;div:eq(0)&quot;).off(&apos;click&apos;, &apos;.button&apos;);</div></pre></td></tr></table></figure>
<h1 id="one"><a href="#one" class="headerlink" title="one()"></a>one()</h1><p>绑定元素执行完毕后自动移除事件，可以方法仅触发一次的事件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(&quot;:button&quot;).one(&quot;click&quot;,function()&#123;</div><div class="line">	alert(&quot;one&quot;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h1 id="用到的方法"><a href="#用到的方法" class="headerlink" title="用到的方法"></a>用到的方法</h1><h2 id="clone"><a href="#clone" class="headerlink" title="clone()"></a>clone()</h2><p>生成被选元素的副本，包含子节点、文本和属性。<br><em>$(selector).clone(includeEvents)</em></p>
<ul>
<li>includeEvents 规定是否复制元素的所有事件处理。true/false,默认是false</li>
</ul>
<h2 id="appendTo"><a href="#appendTo" class="headerlink" title="appendTo()"></a>appendTo()</h2><p>在被选元素的结尾（仍然在内部）插入指定内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(&quot;button&quot;).click(function()&#123;</div><div class="line">  $(&quot;&lt;b&gt;sss&lt;/b&gt;&quot;).appendTo(&quot;p&quot;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> jQuery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jQuery高级事件---模拟操作和命名空间]]></title>
      <url>/2017/06/16/jQuery%E9%AB%98%E7%BA%A7%E4%BA%8B%E4%BB%B6-%E6%A8%A1%E6%8B%9F%E4%BA%8B%E4%BB%B6%E5%92%8C%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</url>
      <content type="html"><![CDATA[<h1 id="模拟操作"><a href="#模拟操作" class="headerlink" title="模拟操作"></a>模拟操作</h1><p><em>trigger()</em><br>浏览器自行触发事件.例如：当网页加载完毕后浏览器自行点击一个按钮触发一个事件，而不是用户去点击。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(&quot;input&quot;).click(function()&#123;</div><div class="line">	alert(&quot;自行点击事件&quot;);</div><div class="line">&#125;);</div><div class="line">$(&quot;input&quot;).trigger(&quot;click&quot;);</div></pre></td></tr></table></figure>
<p>也可以简写为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(&quot;input&quot;).click(function()&#123;</div><div class="line">	alert(&quot;自行点击事件&quot;);</div><div class="line">&#125;).trigger(&quot;click&quot;);</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="传递数据"><a href="#传递数据" class="headerlink" title="传递数据"></a>传递数据</h2><p>给事件执行传递参数，这个参数类似与 event.data的额外数据，可以是数字、字符串、数组、对象。<br><strong>当传递一条数据时可以省略中括号，多条必须加上中括号，中括号不表示数组，只是一个标识</strong></p>
<p>传递一条参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(&quot;input&quot;).click(function()&#123;</div><div class="line">	alert(&quot;自行点击事件&quot;);</div><div class="line">&#125;);</div><div class="line">$(&quot;input&quot;).trigger(&quot;click&quot;);</div></pre></td></tr></table></figure></p>
<p>传递一条参数的简写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(&quot;input&quot;).click(function(e,data1)&#123;</div><div class="line">	alert(data1);</div><div class="line">&#125;).trigger(&quot;click&quot;,&quot;sss&quot;);</div></pre></td></tr></table></figure></p>
<p>传递多条参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(&quot;input&quot;).click(function(e,data1,data2,data3)&#123;</div><div class="line">	alert(data1+data2+data3);</div><div class="line">&#125;).trigger(&quot;click&quot;,[&quot;sss&quot;,1,2]);</div></pre></td></tr></table></figure></p>
<p>传递数组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(&quot;input&quot;).click(function(e,data1,data2,data3)&#123;</div><div class="line">	alert(data1+data2+data3[0]);</div><div class="line">&#125;).trigger(&quot;click&quot;,[&quot;sss&quot;,1,[1,2,3]]);</div></pre></td></tr></table></figure></p>
<p>传递对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(&quot;input&quot;).click(function(e,data1,data2,data3)&#123;</div><div class="line">	alert(data1+data2+data3.user);</div><div class="line">&#125;).trigger(&quot;click&quot;,[&quot;sss&quot;,1,&#123;user:&apos;tom&apos;&#125;]);</div></pre></td></tr></table></figure></p>
<p>bind也可同时传递数据，但是bind需要从event中获得：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(&quot;input&quot;).bind(&quot;click&quot;,&#123;user:&quot;tom&quot;&#125;,function(e,data1,data2,data3)&#123;</div><div class="line">	alert(e.data.user+data1+data2+data3.user);</div><div class="line">&#125;).trigger(&quot;click&quot;,[&quot;sss&quot;,1,&#123;user:&apos;tom&apos;&#125;]);</div></pre></td></tr></table></figure></p>
<h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p>可以通过自定义的事件触发相关函数，所谓自定义事件其实就是执行被.bind()绑定的函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(&quot;input&quot;).bind(&quot;myEvent&quot;,function()&#123;</div><div class="line">	alert(&quot;这是一个自定义事件&quot;);</div><div class="line">&#125;).trigger(&quot;myEvent&quot;);</div></pre></td></tr></table></figure></p>
<h2 id="简写方案"><a href="#简写方案" class="headerlink" title="简写方案"></a>简写方案</h2><p>trigger()方法提供了简写方案，只要想让某个事件执行模拟用户行为，直接再调用一个<br>空的同名事件即可,例如：<code>trigger(&quot;click&quot;) ---&gt; click()</code>。几乎所有事件都有简写方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">blur focusin mousedown resize</div><div class="line">change focusout mousenter scroll</div><div class="line">click keydown mouseleave select</div><div class="line">dblclick keypress mousemove submit</div><div class="line">error keyup mouseout unload</div><div class="line">focus load mouseover</div></pre></td></tr></table></figure></p>
<h1 id="triggerHandler"><a href="#triggerHandler" class="headerlink" title="triggerHandler()"></a>triggerHandler()</h1><h2 id="1-触发事件，但不会执行默认行为"><a href="#1-触发事件，但不会执行默认行为" class="headerlink" title="1.触发事件，但不会执行默认行为"></a>1.触发事件，但不会执行默认行为</h2><p>trigger执行表单提交时会触发默认事件，自动跳转<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">	$(&quot;form&quot;).submit().triggle(&quot;submit&quot;);</div><div class="line">// 等效的用法：</div><div class="line">	$(&quot;form&quot;).triggle(&quot;submit&quot;);</div></pre></td></tr></table></figure></p>
<p>triggerHandler()提交表单但是不会自动跳转<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(&quot;form&quot;).triggleHandler(&quot;submit&quot;);</div></pre></td></tr></table></figure></p>
<h2 id="2-triggerHandler-只会触发第一个元素的事件，而trigger会触发所有满足条件的元素的事件。"><a href="#2-triggerHandler-只会触发第一个元素的事件，而trigger会触发所有满足条件的元素的事件。" class="headerlink" title="2.triggerHandler()只会触发第一个元素的事件，而trigger会触发所有满足条件的元素的事件。"></a>2.triggerHandler()只会触发第一个元素的事件，而trigger会触发所有满足条件的元素的事件。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(&quot;:button&quot;).click(function()&#123;	// 只会执行第一个按钮的事件</div><div class="line">	alert(&quot;###&quot;);</div><div class="line">&#125;).triggerHandler(&quot;click&quot;);</div></pre></td></tr></table></figure>
<h2 id="3-trigger返回jQuery对象，triggerHandler-返回事件的返回值。所以triggerHandler不能用链式使用"><a href="#3-trigger返回jQuery对象，triggerHandler-返回事件的返回值。所以triggerHandler不能用链式使用" class="headerlink" title="3.trigger返回jQuery对象，triggerHandler()返回事件的返回值。所以triggerHandler不能用链式使用"></a>3.trigger返回jQuery对象，triggerHandler()返回事件的返回值。所以triggerHandler不能用链式使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var reuslt = $(&quot;:button&quot;).click(function()&#123;</div><div class="line">	alert(&quot;###&quot;);</div><div class="line">	return 123;					// 如果没有return则triggerHandler返回undefined</div><div class="line">&#125;).triggerHandler(&quot;click&quot;);</div><div class="line"></div><div class="line">alert(reuslt);		// 123</div></pre></td></tr></table></figure>
<h2 id="4-trigger会冒泡，triggerHandler不会冒泡"><a href="#4-trigger会冒泡，triggerHandler不会冒泡" class="headerlink" title="4.trigger会冒泡，triggerHandler不会冒泡"></a>4.trigger会冒泡，triggerHandler不会冒泡</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(&quot;div&quot;).click(function()&#123;</div><div class="line">	alert(&quot;div&quot;);</div><div class="line">&#125;);</div><div class="line">$(&quot;:button:eq(0)&quot;).click(function()&#123;</div><div class="line">	alert(&quot;aaa&quot;);</div><div class="line">&#125;).triggerHandler(&quot;click&quot;);</div></pre></td></tr></table></figure>
<h1 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h1><p><em>click.abc</em><br>常常使用给事件绑定匿名函数。但是匿名函数不方便移除。因此使用命名空间可以给每一个匿名函数一个对应的命名，方便控制</p>
<p>只会删除click.abc对应的函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(&quot;:button:eq(0)&quot;).bind(&quot;click.abc&quot;,function()&#123;alert(&quot;abc&quot;)&#125;);</div><div class="line">$(&quot;:button:eq(0)&quot;).bind(&quot;click.xyz&quot;,function()&#123;alert(&quot;xyz&quot;)&#125;);</div><div class="line">$(&quot;:button:eq(0)&quot;).unbind(&quot;click.abc&quot;);</div></pre></td></tr></table></figure></p>
<p>删除所有abc对应的函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(&quot;:button:eq(0)&quot;).bind(&quot;click.abc&quot;,function()&#123;alert(&quot;abc&quot;)&#125;);</div><div class="line">$(&quot;:button:eq(0)&quot;).bind(&quot;mouseenter.abc&quot;,function()&#123;alert(&quot;abc&quot;)&#125;);</div><div class="line">$(&quot;:button:eq(0)&quot;).unbind(&quot;.abc&quot;);</div></pre></td></tr></table></figure></p>
<p>trigger 和 triggerHandler也可以使用命名空间：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(&quot;:button:eq(0)&quot;).bind(&quot;click.abc&quot;,function()&#123;alert(&quot;abc&quot;)&#125;);</div><div class="line">$(&quot;:button:eq(0)&quot;).triggerHandler(&quot;click.abc&quot;);</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> jQuery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jQuery事件---阻止冒泡和默认行为]]></title>
      <url>/2017/06/15/jQuery%E4%BA%8B%E4%BB%B6-%E9%98%BB%E6%AD%A2%E5%86%92%E6%B3%A1%E5%92%8C%E9%BB%98%E8%AE%A4%E8%A1%8C%E4%B8%BA/</url>
      <content type="html"><![CDATA[<h1 id="冒泡"><a href="#冒泡" class="headerlink" title="冒泡"></a>冒泡</h1><p>如果在页面中重叠了多个元素，并且重叠的这些元素都绑定了同一个事件，那么就会出现冒泡问题。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">	&lt;div style=&quot;width:300px;height:300px;background-color:skyblue;&quot;&gt;</div><div class="line">		&lt;input type=&quot;button&quot; value=&quot;button&quot;/&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure></p>
<p>如果document、div、input三个元素绑定了同一个事件，就会产生冒泡：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$(document).click(function()&#123;</div><div class="line">	alert(&quot;document&quot;);</div><div class="line">&#125;);</div><div class="line">$(&quot;div&quot;).click(function()&#123;</div><div class="line">	alert(&quot;div&quot;);</div><div class="line">&#125;);</div><div class="line">$(&quot;:button&quot;).click(function()&#123;</div><div class="line">	alert(&quot;button&quot;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>当点击button时，会先弹出button、然后是div、然后是document<br><a id="more"></a></p>
<h1 id="阻止冒泡"><a href="#阻止冒泡" class="headerlink" title="阻止冒泡"></a>阻止冒泡</h1><p><strong>event.stopPropagation()</strong> ： 所有上层的冒泡行为都将被取消<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$(document).click(function()&#123;</div><div class="line">	alert(&quot;document&quot;);</div><div class="line">&#125;);</div><div class="line">$(&quot;div&quot;).click(function(e)&#123;</div><div class="line">	e.stopPropagation();</div><div class="line">	alert(&quot;div&quot;);</div><div class="line">&#125;);</div><div class="line">$(&quot;:button&quot;).click(function(e)&#123;</div><div class="line">	e.stopPropagation();</div><div class="line">	alert(&quot;button&quot;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h1 id="阻止默认行为"><a href="#阻止默认行为" class="headerlink" title="阻止默认行为"></a>阻止默认行为</h1><p>默认行为，常见的是点击超链接时的跳转，表单的提交，鼠标右击的系统菜单等等。<br><strong>preventDefault()</strong>：阻止默认行为</p>
<p>阻止超链接的跳转：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(&quot;a&quot;).click(function(e)&#123;</div><div class="line">	e.preventDefault();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>阻止表单的提交：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(&quot;form:eq(0)&quot;).submit(function(e)&#123;</div><div class="line">	e.preventDefault();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>阻止鼠标右键(contextmenu表示鼠标右键事件)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$( document ).contextmenu(function(e) &#123;</div><div class="line">	e.preventDefault();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>PS： contextmenu表示鼠标右键事件，用法与一般事件相同：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(document).bind(&quot;contextmenu&quot;,function()&#123;alert(&quot;鼠标右键&quot;)&#125;);</div><div class="line">// 等效于：</div><div class="line">$(document).contextmenu(function(e) &#123;</div><div class="line">	alert(&quot;鼠标右键&quot;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h1 id="阻止冒泡并阻止默认行为"><a href="#阻止冒泡并阻止默认行为" class="headerlink" title="阻止冒泡并阻止默认行为"></a>阻止冒泡并阻止默认行为</h1><p>同时使用preventDefault()和stopPropagation()函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(&quot;a&quot;).click(function(e)&#123;</div><div class="line">	e.preventDefault();</div><div class="line">	e.stopPropagation();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>或者，直接使用return false<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(&quot;a&quot;).click(function(e)&#123;</div><div class="line">	return false;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h1 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h1><p>目前已经用过的函数有两个：</p>
<ul>
<li>preventDefault() 取消某个元素的默认行为</li>
<li>stopPropagation() 取消事件冒泡</li>
</ul>
<p>另外还有几个相关的函数：</p>
<ul>
<li><strong>isDefaultPrevented() ： </strong> 判断是否调用了 preventDefault()方法</li>
<li><strong>isPropagationStopped() ： </strong> 判断是否调用了 stopPropagation()方法</li>
<li><strong>stopImmediatePropagation() ： </strong> 取消事件冒泡，并取消该事件的后续事件处理函数</li>
<li><strong>isImmediatePropagationStopped() ： </strong> 判断是否调用了 stopImmediatePropagation()方法</li>
</ul>
<h2 id="stopImmediatePropagation"><a href="#stopImmediatePropagation" class="headerlink" title="stopImmediatePropagation()"></a>stopImmediatePropagation()</h2><p>取消冒泡，并阻止后续事件。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$(&quot;:submit&quot;).click(function(e)&#123;</div><div class="line">	e.stopImmediatePropagation();</div><div class="line">	//e.stopPropagation();</div><div class="line"></div><div class="line">	alert(&quot;1&quot;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(&quot;:submit&quot;).click(function()&#123;</div><div class="line">	alert(&quot;2&quot;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>如果使用stopPropagation()那么会取消冒泡，但是仍然后弹出两次。如果使用stopImmediatePropatation()那么不但会取消冒泡，还会取消后续绑定的事件。</p>
]]></content>
      
        <categories>
            
            <category> jQuery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jQuery事件对象---常见属性]]></title>
      <url>/2017/06/15/jQuery%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1-%E5%B8%B8%E8%A7%81%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<h1 id="event对象常见属性"><a href="#event对象常见属性" class="headerlink" title="event对象常见属性"></a>event对象常见属性</h1><table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">type</td>
<td style="text-align:center">获取这个事件的事件类型的<strong>字符串</strong>，例如：click</td>
</tr>
<tr>
<td style="text-align:center">target</td>
<td style="text-align:center">获取与事件绑定的 DOM 元素</td>
</tr>
<tr>
<td style="text-align:center">data</td>
<td style="text-align:center">获取事件调用时的额外数据</td>
</tr>
<tr>
<td style="text-align:center">relatedTarget</td>
<td style="text-align:center">获取移入移出目标前所在的元素</td>
</tr>
<tr>
<td style="text-align:center">currentTarget</td>
<td style="text-align:center">获取冒泡前触发的 DOM 元素，等同与 this</td>
</tr>
<tr>
<td style="text-align:center">pageX/pageY</td>
<td style="text-align:center">获取相对于页面原点的水平/垂直坐标</td>
</tr>
<tr>
<td style="text-align:center">screenX/screenY</td>
<td style="text-align:center">获取显示器屏幕位置的水平/垂直坐标(非 jQuery 封装)</td>
</tr>
<tr>
<td style="text-align:center">clientX/clientY</td>
<td style="text-align:center">获取相对于页面可见部分的水平/垂直坐标(非 jQuery 封装)</td>
</tr>
<tr>
<td style="text-align:center">result</td>
<td style="text-align:center">获取上一个相同事件的返回值</td>
</tr>
<tr>
<td style="text-align:center">timeStamp</td>
<td style="text-align:center">获取事件触发的时间戳（字符串）</td>
</tr>
<tr>
<td style="text-align:center">which</td>
<td style="text-align:center">获取鼠标的左中右键(1,2,3)，或获取键盘按键</td>
</tr>
<tr>
<td style="text-align:center">altKey/shiftKey/ctrlKey/metaKey</td>
<td style="text-align:center">判断在点击的同时是否按下了 alt、shift、ctrl键</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h1 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h1><ul>
<li><strong>target 获得触发元素的DOM（点击的元素）</strong></li>
<li><strong>currentTarget得到的是监听元素的DOM（绑定的元素）</strong></li>
</ul>
<p>对于样式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;div style=&quot;width:300px;height:300px;background-color:skyblue;&quot;&gt;</div><div class="line">	&lt;span style=&quot;width:100px;height:100px;background-color:yellow;display:block&quot;&gt;&lt;/span&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">	$(&quot;div:eq(0)&quot;).bind(&quot;mouseover&quot;,function(event)&#123;</div><div class="line">	//	alert(event);			// [object Object]</div><div class="line">	//	alert(event.type);		// click</div><div class="line">	//	alert(event.target);	// 点击的元素	[object HTMLSpanElement]/[object HTMLDivElement]</div><div class="line">	//	alert(event.currentTarget);	// 总是div	[object HTMLDivElement]</div><div class="line">		alert(event.relatedTarget);</div><div class="line">	&#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>用鼠标进入事件模拟三种target的效果：</p>
<p><strong>target:</strong></p>
<p><img src="http://i4.piimg.com/584041/d107c45ca55bd2f0.jpg" alt=""></p>
<p><strong>currentTarget:</strong></p>
<p><img src="http://i4.piimg.com/584041/92622f2fd31d2f9a.jpg" alt=""></p>
<p><strong>relatedTarget:</strong></p>
<p><img src="http://i4.piimg.com/584041/eceaa05149cdb580.jpg" alt=""></p>
<h1 id="data"><a href="#data" class="headerlink" title="data"></a>data</h1><p>通过 event.data 获取额外数据，可以是数字、字符串、数组、对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(&quot;:button:eq(1)&quot;).bind(&quot;click&quot;,&quot;sss&quot;,function(e)&#123;</div><div class="line">	alert(e.data);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="pageY、screenY、clienty"><a href="#pageY、screenY、clienty" class="headerlink" title="pageY、screenY、clienty"></a>pageY、screenY、clienty</h1><ul>
<li><strong>pageY</strong> 是对于页面顶端的距离，包括未显示的部分，所以常用于滚动条，随着滚动条改变</li>
<li><strong>screenY</strong> 是对于屏幕顶端的距离，不随滚动条改变</li>
<li><strong>clienty</strong> 是相对于页面可见部分顶端的距离，不随滚动条改变</li>
</ul>
<p><img src="http://i4.piimg.com/584041/f2a963e0d9da4748.jpg" alt="page"></p>
<h1 id="which"><a href="#which" class="headerlink" title="which"></a>which</h1><p>判断鼠标点击,不过实验的时候好像只有左键有效 <strong>(/= _ =)/~┴┴</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(&quot;:text&quot;).click(function(e)&#123;</div><div class="line">	alert(e.which);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>判断键盘按下的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(&quot;:text&quot;).keydown(function(e)&#123;</div><div class="line">	alert(e.which);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> jQuery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jQuery事件---常见事件的绑定与解除]]></title>
      <url>/2017/06/15/jQuery%E4%BA%8B%E4%BB%B6-%E5%B8%B8%E8%A7%81%E4%BA%8B%E4%BB%B6%E7%9A%84%E7%BB%91%E5%AE%9A%E4%B8%8E%E8%A7%A3%E9%99%A4/</url>
      <content type="html"><![CDATA[<h1 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h1><p>常见事件有：click dbclick mousedown mouseup mousemove mouseover mouseout change select submit keydown keypress keyup blur focus load resize scroll error… </p>
<h1 id="jquery-用-bind-为元素绑定事件"><a href="#jquery-用-bind-为元素绑定事件" class="headerlink" title="jquery 用 bind() 为元素绑定事件"></a>jquery 用 bind() 为元素绑定事件</h1><p>bind(type,[data],function)</p>
<ul>
<li>type 表示事件类型，是事件名称的字符串</li>
<li>data 是<strong>可选</strong>的作为event.data 属性传递一个额外的数据</li>
<li>fn 表示绑定到指定元素的处理函数<a id="more"></a>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(function()&#123;</div><div class="line">	$(&quot;input&quot;).bind(&quot;click&quot;,test);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>将元素与指定函数绑定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(function()&#123;</div><div class="line">	$(&quot;input&quot;).bind(&quot;click&quot;,test);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">function test()&#123;</div><div class="line">	alert(&quot;#&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="可以一次绑定多个事件"><a href="#可以一次绑定多个事件" class="headerlink" title="可以一次绑定多个事件"></a>可以一次绑定多个事件</h2><ul>
<li>bind(‘evevt1 event2 ‘，function()) 绑定多个事件</li>
</ul>
<p>同时绑定鼠标移入和移出事件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(function()&#123;</div><div class="line">	$(&quot;input&quot;).bind(&quot;mouseover mouseout&quot;,function()&#123;</div><div class="line">		$(&quot;div&quot;).html(function(index,value)&#123;</div><div class="line">			return (value+index);</div><div class="line">		&#125;);</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="通过键值对"><a href="#通过键值对" class="headerlink" title="通过键值对"></a>通过键值对</h2><p>双引号可加可不加<br><em>bind({<br>    event1:function(){},<br>    event2:function(){}<br>})</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$(function()&#123;</div><div class="line">	$(&quot;input&quot;).bind(&#123;</div><div class="line">		mouseover:function()&#123;</div><div class="line">			alert(&quot;移入&quot;);</div><div class="line">		&#125;,</div><div class="line">		mouseout:function()&#123;</div><div class="line">			alert(&quot;移出&quot;);</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="删除事件"><a href="#删除事件" class="headerlink" title="删除事件"></a>删除事件</h1><ul>
<li>unbind() 删除当前元素所有的事件</li>
<li>unlind(‘事件’) 删除指定事件</li>
<li>unbind(‘事件’,fn) 删除事件绑定的特定函数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$(function()&#123;</div><div class="line">	$(&quot;input&quot;).bind(&#123;</div><div class="line">		mouseover:function()&#123;</div><div class="line">			alert(&quot;移入&quot;);</div><div class="line">		&#125;,</div><div class="line">		mouseout:function()&#123;</div><div class="line">			alert(&quot;移出&quot;);</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">	</div><div class="line">	$(&quot;input&quot;).unbind(&quot;mouseover&quot;);		// 移除mouseover事件</div><div class="line">	$(&quot;input&quot;).unbind();				// 移除改元素的所有事件</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>移出元素上绑定的指定函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(function()&#123;</div><div class="line">	$(&quot;input&quot;).bind(&quot;mouseover&quot;,test);		</div><div class="line">	$(&quot;input&quot;).unbind(&quot;mouseover&quot;,test);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h1 id="简化的事件函数"><a href="#简化的事件函数" class="headerlink" title="简化的事件函数"></a>简化的事件函数</h1><ul>
<li>click(fn) 鼠标click(单击)事件</li>
<li>dblclick(fn) 鼠标dblclick(双击)事件</li>
<li>mousedown(fn) 鼠标mousedown(点击后)事件</li>
<li>mouseup(fn) 鼠标mouseup(点击弹起)事件</li>
<li>mouseover(fn) 鼠标mouseover(鼠标移入)事件</li>
<li>mouseout(fn) 鼠标mouseout(鼠标移出)事件</li>
<li>mousemove(fn) 鼠标mousemove(鼠标移动)事件</li>
<li>mouseenter(fn) 鼠标mouseenter(鼠标穿过)事件</li>
<li>mouseleave(fn) 鼠标mouseleave(鼠标穿出)事件</li>
<li>keydown(fn) 键盘keydown(键盘按下)事件</li>
<li>keyup(fn) 键盘keyup(键盘按下弹起)事件</li>
<li>keypress(fn) 键盘keypress(键盘按下)事件</li>
<li>unload(fn) 文档 当卸载本页面时绑定一个要执行的函数</li>
<li>resize(fn) 文档resize(文档改变大小)事件</li>
<li>scroll(fn) 文档scroll(滚动条拖动)事件</li>
<li>focus(fn) 表单 focus(焦点激活)事件</li>
<li>blur(fn) 表单blur(焦点丢失)事件</li>
<li>focusin(fn) 表单 触发每一个匹配元素的 focusin(焦点激活)事件</li>
<li>focusout(fn) 表单 触发每一个匹配元素的 focusout(焦点丢失)事件</li>
<li>select(fn) <strong>表单</strong>select(文本选定)事件</li>
<li>change(fn) <strong>表单</strong>change(值改变)事件</li>
<li>submit(fn) 表单submit(表单提交)事件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 单击事件</div><div class="line">	$(&quot;input&quot;).click(function()&#123;</div><div class="line">		alert(&quot;#&quot;);</div><div class="line">	&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 双击事件</div><div class="line">	function dbtest()&#123;</div><div class="line">		alert(&quot;双击&quot;);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	$(&quot;input&quot;).dblclick(dbtest);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 鼠标按下弹起事件</div><div class="line">	$(&quot;input&quot;).mousedown(function()&#123;</div><div class="line">		alert(&quot;down&quot;);</div><div class="line">	&#125;);</div><div class="line">	$(&quot;input&quot;).mouseup(function()&#123;</div><div class="line">		alert(&quot;up&quot;)</div><div class="line">	&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 浏览器窗口改变大小时触发</div><div class="line">	$(window).resize(function()&#123;</div><div class="line">		alert(&quot;resize&quot;);</div><div class="line">	&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 滚动条事件</div><div class="line">	$(document).scroll(function()&#123;</div><div class="line">		alert(&quot;scroll&quot;);</div><div class="line">	&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// b表单文本被选中事件</div><div class="line">	$(&quot;textarea&quot;).select(function()&#123;</div><div class="line">		alert(&quot;文本被选中&quot;);</div><div class="line">	&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 表单文本被更改事件</div><div class="line">	$(&quot;textarea&quot;).change(function()&#123;</div><div class="line">		alert(&quot;文本被更改&quot;);</div><div class="line">	&#125;);</div></pre></td></tr></table></figure>
<h1 id="鼠标进入-移出事件"><a href="#鼠标进入-移出事件" class="headerlink" title="鼠标进入/移出事件"></a>鼠标进入/移出事件</h1><ul>
<li>mouseover/mouseout  鼠标移入移出（<strong>穿过子元素会触发</strong>）</li>
<li>mouseenter/mouseleave 鼠标穿入/穿出(<strong>穿过子元素不会触发</strong>)</li>
</ul>
<p><img src="http://i2.muimg.com/584041/44e900625395455c.png" alt="鼠标事件"></p>
<p>给大div绑定鼠标移入和移出事件，当鼠标进入绿色div时，会输出两个0.因为移入绿色div时同时发生了移出大div和移入小div，会触发两次事件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$(&quot;div&quot;).eq(0).mouseover(function()&#123;</div><div class="line">	$(&quot;.p&quot;).eq(0).html(function (index,value)&#123;</div><div class="line">		return value + index ;</div><div class="line">	&#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">$(&quot;div&quot;).eq(0).mouseout(function()&#123;</div><div class="line">	$(&quot;.p&quot;).eq(0).html(function (index,value)&#123;</div><div class="line">		return value + index ;</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h1 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h1><p>keydown/keyup 和 heypress</p>
<ul>
<li>keydown/keyup 返回键码keyCode</li>
<li>keypress 返回字符编码 charCode<br>如果类型错误会返回0</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$(window).keyup(function()&#123;alert(event.keyCode);&#125;);</div><div class="line">$(window).keypress(function()&#123;alert(event.charCode);&#125;);</div></pre></td></tr></table></figure>
<h1 id="获得焦点事件"><a href="#获得焦点事件" class="headerlink" title="获得焦点事件"></a>获得焦点事件</h1><ul>
<li>focus() / flur()  光标激活和丢失（当前元素，不包含子元素）</li>
<li>focusin() / focusout() 光标激活和丢失（包含子元素）</li>
<li><strong>PS: </strong><br><strong>1. 只用于表单</strong><br><strong>2. 点击控件时才会转移焦点</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(&quot;.div&quot;).focusin(function()&#123;</div><div class="line">	$(&quot;.p&quot;).html(function(index,value)&#123;</div><div class="line">		return value+&quot;1&quot;;</div><div class="line">	&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="复合事件"><a href="#复合事件" class="headerlink" title="复合事件"></a>复合事件</h1><ul>
<li>ready(function) 当DOM加载完毕时触发</li>
<li><strong>hover（fn1,fn2） 移入和移出时在fn1 和fn2 之间切换</strong>（mouseenter和mouseleaver的结合）</li>
<li>toggle(fn1,fn2,fn3)已弃用。在多个样式之间切换</li>
</ul>
<h2 id="hover"><a href="#hover" class="headerlink" title="hover()"></a>hover()</h2><p>移入和移出时改变颜色：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(&quot;div&quot;).hover(function()&#123;</div><div class="line">	$(this).css(&quot;background-color&quot;,&quot;red&quot;);</div><div class="line">&#125;,function()&#123;</div><div class="line">	$(this).css(&quot;background-color&quot;,&quot;blue&quot;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="toggle"><a href="#toggle" class="headerlink" title="toggle()"></a>toggle()</h2><p>自己完成toggle() ，每次点击切换一个样式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var count = 0 ; </div><div class="line">$(&quot;.div&quot;).click(function()&#123;</div><div class="line">	if(count == 0 )&#123;</div><div class="line">		$(this).css(&quot;background-color&quot;,&quot;red&quot;);</div><div class="line">		count ++ ;</div><div class="line">	&#125;</div><div class="line">	else if (count == 1 )&#123;</div><div class="line">		$(this).css(&quot;background-color&quot;,&quot;green&quot;);</div><div class="line">		count ++ ;</div><div class="line">	&#125;</div><div class="line">	else if (count == 2)&#123;</div><div class="line">		$(this).css(&quot;background-color&quot;,&quot;yellow&quot;);</div><div class="line">		count=0 ;</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><strong>PS : div默认是不能选中的，使用鼠标点击无法获得焦点，如果需要获得焦点可以加上tabindex=”1”属性</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;div&quot; style=&quot;width:200px;height:200px; background-color:yellow;&quot; tabindex=&quot;1&quot;&gt;</div><div class="line">	&lt;input type=&quot;text&quot; class=&quot;input&quot;/&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> jQuery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[查找和关闭占用特定端口的进程]]></title>
      <url>/2017/06/15/%E6%9F%A5%E6%89%BE%E5%92%8C%E5%85%B3%E9%97%AD%E5%8D%A0%E7%94%A8%E7%89%B9%E5%AE%9A%E7%AB%AF%E5%8F%A3%E7%9A%84%E8%BF%9B%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>今天写博客时发现hexo s 无效，于是怀疑4000端口被其他软件占用了。在网上查了一下。可以在cmd中使用netstat -ano查看正在使用的端口：</p>
<p> <img src="http://i4.piimg.com/584041/5d584378633d76cd.jpg" alt=""></p>
<p>但是结果很多，如果一个一个找的话很麻烦，于是可以用netstat -ano | finderstr 4000 查看占用400端口使用情况：</p>
<p><img src="http://i4.piimg.com/584041/0e9edf017b89baae.jpg" alt=""></p>
<p>可以看到此时有一个程序占用了4000端口，改程序的PID为9892，然后用tasklist | findstr 9892查看该程序的详细信息：</p>
<p><img src="http://i4.piimg.com/584041/4bc484fff7b01a4a.jpg" alt=""></p>
<p>结果显示是node.exe占用了4000端口，其实node.exe就是hexo的服务器，之前的进程我已经关掉了。<br>那么接下来需要关掉这个进程的话需要打开任务管理器，在PID一栏找到对应的进程然后关闭就可以了。有的进程需要管理员权限才能关闭。此时需要用管理员权限打开任务管理器。<br>在开始菜单中输入taskmgr，然后右键管理员身份打开，然后在关闭对应的服务就可以了</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2017-06-03]]></title>
      <url>/2017/06/03/2017-06-03/</url>
      <content type="html"><![CDATA[<p></p><p align="center">无人为孤岛，一书一世界</p><p></p>
<div align="center"><br><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1496491355284&amp;di=0f7dd2d6b30b5fed27d7a08d4ce520d1&amp;imgtype=0&amp;src=http%3A%2F%2Ffdfs.xmcdn.com%2Fgroup24%2FM04%2F27%2F86%2FwKgJMFhrsgjRQPQPAAV0lWZ519M874.jpg" alt=""><br></div>

<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="0" height="0" src="http://music.163.com/outchain/player?type=2&auto=1&id=139227&height=66"></iframe>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jQuery入门---对象、创建节点]]></title>
      <url>/2017/04/24/jQuery%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h1 id="导入jQuery"><a href="#导入jQuery" class="headerlink" title="导入jQuery"></a>导入jQuery</h1><p>使用jQuery只需加上一行代码：<br><code>&lt;script src=&quot;JS/jquery-2.1.1.min.js&quot;&gt;&lt;/script&gt;</code><br>jQuery中用\$选择元素，\$ 代表jQuery对象，二者是相等的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert($ == jQuery);    // true</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h1 id="加载完成后自动执行"><a href="#加载完成后自动执行" class="headerlink" title="加载完成后自动执行"></a>加载完成后自动执行</h1><p>在js中常见<br><code>window.onload=function(){...}</code><br>表示在页面加载完成后执行，jQuery也有类似的方式。具体有三种方式：</p>
<ol>
<li><b>$(document).ready(function(){})</b></li>
<li><b>$(function(){})&nbsp;&nbsp;&nbsp;(1的简写)</b></li>
<li><b>jQuery(function(){})&nbsp;&nbsp;&nbsp;(jQuery等同于\$)</b></li>
</ol>
<p>与js中的onload不同，jQuery不会等待所有元素都加载完成后再执行。执行速度比onload快。</p>
<ul>
<li>window.onload只能加载一次，jQuery可加载多次</li>
</ul>
<h1 id="jQuery对象与dom对象的转换"><a href="#jQuery对象与dom对象的转换" class="headerlink" title="jQuery对象与dom对象的转换"></a>jQuery对象与dom对象的转换</h1><p>获取jQuery对象</p>
<blockquote>
<p>var $t1 = $(‘#t1’);</p>
</blockquote>
<h2 id="jQuery转换成dom"><a href="#jQuery转换成dom" class="headerlink" title="jQuery转换成dom"></a>jQuery转换成dom</h2><ol>
<li>$t1[0]</li>
<li>$t1.get(0)</li>
</ol>
<h2 id="dom对象转换为jQuery"><a href="#dom对象转换为jQuery" class="headerlink" title="dom对象转换为jQuery"></a>dom对象转换为jQuery</h2><p>var $t1 = $(t1); </p>
<h1 id="jQuery创建新节点"><a href="#jQuery创建新节点" class="headerlink" title="jQuery创建新节点"></a>jQuery创建新节点</h1><h2 id="1-使用标签名-对象"><a href="#1-使用标签名-对象" class="headerlink" title="1.使用标签名+对象"></a>1.使用标签名+对象</h2><p><em>$(“&lt;标签名&gt;”,保存属性的对象);</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var jqobj = $(&quot;&lt;div&gt;&quot;,&#123;&apos;id&apos;:&apos;test&apos;,&apos;class&apos;:&apos;test&apos;&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="2-直接使用字符串，字符串中包含所需的所有信息"><a href="#2-直接使用字符串，字符串中包含所需的所有信息" class="headerlink" title="2.直接使用字符串，字符串中包含所需的所有信息"></a>2.直接使用字符串，字符串中包含所需的所有信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var jqobj = $(&quot;&lt;div class=&apos;test&apos; id=&apos;test&apos;&gt;jQuery对象&lt;/div&gt;&quot;);</div></pre></td></tr></table></figure>
<p>需要追加到父节点后才能生效：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var jqobj = $(&quot;&lt;div&gt;&quot;,&#123;&apos;id&apos;:&apos;test&apos;,&apos;class&apos;:&apos;test&apos;&#125;);</div><div class="line">jqobj.html(&quot;jQuery对象&quot;);</div><div class="line">$(&quot;body&quot;).append(jqobj);</div></pre></td></tr></table></figure></p>
<h1 id="对象辨析"><a href="#对象辨析" class="headerlink" title="对象辨析"></a>对象辨析</h1><p>导入jQuery后，现在总共有3种对象，不总结一下很容易弄混。具体如下：</p>
<ol>
<li>jQuery对象</li>
<li>DOM对象</li>
<li>js对象</li>
</ol>
<p>jQuery对象是jQuery封装的对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(jQuery);		// function (a,b)&#123;return new n.fn.init(a,b)&#125;</div></pre></td></tr></table></figure></p>
<p>通过jQuery的get获得DOM对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alert($(&quot;body&quot;)[0]);	// [object HTMLBodyElement]</div><div class="line">alert(document.getElementsByTagName(&quot;body&quot;)[0]);	//	[object HTMLBodyElement]</div></pre></td></tr></table></figure></p>
<p>原生的js对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">			&quot;data&quot;:1,</div><div class="line">			&quot;name&quot;:&quot;tom&quot;</div><div class="line">		&#125;;</div><div class="line">		alert(obj);	//  [object Object]</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> jQuery </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ServletContext]]></title>
      <url>/2017/04/17/Servlet-ServletCotntext/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>WEB容器在启动时，它会为每个WEB应用程序都创建一个对应的ServletContext对象，它代表当前web应用。可以通过ServletConfig.getServletContext方法获得ServletContext对象。<br>由于一个WEB应用中的所有Servlet共享同一个ServletContext对象，因此Servlet对象之间可以通过ServletContext对象来实现通讯。<br>  <a id="more"></a></p>
<h1 id="getRequestDispatcher"><a href="#getRequestDispatcher" class="headerlink" title="getRequestDispatcher()"></a>getRequestDispatcher()</h1><p>参考这篇博客<br><a href="http://twilight.net.cn/2017/04/09/Servlet-%E4%BD%BF%E7%94%A8RequestDispathcher%E8%B0%83%E6%B4%BE%E8%AF%B7%E6%B1%82/" target="_blank" rel="external">http://twilight.net.cn/2017/04/09/Servlet-%E4%BD%BF%E7%94%A8RequestDispathcher%E8%B0%83%E6%B4%BE%E8%AF%B7%E6%B1%82/</a></p>
<h1 id="getResourcePaths-“url”"><a href="#getResourcePaths-“url”" class="headerlink" title="getResourcePaths(“url”)"></a>getResourcePaths(“url”)</h1><p>url 必须以/开头<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for(String temp : getServletContext().getResourcePaths(&quot;/&quot;))&#123;</div><div class="line">	output.println(temp);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>效果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/JSP-useBean/</div><div class="line">/FormTest.html</div><div class="line">/AutoLogin.jsp</div><div class="line">/Hello.jsp</div><div class="line">/Cookie/</div><div class="line">/Main.html</div><div class="line">/CheckNum/</div><div class="line">/META-INF/</div><div class="line">/index.jsp</div><div class="line">/test.html</div><div class="line">/WEB-INF/</div><div class="line">/includes/</div><div class="line">/JSP-Include/</div><div class="line">/AutoLogin.html</div><div class="line">/error.jsp</div></pre></td></tr></table></figure></p>
<p>获取webRoot下的所有图片<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">protected void doGet(HttpServletRequest req, HttpServletResponse resp)</div><div class="line">		throws ServletException, IOException &#123;</div><div class="line">	resp.setContentType(&quot;text/html;charset=utf-8&quot;);</div><div class="line">	PrintWriter output = resp.getWriter();</div><div class="line">	ServletContext context = getServletContext();</div><div class="line">	</div><div class="line">	// &apos;/&apos; 表示 WebRoot</div><div class="line">	for(String temp : context.getResourcePaths(&quot;/img&quot;))&#123;</div><div class="line">		temp = temp.substring(temp.indexOf(&quot;/&quot;)+1);</div><div class="line">		output.println(&quot;&lt;img src=&apos;&quot;+temp+&quot;&apos; width=200 height=200&gt;&lt;/img&gt;&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="getResourceAsStream-“url”"><a href="#getResourceAsStream-“url”" class="headerlink" title="getResourceAsStream(“url”)"></a>getResourceAsStream(“url”)</h1><p>获取文件流，返回类型是InputStream，URL必须以”/“开头</p>
<p>向页面中发送图片<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">protected void doGet(HttpServletRequest req, HttpServletResponse resp)</div><div class="line">		throws ServletException, IOException &#123;</div><div class="line">	ServletContext context = req.getServletContext();</div><div class="line">	// 获取输入流</div><div class="line">	InputStream input = context.getResourceAsStream(&quot;/img/P70114-101325.jpg&quot;);</div><div class="line">	// 获取输出流</div><div class="line">	OutputStream output = resp.getOutputStream();</div><div class="line">	byte [] data = new byte [1024];</div><div class="line">	int len = 0 ;</div><div class="line">	while(-1 != (len = input.read(data)))&#123;</div><div class="line">		output.write(data,0,len);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	output.close();</div><div class="line">	input.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这是从服务器端向客户端发送文件，如果需要接受客户端发来的文件，具体操作方式请参考<br><a href="http://blog.csdn.net/twilight_karl/article/details/69917866" target="_blank" rel="external">Servlet 上传文件</a></p>
]]></content>
      
        <categories>
            
            <category> Servlet </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Servlet </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Servlet ServletConfig]]></title>
      <url>/2017/04/15/Servlet-ServletConfig/</url>
      <content type="html"><![CDATA[<h1 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h1><p>获取初始化参数</p>
<ul>
<li>getServletName(“name”) 根据名称返回值</li>
<li>getServletNames() 返回所有name，返回类型是Enumeration<string></string></li>
</ul>
<p>在init()中有两种方式获取参数</p>
<p>web.xml中的参数如下：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;servlet&gt;</div><div class="line">&lt;servlet-name&gt;ServletConfigTest&lt;/servlet-name&gt;</div><div class="line">&lt;servlet-class&gt;servletConfig.ServletConfigTest&lt;/servlet-class&gt;</div><div class="line">&lt;init-param&gt;</div><div class="line">	&lt;param-name&gt;name&lt;/param-name&gt;</div><div class="line">	&lt;param-value&gt;tom&lt;/param-value&gt;</div><div class="line">&lt;/init-param&gt;</div><div class="line">&lt;init-param&gt;</div><div class="line">	&lt;param-name&gt;password&lt;/param-name&gt;</div><div class="line">	&lt;param-value&gt;123&lt;/param-value&gt;</div><div class="line">&lt;/init-param&gt;</div><div class="line">&lt;/servlet&gt;</div></pre></td></tr></table></figure></p>
<p>1：直接调用getInitParameter();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public void init() throws ServletException &#123;	</div><div class="line">	userName = getInitParameter(&quot;name&quot;);</div><div class="line">	password = getInitParameter(&quot;password&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2: 先用getInitParameterConfig()获取ServletConfig对象，再用ServletConfig对象获取参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public void init() throws ServletException &#123;</div><div class="line">	ServletConfig config = getServletConfig();</div><div class="line">	userName = config.getInitParameter(&quot;name&quot;);</div><div class="line">	password = config.getInitParameter(&quot;password&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>也可以使用@WebServlet设置初始化参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@WebServlet(</div><div class="line">		urlPatterns=&quot;/ServletConfigTest&quot;,</div><div class="line">		initParams=&#123;</div><div class="line">				@WebInitParam(name=&quot;name&quot;,value=&quot;Jerry&quot;),</div><div class="line">				@WebInitParam(name=&quot;password&quot;,value=&quot;456&quot;)</div><div class="line">		&#125;</div><div class="line">		)</div></pre></td></tr></table></figure></p>
<p>如果同时设置了@WebServlet和web.xml那么web.xml中的参数会覆盖掉@WebServlet。必须有相同的name<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@WebServlet(</div><div class="line">		name=&quot;ServletConfigTest&quot;,		// name与web.xml 中相同，被web.xml覆盖</div><div class="line">		urlPatterns=&quot;/ServletConfigTest&quot;,</div><div class="line">		initParams=&#123;</div><div class="line">				@WebInitParam(name=&quot;name&quot;,value=&quot;Jerry&quot;),</div><div class="line">				@WebInitParam(name=&quot;password&quot;,value=&quot;456&quot;)</div><div class="line">		&#125;</div><div class="line">		)</div></pre></td></tr></table></figure></p>
<p><strong>PS:</strong><br><strong>HttpServlet 继承了genericServlet，而genericServlet同时集成了Servlet, ServletConfig。genericServlet是通用的Servlet，对于http请求要使用httpSetvlet</strong></p>
]]></content>
      
        <categories>
            
            <category> Servlet </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Servlet </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JSP jsp:useBean介绍]]></title>
      <url>/2017/04/15/JSP-jsp-useBean%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<h1 id="创建JavaBean实例："><a href="#创建JavaBean实例：" class="headerlink" title="创建JavaBean实例："></a>创建JavaBean实例：</h1><p>&lt;jsp:useBean id=”name” class=”” scope=”page/session/request/application”/&gt;</p>
<p>id为类的另一个名字，class指定具体的类，scope表示范围，在scope的范围内查找是否有指定的属性存在<br><a id="more"></a></p>
<p>JavaBean需要满足以下条件：</p>
<ul>
<li>必须实现java.io.Serializable 接口</li>
<li>没有公开(public)的类变量</li>
<li>具有无参数的构造函数</li>
<li>具有公开的set和get方法</li>
</ul>
<h1 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h1><ol>
<li>指定参数和值<br><code>&lt;jsp:setProperty name=&quot;user&quot;  property=&quot;password&quot; value=&quot;123&quot; /&gt;</code></li>
<li>将指定参数的值赋值给JavaBean的属性<br><code>&lt;jsp:setProperty name=&quot;user&quot; param=&quot;pwd&quot; property=&quot;password&quot; /&gt;</code></li>
<li>通过自省机制自动匹配<br><code>&lt;jsp:setProperty name=&quot;user&quot; property=&quot;*&quot; /&gt;</code></li>
</ol>
<p>使用jsp:useBean的目的是减少Script的使用<br>一个典型的javabean: JavaBean.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">package Bean;</div><div class="line">import java.io.Serializable;</div><div class="line">public class JavaBean implements Serializable &#123;</div><div class="line">	private String name ;</div><div class="line">	private String password;</div><div class="line">	</div><div class="line">	</div><div class="line">	public JavaBean(String name, String password) &#123;</div><div class="line">		super();</div><div class="line">		this.name = name;</div><div class="line">		this.password = password;</div><div class="line">	&#125;</div><div class="line">	public JavaBean() &#123;</div><div class="line">		super();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public String getName() &#123;</div><div class="line">		return name;</div><div class="line">	&#125;</div><div class="line">	public void setName(String name) &#123;</div><div class="line">		this.name = name;</div><div class="line">	&#125;</div><div class="line">	public String getPassword() &#123;</div><div class="line">		return password;</div><div class="line">	&#125;</div><div class="line">	public void setPassword(String password) &#123;</div><div class="line">		this.password = password;</div><div class="line">	&#125; </div><div class="line">	public boolean isValid()&#123;</div><div class="line">		if(name.equals(&quot;tom&quot;) &amp;&amp; password.equals(&quot;123&quot;))&#123;</div><div class="line">			return true;</div><div class="line">		&#125;</div><div class="line">		return false;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用jsp:Bean标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</div><div class="line">&lt;jsp:useBean id=&quot;user&quot; class=&quot;Bean.JavaBean&quot; scope=&quot;page&quot; /&gt;</div><div class="line">&lt;jsp:setProperty name=&quot;user&quot; property=&quot;*&quot; /&gt;</div><div class="line"></div><div class="line">&lt;html&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">  &lt;font color=&apos;red&apos;&gt;</div><div class="line">    &lt;jsp:getProperty property=&quot;name&quot; name=&quot;user&quot;/&gt;</div><div class="line">    &lt;/font&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>web容器翻译后的Java代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Bean.JavaBean user = null;</div><div class="line">user = (Bean.JavaBean) _jspx_page_context.getAttribute(&quot;user&quot;, javax.servlet.jsp.PageContext.PAGE_SCOPE);</div><div class="line">if (user == null)&#123;</div><div class="line">  user = new Bean.JavaBean();</div><div class="line">  _jspx_page_context.setAttribute(&quot;user&quot;, user, javax.servlet.jsp.PageContext.PAGE_SCOPE);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>采用传统方式的做法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*,Bean.JavaBean&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</div><div class="line">&lt;html&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;%</div><div class="line">    JavaBean user = (JavaBean)request.getAttribute(&quot;user&quot;);</div><div class="line">    if(user == null)&#123;</div><div class="line">    	user = new JavaBean();</div><div class="line">    &#125;</div><div class="line">    user.setName(request.getParameter(&quot;name&quot;));</div><div class="line">    user.setPassword(request.getParameter(&quot;pwd&quot;));</div><div class="line">    if(user.isValid())&#123;</div><div class="line">    	out.println(&quot;登录成功&quot;);</div><div class="line">    &#125;else&#123;</div><div class="line">    	out.println(&quot;登录失败&quot;);</div><div class="line">    &#125;</div><div class="line">    %&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> JSP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JSP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JSP入门---常见标签元素的使用]]></title>
      <url>/2017/04/10/JSP%E5%85%A5%E9%97%A8-%E5%B8%B8%E8%A7%81%E6%A0%87%E7%AD%BE%E5%85%83%E7%B4%A0%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="Scriptlet元素"><a href="#Scriptlet元素" class="headerlink" title="Scriptlet元素"></a>Scriptlet元素</h1><p><em>&lt;% %&gt;</em>  用于运行Java代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;%	</div><div class="line">	out.println(&quot;hello&quot;);</div><div class="line">%&gt;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="声明（Decalaration）元素"><a href="#声明（Decalaration）元素" class="headerlink" title="声明（Decalaration）元素"></a>声明（Decalaration）元素</h1><p><strong>&lt;%! %&gt;</strong><br>可以声名函数和变量，作为Servlet的方法和成员。声明的变量会被翻译到_jspService()方法的外面（类成员，方法）</p>
<p><code>&lt;% %&gt;</code> 也可以声明变量,声明的变量是_jspService()一部分，是一个局部变量</p>
<p>由于对象只创建一次，当不断访问以下代码时，data的值会递增，但是data2的值始终为1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;%! int data = 1; %&gt;		// 成员变量</div><div class="line"></div><div class="line">&lt;%</div><div class="line">int data2 = 1;			// 方法中的局部变量</div><div class="line">out.println(data++);		</div><div class="line">out.println(data2++);</div><div class="line">%&gt;</div></pre></td></tr></table></figure></p>
<h1 id="表达式元素"><a href="#表达式元素" class="headerlink" title="表达式元素"></a>表达式元素</h1><p><strong>&lt;%= %&gt;</strong></p>
<ul>
<li><strong>字符串变量，或者可以转换成字符串的表达式</strong> </li>
<li><strong>“=” 号的前面不能有空格</strong> </li>
<li><strong>表达式后不加分号</strong> </li>
<li><strong>&lt;%=date %&gt;翻译时会被转换为out.println(date);</strong> </li>
</ul>
<p>传入参数Bgcolor，会显示指定颜色的文字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;% </div><div class="line">		String color = request.getParameter(&quot;Bgcolor&quot;);</div><div class="line">%&gt;</div><div class="line"></div><div class="line">&lt;font color=&lt;%=color %&gt; size=5 &gt;&lt;%=color %&gt;&lt;/font&gt;</div></pre></td></tr></table></figure></p>
<p><strong>PS:当输出的&lt;%或%&gt;时，&lt;% 用 &amp;lt;% 表示，%&gt;用%&amp;gt; 或者 %\&gt;表示</strong></p>
<h1 id="注释元素"><a href="#注释元素" class="headerlink" title="注释元素"></a>注释元素</h1><p>JSP注释:  &lt;%– –%&gt;<br>java注释: &lt;%//   %&gt;<br>java注释: &lt;%/<em> </em>/%&gt;</p>
<h1 id="指示-Directive-元素"><a href="#指示-Directive-元素" class="headerlink" title="指示(Directive)元素"></a>指示(Directive)元素</h1><p><strong>&lt;%@ Directive属性=”属性值”%&gt;</strong><br>常见的指示类型有page、include、taglib</p>
<h2 id="page属性"><a href="#page属性" class="headerlink" title="page属性"></a>page属性</h2><p>常见属性值如下:</p>
<ul>
<li><strong>import=”java.util.*” 相当于Java中的import</strong></li>
<li><strong>contentType=”Text/html;charset=utf-8” 指定contentType</strong></li>
<li><strong>pageEncoding=”UTF-8” 指定转义时的编码</strong></li>
<li><strong>language=”java” 默认是Java</strong></li>
<li><strong>errorPage=”error.jsp” 指定发生错误时的跳转页面</strong></li>
<li><strong>iserrorPage=”true/false” 错误页面</strong></li>
</ul>
<h3 id="可以使用多条指令语句单独设置每个属性，也可以使用同一条指令语句设置该指令的多个属性"><a href="#可以使用多条指令语句单独设置每个属性，也可以使用同一条指令语句设置该指令的多个属性" class="headerlink" title="可以使用多条指令语句单独设置每个属性，也可以使用同一条指令语句设置该指令的多个属性"></a>可以使用多条指令语句单独设置每个属性，也可以使用同一条指令语句设置该指令的多个属性</h3><blockquote>
<p>&lt;%@ page contentType=“text/html;charset=utf-8” %&gt;<br>&lt;%@ page import=“java.io.<em>”  %&gt;<br>&lt;%@ page contentType=”text/html;charset=utf-8”  import=”java.io.</em>“  %&gt;</p>
</blockquote>
<p><strong>&lt;%@ page import=”java.util.Date, java.io.*”  %&gt; 等同于</strong></p>
<blockquote>
<p> &lt;%@ page import=“java.util.Date”  %&gt;<br> &lt;%@ page import=“java.io.*”  %&gt;</p>
</blockquote>
<p><strong>&lt;%@ page contentType=“text/html;charset=UTF-8” %&gt; 会被翻译为：</strong></p>
<blockquote>
<p>response.setContentType(“text/html;charset=UTF-8”)</p>
</blockquote>
<ul>
<li><strong>在使用errorPage时，不是所有的错误都能转发。只有抛出异常的错误才能被转发</strong></li>
<li><strong>错误页面必须要指定isErrorPage=”true”</strong></li>
</ul>
<h3 id="错误转发案例"><a href="#错误转发案例" class="headerlink" title="错误转发案例"></a>错误转发案例</h3><p>发生错误的页面 hello.jsp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page errorPage=&quot;error.jsp&quot; %&gt;</div><div class="line"></div><div class="line"> &lt;% String color = request.getParameter(&quot;Bgcolor&quot;); %&gt;</div><div class="line"> &lt;font color=&lt;%=color %&gt; size=5 &gt;&lt;%=color %&gt;&lt;/font&gt;</div><div class="line"> &lt;%Date today = new Date(); %&gt;</div><div class="line"> &lt;font color=&lt;%=color %&gt;&gt;今天是&lt;%=today %&gt;&lt;/font&gt;</div><div class="line">	</div><div class="line"> &lt;%--抛出异常--%&gt;</div><div class="line"> &lt;%=1/0 %&gt;</div></pre></td></tr></table></figure></p>
<p>错误页面 error.jsp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page isErrorPage=&quot;true&quot;%&gt;</div></pre></td></tr></table></figure></p>
<h2 id="include"><a href="#include" class="headerlink" title="include"></a>include</h2><p><strong>&lt;%@include file=”URL” %&gt;</strong><br>在翻译时将其他jsp文件包括到当前文件中。翻译后只会生成一个Servlet。</p>
<p><strong>不能向URL中用GET方法传递参数，例如：</strong></p>
<blockquote>
<p>&lt;%@ include file=”includes/Include_Header.jsp?Bgcolor=red” %&gt;    错误</p>
</blockquote>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>将页面分成3部分，使用include将头部和尾部包括进来</p>
<p>IncludeTest.jsp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</div><div class="line">&lt;%@ include file=&quot;includes/Include_Header.jsp&quot; %&gt;</div><div class="line">    &lt;p&gt;这是页面主体&lt;/p&gt;</div><div class="line">&lt;%@ include file=&quot;includes/Include_Footer.jsp&quot; %&gt;</div></pre></td></tr></table></figure></p>
<p>Include_Header.jsp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page pageEncoding=&quot;UTF-8&quot;%&gt;</div><div class="line">&lt;%</div><div class="line">String path = request.getContextPath();</div><div class="line">String basePath = request.getScheme()+&quot;://&quot;+request.getServerName()+&quot;:&quot;+request.getServerPort()+path+&quot;/&quot;;</div><div class="line">%&gt;</div><div class="line"></div><div class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;</div><div class="line">&lt;html&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;base href=&quot;&lt;%=basePath%&gt;&quot;&gt;</div><div class="line">    </div><div class="line">    &lt;title&gt;My JSP &apos;IncludeTest.jsp&apos; starting page&lt;/title&gt;</div><div class="line">    </div><div class="line">	&lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&gt;</div><div class="line">	&lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&gt;</div><div class="line">	&lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&gt;    </div><div class="line">	&lt;meta http-equiv=&quot;keywords&quot; content=&quot;keyword1,keyword2,keyword3&quot;&gt;</div><div class="line">	&lt;meta http-equiv=&quot;description&quot; content=&quot;This is my page&quot;&gt;</div><div class="line">	&lt;!--</div><div class="line">	&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;styles.css&quot;&gt;</div><div class="line">	--&gt;</div><div class="line"></div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">  &lt;p&gt;这是页面的Header部分&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>Include_Footer.jsp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page pageEncoding=&quot;UTF-8&quot;%&gt;</div><div class="line">&lt;p&gt;这是页面的Footer部分&lt;/p&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>显示结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">这是页面的Header部分</div><div class="line">这是页面主体</div><div class="line">这是页面的Footer部分</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> JSP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JSP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Servlet 使用RequestDispathcher调派请求]]></title>
      <url>/2017/04/09/Servlet-%E4%BD%BF%E7%94%A8RequestDispathcher%E8%B0%83%E6%B4%BE%E8%AF%B7%E6%B1%82/</url>
      <content type="html"><![CDATA[<h1 id="RequestDispathcher"><a href="#RequestDispathcher" class="headerlink" title="RequestDispathcher"></a>RequestDispathcher</h1><p>使用HttpServletRequest的getRequestDispatcher(“Servlet-URL”) 获得对象</p>
<blockquote>
<p>RequestDispatcher dispatch = req.getRequestDispatcher(“/Test1”);</p>
</blockquote>
<h2 id="include"><a href="#include" class="headerlink" title="include()"></a>include()</h2><p>将另一个servlet包括进进目前的操作流程中。<br><a id="more"></a><br>以下代码会输出<br><em>Dispatch</em><br><em>Test1 </em><br><em>Done</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/Dispatch</div><div class="line">	protected void doGet(HttpServletRequest req, HttpServletResponse resp)</div><div class="line">			throws ServletException, IOException &#123;</div><div class="line">			</div><div class="line">		PrintWriter output = resp.getWriter();</div><div class="line">		output.println(&quot;Dispatch&lt;br/&gt;&quot;);</div><div class="line">		RequestDispatcher dispatch = req.getRequestDispatcher(&quot;/Test1&quot;);</div><div class="line">		dispatch.include(req, resp);;</div><div class="line">		</div><div class="line">		output.println(&quot;Done&lt;br/&gt;&quot;);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/Test1</div><div class="line">	protected void doGet(HttpServletRequest req, HttpServletResponse resp)</div><div class="line">			throws ServletException, IOException &#123;</div><div class="line">			PrintWriter output = resp.getWriter();</div><div class="line">			output.println(&quot;Test1&lt;br/&gt;&quot;);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h2 id="forward"><a href="#forward" class="headerlink" title="forward()"></a>forward()</h2><p>将请求转发给另一个servlet，只是服务器端的转发，对于客户端并无任何影响</p>
<p><strong>PS:调用forWard()之前不能有任何相应确认，如果设置了相应但还未确认(例如println()后还没有flush())，则所有相应会被忽略.如果已经有相应确认，会报出<i>java.lang.IllegalStateException<i>异常</i></i></strong></p>
<p>以下代码会转向Test1，而忽略之forward之前的println输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">PrintWriter output = resp.getWriter();</div><div class="line">output.println(&quot;Dispatch&lt;br/&gt;&quot;);</div><div class="line">RequestDispatcher dispatch = req.getRequestDispatcher(&quot;/Test1&quot;);</div><div class="line">dispatch.forward(req, resp);;</div><div class="line"></div><div class="line">output.println(&quot;Done&lt;br/&gt;&quot;);</div></pre></td></tr></table></figure></p>
<p>以下代码会直接报错，因为已经有相应确认<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">PrintWriter output = resp.getWriter();</div><div class="line">output.println(&quot;Dispatch&lt;br/&gt;&quot;);</div><div class="line">output.flush();	</div><div class="line">RequestDispatcher dispatch = req.getRequestDispatcher(&quot;/Test1&quot;);</div><div class="line">dispatch.forward(req, resp);;</div><div class="line"></div><div class="line">output.println(&quot;Done&lt;br/&gt;&quot;);</div></pre></td></tr></table></figure></p>
<h2 id="请求范围属性"><a href="#请求范围属性" class="headerlink" title="请求范围属性"></a>请求范围属性</h2><p>当调派请求的过程中有需要共享的属性，可以使用HttpServletRequest的方法</p>
<ol><br><li> <strong>setAttribute() 指定名称与对象</strong> </li><br><li> <strong>getAttribute() 指定名称获取对象</strong> </li><br><li> <strong>getAttributeNames() 获取所有属性名称</strong> </li><br><li> <strong>removeAttribute() 移除属性</strong> </li><br></ol>


<p>以下代码的Test1通过getAttribute(“name”)获取到name的集合，需要通过强制转换后才能使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/Dispatch</div><div class="line">	protected void doGet(HttpServletRequest req, HttpServletResponse resp)</div><div class="line">			throws ServletException, IOException &#123;</div><div class="line">		PrintWriter output = resp.getWriter();</div><div class="line">		List&lt;String&gt; list = new  ArrayList&lt;&gt;();</div><div class="line">		list.add(&quot;Tom&quot;);</div><div class="line">		list.add(&quot;jerry&quot;);</div><div class="line"></div><div class="line">		req.setAttribute(&quot;name&quot;, list);		// 传入字符串和对象</div><div class="line"></div><div class="line">		RequestDispatcher dispatch = req.getRequestDispatcher(&quot;/Test1&quot;);</div><div class="line">		dispatch.forward(req, resp);</div><div class="line">		</div><div class="line">		output.println(&quot;Done&lt;br/&gt;&quot;);</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/Test1</div><div class="line">	protected void doGet(HttpServletRequest req, HttpServletResponse resp)</div><div class="line">			throws ServletException, IOException &#123;</div><div class="line">			PrintWriter output = resp.getWriter();</div><div class="line">			output.println(&quot;Test1&lt;br/&gt;&quot;);</div><div class="line">			List name = (List)req.getAttribute(&quot;name&quot;);</div><div class="line">			output.println(name.get(1)+&quot;&lt;/br/&gt;&quot;);</div><div class="line">			</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h1 id="sendRedirect"><a href="#sendRedirect" class="headerlink" title="sendRedirect()"></a>sendRedirect()</h1><p>要求浏览器重新请求一个URL，客户端的地址栏会改变<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">protected void doGet(HttpServletRequest req, HttpServletResponse resp)</div><div class="line">		throws ServletException, IOException &#123;</div><div class="line">	String url = req.getParameter(&quot;url&quot;);</div><div class="line">	resp.sendRedirect(url);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在跳转之前不可以有相应被确认,否则会产生<em>java.lang.IllegalStateException</em> 异常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">protected void doGet(HttpServletRequest req, HttpServletResponse resp)</div><div class="line">		throws ServletException, IOException &#123;</div><div class="line">	PrintWriter output = resp.getWriter();</div><div class="line">	output.println(&quot;2333&quot;);</div><div class="line">	output.flush();</div><div class="line">	String url = req.getParameter(&quot;url&quot;);</div><div class="line">	resp.sendRedirect(url);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>跳转时可以附带参数,方式类比于GET方式的URL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String name = req.getParameter(&quot;name&quot;);</div><div class="line">PrintWriter output = resp.getWriter();</div><div class="line">resp.sendRedirect(&quot;http://localhost:8080/Test/Redirect_Para?name=&quot;+name);</div></pre></td></tr></table></figure></p>
<p>PS:</p>
<font color="red"><b><br><ol><br><li>只能用转向方式来访问WEB-INF目录下的JSP,不用采用重定向的方式请求该目录里面的任何资源</li><br><li>同一个请求周期中，HttpServletResponse的getWriter()与getOutputStream()只能择一使用，否则会丢出IllegalStateException</li><br><ol><br><b></b></ol></ol></b></font>



]]></content>
      
        <categories>
            
            <category> Servlet </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Servlet </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Servlet  上传文件]]></title>
      <url>/2017/04/08/Servlet%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h1 id="更改form的enctype属性"><a href="#更改form的enctype属性" class="headerlink" title="更改form的enctype属性"></a>更改form的enctype属性</h1><p>enctype属性默认是application/x-www-form-urlencoded，发送文件时需要更改为multipart/form-data</p>
<blockquote>
<form action="/File/Photo" method="post" enctype="multipart/form-data">

</form></blockquote>
<p>发送一个图片时的http请求如下：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">POST /File/Photo HTTP/1.1</div><div class="line">Accept: text/html, application/xhtml+xml, */*</div><div class="line">X-HttpWatch-RID: 90747-10177</div><div class="line">Referer: http://localhost:8080/File/photo.html</div><div class="line">Accept-Language: zh-CN</div><div class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko</div><div class="line">Content-Type: multipart/form-data; boundary=---------------------------7e179f4038a</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Host: localhost:8080</div><div class="line">Content-Length: 566814</div><div class="line">DNT: 1</div><div class="line">Connection: Keep-Alive</div><div class="line">Cache-Control: no-cache</div><div class="line"></div><div class="line">-----------------------------7e179f4038a</div><div class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;D:\鍥剧墖\Camera Roll\b.jpg&quot;</div><div class="line">Content-Type: image/jpeg</div></pre></td></tr></table></figure></p>
<p>表单如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;form action=&quot;/File/Photo_Stream&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</div><div class="line">	&lt;input type=&quot;file&quot; name=&apos;file&apos; /&gt;&lt;br/&gt;</div><div class="line">	&lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure></p>
<h1 id="使用Part对象接受文件"><a href="#使用Part对象接受文件" class="headerlink" title="使用Part对象接受文件"></a>使用Part对象接受文件</h1><p>Part对象也可以获取http头部信息<br><strong>part.getHeader(“name”) ：</strong>获取头部信息中name对应的值<br><strong>part.write(fileName) ：</strong> 将part对象写入到文件中，文件的路径在 @MultipartConfig中配置</p>
<p>getHeader(“Content-Disposition”)的结果是：</p>
<blockquote>
<p><em>form-data; name=”file”; filename=”D:\鍥剧墖\Camera Roll\b.jpg”</em><br>因此可以根据Content-Disposition属性的值获取文件的名称</p>
</blockquote>
<h2 id="getPart-name"><a href="#getPart-name" class="headerlink" title="getPart(name)"></a>getPart(name)</h2><p>Part对象不需要通过构造函数创建，可以通过req.getPart()方法返回对应的文件对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Part part = req.getPart(&quot;file&quot;);</div><div class="line">// 获取文件名</div><div class="line">String header = part.getHeader(&quot;Content-Disposition&quot;);</div><div class="line">String fileName = header.substring(header.indexOf(&quot;filename=\&quot;&quot;)+10,header.length()-1);</div><div class="line">fileName = fileName.substring(3);</div><div class="line">// 写入到文件</div><div class="line">part.write(fileName);</div></pre></td></tr></table></figure></p>
<h2 id="getParts"><a href="#getParts" class="headerlink" title="getParts()"></a>getParts()</h2><p>getParts() 返回所有的文件对象，返回类型是Collection<part>集合。需要遍历集合才能处理所有文件</part></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Collection&lt;Part&gt; part = req.getParts();</div><div class="line">for(Part temp :part)&#123;</div><div class="line">	String header = temp.getHeader(&quot;Content-Disposition&quot;);</div><div class="line">	// 获取文件名</div><div class="line">	String fileName = header.substring(header.indexOf(&quot;filename=\&quot;&quot;)+10,header.length()-1);</div><div class="line">	output.println(&quot;&lt;br/&gt;Content-Disposition:&quot;+header);</div><div class="line">	output.println(&quot;&lt;br/&gt;fileName:&quot;+fileName);</div><div class="line">	fileName = fileName.substring(3);</div><div class="line">	// 写入到文件</div><div class="line">	temp.write(fileName);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="MultipartConfig"><a href="#MultipartConfig" class="headerlink" title="@MultipartConfig"></a>@MultipartConfig</h1><p>Tomcat中必须标注@MultipartConfig才能使用 Part</p>
<p>@MultipartConfig可以设置上传文件的相关信息：</p>
<ol><br><li><strong>fileSizeThreshold : 上传文件大小的门槛</strong></li><br><li><strong>location :  配置文件的保存位置</strong></li><br><li><strong>maxRequestSize :  设置请求个数，默认值为-1L，表示不限个数</strong></li><br></ol>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 表示上传的文件在write()时保存到E盘</div><div class="line">@MultipartConfig(location=&quot;E:/&quot;)</div></pre></td></tr></table></figure>
<p>也可以在web.xml中配置@MultipartConfig<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;servlet&gt;</div><div class="line">    &lt;servlet-name&gt;Photo&lt;/servlet-name&gt;</div><div class="line">    &lt;servlet-class&gt;Files.Photo&lt;/servlet-class&gt;</div><div class="line">    &lt;multipart-config&gt;</div><div class="line">    	&lt;location&gt;E:/&lt;/location&gt;</div><div class="line">    &lt;/multipart-config&gt;</div><div class="line">&lt;/servlet&gt;</div><div class="line">  </div><div class="line">&lt;servlet-mapping&gt;</div><div class="line">    &lt;servlet-name&gt;Photo&lt;/servlet-name&gt;</div><div class="line">    &lt;url-pattern&gt;/Photo&lt;/url-pattern&gt;</div><div class="line">&lt;/servlet-mapping&gt;</div></pre></td></tr></table></figure></p>
<h1 id="使用Part的InputStream"><a href="#使用Part的InputStream" class="headerlink" title="使用Part的InputStream"></a>使用Part的InputStream</h1><p>可以使用Part的getInputStream()方法返回一个输入流，再使用传统的方式将输入流输出到文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">protected void doGet(HttpServletRequest req, HttpServletResponse resp)</div><div class="line">		throws ServletException, IOException &#123;</div><div class="line">	req.setCharacterEncoding(&quot;utf-8&quot;);</div><div class="line">	resp.setContentType(&quot;text/html;charset=utf-8&quot;);</div><div class="line">	PrintWriter out = resp.getWriter();</div><div class="line">	// 获取part对象</div><div class="line">	Part part = req.getPart(&quot;file&quot;);</div><div class="line">	</div><div class="line">	// 获取输入流</div><div class="line">	InputStream data = part.getInputStream();</div><div class="line">	byte [] temp = new byte [1024];</div><div class="line">	</div><div class="line">	FileOutputStream output = new FileOutputStream(new File(&quot;E:/s.jpg&quot;));</div><div class="line">	int len = 0 ;</div><div class="line">	while(-1 != (len = data.read(temp)))&#123;</div><div class="line">		output.write(temp, 0, len);</div><div class="line">	&#125;</div><div class="line">	output.flush();</div><div class="line">	output.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考：<br><a href="http://blog.csdn.net/xiaojianpitt/article/details/6856536" target="_blank" rel="external">JonnyWei的专栏</a></p>
]]></content>
      
        <categories>
            
            <category> Servlet </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Servlet </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Servlet入门]]></title>
      <url>/2017/04/06/Servlet%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h1 id="JSP的运行周期："><a href="#JSP的运行周期：" class="headerlink" title="JSP的运行周期："></a>JSP的运行周期：</h1><p>1，加载 ClassLoader<br>2，实例化 调用构造函数创建对象<br>3，初始化 init（ServletConfig）<br>4，处理请求 service() doGet() doPost()<br>5，退出服务 destroy()<br><a id="more"></a><br><strong>PS: 对象只创建一次，init只调用一次，deGet()多次执行</strong></p>
<h1 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h1><table><br><tr><td>response.setContentType(“text/html”);</td><td>设置类型</td></tr><br><tr><td>getParameter();</td><td>获取name对应的第一个值</td></tr><br><tr><td>getParameterValues(“name”);</td><td> 获取所有name为”name”的值（数组）</td></tr><br><tr><td>getParameterNames();</td><td>获取所有name，返回Enumeration对象</td></tr><br><tr><td>getParameterMap()</td><td>返回name-value键值对<string,string []=""></string,string></td></tr><br></table>



<h2 id="使用getParameterNames获取所有name"><a href="#使用getParameterNames获取所有name" class="headerlink" title="使用getParameterNames获取所有name"></a>使用getParameterNames获取所有name</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></div><div class="line">		<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line">	req.setCharacterEncoding(<span class="string">"utf-8"</span>);</div><div class="line">	resp.setContentType(<span class="string">"text/html; charset=utf-8"</span>);</div><div class="line">	</div><div class="line">	PrintWriter out = resp.getWriter();</div><div class="line">	out.println(<span class="string">"&lt;html&gt;&lt;head&gt;&lt;title&gt;BookAdd&lt;/title&gt;&lt;/head&gt;&lt;body&gt;"</span>);</div><div class="line">	out.println(<span class="string">"&lt;table border='1' align='center'&gt;"</span>);</div><div class="line">	</div><div class="line">	Enumeration&lt;String&gt; names = req.getParameterNames();</div><div class="line">	<span class="keyword">while</span>(names.hasMoreElements())&#123;</div><div class="line">		String name = names.nextElement();</div><div class="line">		String [] values = req.getParameterValues(name);</div><div class="line">		</div><div class="line">		out.println(<span class="string">"&lt;/tr&gt;"</span>);</div><div class="line">		out.println(<span class="string">"&lt;td&gt;"</span>+name+<span class="string">"&lt;/td&gt;"</span>);</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(values.length == <span class="number">1</span>)&#123;</div><div class="line">			out.println(<span class="string">"&lt;td&gt;"</span>+values[<span class="number">0</span>]+<span class="string">"&lt;/td&gt;"</span>);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			out.println(<span class="string">"&lt;ul&gt;"</span>);</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; values.length; i++)&#123;</div><div class="line">				out.println(<span class="string">"&lt;li&gt;"</span>+values[i]+<span class="string">"&lt;/li&gt;"</span>);</div><div class="line">			&#125;</div><div class="line">			out.println(<span class="string">"&lt;/ul&gt;"</span>);</div><div class="line">		&#125;</div><div class="line">		out.println(<span class="string">"&lt;/tr&gt;"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	out.println(<span class="string">"&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;"</span>);</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用getParameterMap-获取所有name的键值对"><a href="#使用getParameterMap-获取所有name的键值对" class="headerlink" title="使用getParameterMap()获取所有name的键值对"></a>使用getParameterMap()获取所有name的键值对</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">		<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line"></div><div class="line">	response.setContentType(<span class="string">"text/html charset='utf-8'"</span>);</div><div class="line">	request.setCharacterEncoding(<span class="string">"utf-8"</span>);</div><div class="line">	PrintWriter out = response.getWriter();</div><div class="line">	out.println(<span class="string">"&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"&gt;"</span>);</div><div class="line">	out.println(<span class="string">"&lt;HTML&gt;"</span>);</div><div class="line">	out.println(<span class="string">"  &lt;HEAD&gt;&lt;TITLE&gt;A Servlet&lt;/TITLE&gt;&lt;/HEAD&gt;"</span>);</div><div class="line">	out.println(<span class="string">"  &lt;BODY&gt;"</span>);</div><div class="line">	</div><div class="line">	Map&lt;String,String []&gt; data = request.getParameterMap();</div><div class="line">	Enumeration&lt;String&gt; names = request.getParameterNames();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; data.size() ; i++)&#123;</div><div class="line">		out.println(data.get(names.nextElement())[<span class="number">0</span>]);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	out.print(<span class="string">"    This is "</span>);</div><div class="line">	</div><div class="line">	out.print(<span class="keyword">this</span>.getClass());</div><div class="line">	out.println(<span class="string">", using the POST method"</span>);</div><div class="line">	out.println(<span class="string">"  &lt;/BODY&gt;"</span>);</div><div class="line">	out.println(<span class="string">"&lt;/HTML&gt;"</span>);</div><div class="line">	out.flush();</div><div class="line">	out.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="获取head参数"><a href="#获取head参数" class="headerlink" title="获取head参数"></a>获取head参数</h1><table><br><tr><td>getHeader(name)</td><td>返回返回name对应的值</td></tr><br><tr><td>getHeaders(name)</td><td> 返回enumeration<string></string></td></tr><br><tr><td>getHeaderNames()</td><td>返回http头部信息中的所有name。返回类型是Enumeration<string>迭代器,</string></td></tr><br><tr><td>getIntegerHeader()</td><td>自动转换为int类型</td></tr><br><tr><td>getDateHeader()</td><td>自动转化为date类型</td></tr><br></table> 

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Enumeration&lt;String &gt; headNames = req.getHeaderNames();	// 获取所有name</div><div class="line">while(headNames.hasMoreElements())&#123;</div><div class="line">	String name = headNames.nextElement();</div><div class="line">	out.println(name+&quot;:&quot;+req.getHeader(name)+&quot;&lt;br/&gt;&quot;);  // 用getHeader获取name对应的值</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Servlet </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Servlet </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS-精灵图]]></title>
      <url>/2017/03/24/CSS-%E7%B2%BE%E7%81%B5%E5%9B%BE/</url>
      <content type="html"><![CDATA[<p>之前就发现一些网站吧所有的小图标拼接在一张图片中，但是一直不知道这是怎么做到的，今天特地了解了一下，才知道这种用法叫做精灵图。他的优点是可以减少浏览器请求的次数，把所有图片拼接在一张图中就只需要请求一次，当浏览器需要用到图片时再从大图片中解析。这样可以加快访问的次数。先来看看效果图：<br><a id="more"></a></p>
<p><img src="http://otbrtx8bw.bkt.clouddn.com/%E7%B2%BE%E7%81%B5%E5%9B%BE1.png" alt=""></p>
<p>拼接的图片：<br><img src="http://otbrtx8bw.bkt.clouddn.com/%E7%B2%BE%E7%81%B5%E5%9B%BE2.png" alt=""></p>
<p>他的原理是，先规定好每个小图标的大小，创建一个和小图标大小相同的容器，再通过移动背景图片的方法将大图中需要的部分暴露在这个容器中。就是说这张图片就像被一块布遮住，只是在想要的地方留了一个空，好让背景图片暴露出来，这样只要将将背景图片一道合适的位置就可以只显示我们想要的部分。</p>
<p><img src="http://otbrtx8bw.bkt.clouddn.com/%E7%B2%BE%E7%81%B5%E5%9B%BE3.png" alt=""></p>
<p>具体步骤：<br>1，创建合适大小的容器<br>2，将拼接的大图作为容器的背景，并设置为no-repeat<br>3，改变背景的位置</p>
<p>对于改变背景的位置我们需要知道小图标在大图片的的坐标（以大图的左上角为原点），例如如果小图标在大图中的坐标是(10,20)，那么将背景图片向左移动10px,向上移动20px就可以抵消小图标在大图的位置。<br>获取这个坐标可以用PS中的切片工具，将小图标选择出来后右击选择编辑即可看到小图标的坐标</p>
<p><img src="http://otbrtx8bw.bkt.clouddn.com/%E7%B2%BE%E7%81%B5%E5%9B%BE4.png" alt=""></p>
<p>完整源码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;style&gt;</div><div class="line">		*&#123;</div><div class="line">			margin:0;</div><div class="line">			padding:0;</div><div class="line">		&#125;</div><div class="line">		.div0&#123;</div><div class="line">			margin:10px;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">		.demo1,.demo2,.demo3,.demo4,.demo5,.demo6&#123;</div><div class="line">			display:inline-block;</div><div class="line">			width:17px;</div><div class="line">			height:17px;</div><div class="line">			background-color:transparent;</div><div class="line">			background-image:url(ico.png);</div><div class="line">			background-repeat:no-repeat;</div><div class="line">		&#125;</div><div class="line">		.demo1&#123;	background-position:-38px -37px;&#125;</div><div class="line">		.demo2&#123;	background-position:-62px -37px;&#125;</div><div class="line">		.demo3&#123;	background-position:-86px -37px;&#125;</div><div class="line">		.demo4&#123;	background-position:-110px -37px;&#125;</div><div class="line">		.demo5&#123;	background-position:-134px -37px;&#125;</div><div class="line">		.demo6&#123;	background-position:-159px -37px;&#125;</div><div class="line">		ul&#123;</div><div class="line">			list-style:none;</div><div class="line">		&#125;</div><div class="line">		ul li &#123;</div><div class="line">			margin:10px;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		&lt;/style&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line"></div><div class="line">	&lt;body&gt;</div><div class="line">	&lt;div class=&quot;div0&quot;&gt;</div><div class="line">		&lt;ul&gt;</div><div class="line">			&lt;li&gt;&lt;div class=&quot;demo1&quot;&gt;&lt;/div&gt; 图标1&lt;/li&gt;</div><div class="line">			&lt;li&gt;&lt;div class=&quot;demo2&quot;&gt;&lt;/div&gt; 图标2&lt;/li&gt;</div><div class="line">			&lt;li&gt;&lt;div class=&quot;demo3&quot;&gt;&lt;/div&gt; 图标3&lt;/li&gt;</div><div class="line">			&lt;li&gt;&lt;div class=&quot;demo4&quot;&gt;&lt;/div&gt; 图标4&lt;/li&gt;</div><div class="line">			&lt;li&gt;&lt;div class=&quot;demo5&quot;&gt;&lt;/div&gt; 图标5&lt;/li&gt;</div><div class="line">			&lt;li&gt;&lt;div class=&quot;demo6&quot;&gt;&lt;/div&gt; 图标6&lt;/li&gt;</div><div class="line">		&lt;/ul&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line"></div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript_操作表单]]></title>
      <url>/2017/03/24/javascript-%E6%93%8D%E4%BD%9C%E8%A1%A8%E5%8D%95/</url>
      <content type="html"><![CDATA[<h1 id="获取表单"><a href="#获取表单" class="headerlink" title="获取表单"></a>获取表单</h1><p>1，getElementById()<br>2，getElementsByTagName()<br>3，documents.forms[] 每个form为一个数组元素<br>4，document.forms[‘name’] 通过name获取<br>5，<strong>docment.name</strong> 使用name直接获取。较方便。</p>
<a id="more"></a>
<p>PS:<br>event.preventDefault()：方法将通知 Web 浏览器不要执行与事件关联的默认动作（如果存在这样的动作）<br>IE: </p>
<blockquote>
<p>window.event.returnValue = false;</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function stopDefault(evt)&#123;</div><div class="line">		var e = evt || window.event</div><div class="line">        //非IE</div><div class="line">        if(e &amp;&amp; e.preventDefault)</div><div class="line">          e.preventDefault();</div><div class="line">        //IE</div><div class="line">        else</div><div class="line">          window.event.returnValue = false;</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<p><strong>使用preventDefault() 阻止默认提交行为：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">window.onload = function()&#123;</div><div class="line">var submit = document.forms[0];</div><div class="line">submit.onsubmit = preventDefault;    // 使用所在的表单调用submit函数</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>普通按钮实现提交事件（其他元素也可以）：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var data = document.getElementById(&quot;button&quot;);</div><div class="line">data.onclick = function()&#123;</div><div class="line">	document.forms[0].submit();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="获取表单字段"><a href="#获取表单字段" class="headerlink" title="获取表单字段"></a>获取表单字段</h1><p><strong>elements:</strong>   所有表单控件的集合，非表单控件会被忽略<br><strong>elements.length:</strong>   获取表单控件的数量<br><strong>name:</strong>   获取name属性值<br><strong>type:</strong>   获取控件的type属性，可以更改（不建议修改）<br><strong>form:</strong>   获取所在的form对象<br><strong>value:</strong>   获取表单控件的value值<br><strong>disabled:</strong>   关闭控件<br><strong>focus():</strong>   自动将焦点移入<br><strong>blur():</strong>   自动将焦点移出</p>
<p>也可以通过name获取<br><strong>获取表单控件：</strong>  <strong>document.表单名.表单元素名</strong>    (在表单和控件都有name属性的情况下)<br> <strong>访问值：</strong> <strong>document.表单名.表单元素名.value</strong></p>
<p>事件：<br>blur 失去焦点时触发（鼠标点击）<br>focus 获得焦点时触发<br>change 文本框的文本改变时触发</p>
<blockquote>
<p>也可以使用 elements[“name”] 获取表单控件元素,如果多个元素使用同一个name，则返回一个集合</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">window.onload=function()&#123;</div><div class="line">	var form = document.forms[0].elements;</div><div class="line">	alert(&quot;表单控件的数量: &quot;+form.length);		// 3</div><div class="line">	alert(&quot;name: &quot; +form[0].name);				// input</div><div class="line">	alert(&quot;type: &quot; +form[0].type);				// input</div><div class="line">	alert(&quot;form: &quot; +form[0].form);				// 对象</div><div class="line">	alert(&quot;form[0].value: &quot; +form[0].value);	//twilight</div><div class="line">	form[1].disabled = true;					// 控件被禁用</div><div class="line">	form[0].focus();							// 加载完毕时自动获得焦点		</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>表单如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;form name=&quot;form1&quot; method=&quot;get&quot;&gt;</div><div class="line">	姓名: &lt;input type=&quot;text&quot; name=&quot;input&quot; size=10 /&gt;</div><div class="line">	&lt;input type=&quot;submit&quot; value=&quot;提交&quot; /&gt;</div><div class="line">	&lt;input type=&quot;button&quot; value=&quot;普通按钮&quot; id=&quot;button&quot; /&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure></p>
<h1 id="文本框脚本"><a href="#文本框脚本" class="headerlink" title="文本框脚本"></a>文本框脚本</h1><p>value 获取文本框中的值（HTML DOM）<br>defaultValue 获取默认值<br>select() 选定文本</p>
<p>textarea没有value属性，但是在js中可以用value获取textarea的文本内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function showValue()&#123;</div><div class="line">	var data = document.forms[0].elements[0];</div><div class="line">	alert(data.value);			// 获取文本框中的值</div><div class="line">	alert(data.defaultValue);	// 获取默认值</div><div class="line">	data.select();				// 选定文本框中的文本</div><div class="line">	date.focus();				// 自动获得焦点</div><div class="line">	alert(&quot;文本框的内容：&quot;+document.forms[0].elements[1].value);	// 通过value获得textarea的内容</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="赋值粘贴"><a href="#赋值粘贴" class="headerlink" title="赋值粘贴"></a>赋值粘贴</h1><p>copy 复制时触发<br>cut 剪切时触发<br>paste 粘贴时触发<br>beforecopy 复制前<br>beforecut 剪贴前<br>beforepaste 粘贴前</p>
<p>自动切换焦点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">	&lt;script&gt;</div><div class="line">		window.onload = function()&#123;</div><div class="line">			var form = document.forms[0];</div><div class="line">			var elem = form.elements;</div><div class="line">			elem[0].onkeyup = transform;</div><div class="line">			elem[1].onkeyup = transform;</div><div class="line">			elem[2].onkeyup = transform;</div><div class="line"></div><div class="line">			function transform(evt)&#123;</div><div class="line">				var event = evt || window.event;</div><div class="line">//				alert(this);</div><div class="line">				var maxlength = this.maxLength;</div><div class="line">				var length = this.value.length;</div><div class="line"></div><div class="line">//				alert(maxlength+&quot;:&quot;+length);</div><div class="line">				if(length==maxlength)&#123;</div><div class="line">					for(var i=0;i&lt;form.length;i++)&#123;</div><div class="line">						if(form[i] === this)&#123;</div><div class="line">							form[++i].focus();</div><div class="line">							return;</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line"></div><div class="line">	&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;form&gt;</div><div class="line">	&lt;input type=&quot;text&quot; size=&quot;10&quot; maxlength=&quot;1&quot; /&gt;</div><div class="line">	&lt;input type=&quot;text&quot; size=&quot;10&quot; maxlength=&quot;3&quot; /&gt;</div><div class="line">	&lt;input type=&quot;text&quot; size=&quot;10&quot; maxlength=&quot;5&quot; /&gt;</div><div class="line">	&lt;input type=&quot;text&quot; size=&quot;10&quot; maxlength=&quot;10&quot; /&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<h1 id="下拉选择框"><a href="#下拉选择框" class="headerlink" title="下拉选择框"></a>下拉选择框</h1><p>通过elements获得对象<br><b><br>1，multiple 多选<br>2，selected 判断当前对象是否被选中（由option调用）<br>3，options获取option集合<br>4，value  选项的值<br>5，text 选项标签中的文本<br>6，<em>selectedIndex</em> 选中的索引（从0开始），默认是-1（可改变，会自动定位）（由select对象调用）</b></p>
<blockquote>
<p>options[selectIndex].value 获取选中的value<br></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var form = document.form1;           // 通过name获取表单</div><div class="line">var option = form.school.options;    // 获取select标签下的option对象集合</div><div class="line">alert(option[0].value);              // 获取第一个option对象的value</div><div class="line">alert(form.school.selectedIndex);    // 用selectedIndex获得选中的索引，由表单控件select对象调用</div></pre></td></tr></table></figure>
<p>对于单选下拉框，可以用下面的方式获取选中的对象的值：</p>
<blockquote>
<p>document.form1.schools.value</p>
</blockquote>
<p>但是对于复选下拉框，这种方法无法获得选中的值，schools是select标签上的name，但是对于复选下拉框会返回一个数组，数组内容是所有的option对象的集合</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">alert(document.form1.schools.value);		//可以直接获取单选下拉框中被选择的value，但是多选下拉框不可以</div><div class="line">alert(document.form1.schools[0].value);	//对于复选下拉框，可用select对象获取option的value</div><div class="line">alert(document.form1.schools[0].selected);	//复选下拉框用selected判断是否被选择，而单选按钮用checked判断是否被选择</div></pre></td></tr></table></figure>
<h2 id="添加选项："><a href="#添加选项：" class="headerlink" title="添加选项："></a>添加选项：</h2><p>用构造函数创建对象: </p>
<blockquote>
<p>var option = new Option(“text”,”value”)<br>city.appendChild(option);</p>
</blockquote>
<p>或者：</p>
<blockquote>
<p>add(对象，位置)—–<br>IE :  add(对象,undefined)</p>
</blockquote>
<h2 id="移除选项："><a href="#移除选项：" class="headerlink" title="移除选项："></a>移除选项：</h2><p>remove(index);</p>
<h2 id="互换位置"><a href="#互换位置" class="headerlink" title="互换位置"></a>互换位置</h2><p>insertBefore(对象，对象);</p>
<h1 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h1><p>用 document.myForm.gender 获得单选按钮数组</p>
<p><strong>访问元素的值：</strong>   <strong>document.myForm.gender[索引].value</strong><br><strong>判断是否被选中：</strong>   <strong>document.myForm.gender[索引].checked</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;form name = “myForm” &gt;</div><div class="line">	&lt;input type=“radio” name=“gender” value=“male”/&gt;</div><div class="line">	&lt;input type=“radio” name=“gender” value=“female”/&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML-框架]]></title>
      <url>/2017/03/24/HTML%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<h1 id="frameset"><a href="#frameset" class="headerlink" title="frameset"></a>frameset</h1><p>可以将页面划分为几个不同的区域，用以显示不同的页面,与frame混合使用，类似于select与option的关系。<br>属性：<br><strong>1，cols 列数。</strong>一组用逗号分开的数值（可以用百分比数值，也可以用具体像素值），指定各子窗口的高度<br><strong>2，rows 行数。</strong>一组用逗号分开的数值（可以用百分比数值，也可以用具体像素值），指定各子窗口的宽度<br><strong>3，noresize 固定框架大小</strong>。不可移动</p>
<p>有框架的页面不可与body共同使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;frameset cols=&quot;30%,30%,*&quot;&gt;</div><div class="line">	&lt;frame src = &quot;http://baidu.com&quot;&gt;&lt;/frame&gt;</div><div class="line">	&lt;frame src = &quot;http://www.sohu.com/&quot;&gt;&lt;/frame&gt;</div><div class="line">	&lt;frame src = &quot;http://www.qq.com/&quot;&gt;&lt;/frame&gt;</div><div class="line">&lt;/frameset&gt;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p><img src="http://otbrtx8bw.bkt.clouddn.com/HTML_%E6%A1%86%E6%9E%B61.png" alt="这里写图片描述"></p>
<p>一种导航窗格的效果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;frameset rows=&quot;30%,*&quot;&gt;</div><div class="line">	&lt;frame src=&quot;frame/frame.html&quot;&gt;&lt;/frame&gt;</div><div class="line">	&lt;frameset cols=&quot;30%,*&quot;&gt;</div><div class="line">		&lt;frame src=&quot;frame/left.html&quot;&gt;&lt;/frame&gt;</div><div class="line">		&lt;frame src=&quot;&quot; name=&quot;right&quot;&gt;&lt;/frame&gt;</div><div class="line">	&lt;/frameset&gt;</div><div class="line">&lt;/frameset&gt;</div></pre></td></tr></table></figure></p>
<p><img src="http://otbrtx8bw.bkt.clouddn.com/HTML_%E6%A1%86%E6%9E%B62.png" alt="这里写图片描述"></p>
<p>在链接的target属性中可以写上指定框架的name，这样这个链接打开的页面会显示在指定的框架中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">	&lt;center&gt;</div><div class="line">		&lt;a href=&quot;http://www.baidu.com&quot; target=&quot;right&quot;&gt;百度&lt;/a&gt;&lt;br/&gt;</div><div class="line">		&lt;a href=&quot;http://www.sohu.com/&quot; target=&quot;right&quot;&gt;搜狐&lt;/a&gt;&lt;br/&gt;</div><div class="line">		&lt;a href=&quot;http://www.qq.com&quot; target=&quot;right&quot;&gt;腾讯&lt;/a&gt;&lt;br/&gt;</div><div class="line">	&lt;/center&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> HTML </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[第一次晨跑]]></title>
      <url>/2017/02/21/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%99%A8%E8%B7%91/</url>
      <content type="html"><![CDATA[<p>本学期的第一次晨跑，此时此刻记录下我现在的感觉：很累，从二期到三期我是跑着去的，回来就基本是走回来的了，来回大概花了25分钟，跑完后，腿很疼，浑身不自在，在食堂吃法时也没有胃口。<br>感觉自己的体质还是太差，虽然不知道当时为什么一时冲动选了晨跑，但是现在看来还是很有必要的。听说很多人因为坚持不下来导致晨跑挂科，我不知道我能不能坚持到最后，但是，这第一天还是一个不错的开始。恩，就说这么多</p>
<hr>
<p>2017-6-28日更新<br>好吧，尴尬，这学期的体育课创下了入学以来的最低分，好在还及格了。及格万岁，及格万岁。。。。</p>
<center><br><img src="http://i1.buimg.com/584041/1a40e3ced10a24bd.jpg"><br></center>

]]></content>
      
        <categories>
            
            <category> 日常 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS_overflow-溢出]]></title>
      <url>/2017/02/01/css_%E6%BA%A2%E5%87%BA/</url>
      <content type="html"><![CDATA[<h2 id="overflow-溢出"><a href="#overflow-溢出" class="headerlink" title="overflow 溢出"></a>overflow 溢出</h2><table>
<thead>
<tr>
<th style="text-align:center">值</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">visible</td>
<td style="text-align:center">内容不会被修剪，会呈现在元素框之外。<strong>默认值</strong></td>
</tr>
<tr>
<td style="text-align:center">hidden</td>
<td style="text-align:center">内容会被修剪，并且其余内容是不可见的。</td>
</tr>
<tr>
<td style="text-align:center">scroll</td>
<td style="text-align:center">内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</td>
</tr>
<tr>
<td style="text-align:center">auto</td>
<td style="text-align:center">如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</td>
</tr>
<tr>
<td style="text-align:center">inherit</td>
<td style="text-align:center">规定应该从父元素继承 overflow 属性的值。</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h2 id="判断IE版本"><a href="#判断IE版本" class="headerlink" title="判断IE版本"></a>判断IE版本</h2><p><strong><!--[if 条件 版本]>显示<![endif]--></strong></p>
<p>不等于：[if !ie 8]<br>小于：[if lt ie 5.5]<br>大于：[if gt ie 5]<br>小于或等于：[if lte ie 6]<br>大于或等于：[if gte IE 7]<br>大于和小于之间：[if (gt ie 5)&amp;(lt ie 7)]<br>或：[if(ie 6)|(ie 7)]</p>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS_定位]]></title>
      <url>/2017/01/31/CSS-%E5%AE%9A%E4%BD%8D/</url>
      <content type="html"><![CDATA[<h2 id="position属性"><a href="#position属性" class="headerlink" title="position属性"></a>position属性</h2><blockquote>
<p><strong>absolute：</strong> 生成<strong>绝对定位</strong>的元素，相对于 static 定位以外的第一个父元素进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。<br><a id="more"></a><br><strong>fixed：</strong> 生成<strong>绝对定位</strong>的元素，相对于浏览器窗口进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。<br><strong>relative：</strong> 生成<strong>相对定位</strong>的元素，相对于其正常位置进行定位。因此，”left:20” 会向元素的 LEFT 位置添加 20 像素。<br><strong>static：</strong> 默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。<br><strong>inherit：</strong> 规定应该从父元素继承 position 属性的值。 </p>
</blockquote>
<h3 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h3><p><em>设置为相对定位的元素框会偏移某个距离。元素仍然保持其未定位前的形状，它原本所占的空间仍保留。</em><br><strong>position:relative;</strong></p>
<blockquote>
<p>将 top 设置为 100px，框出现在在原位置顶部下面 100 像素的地方。<br>将 left 设置为 50 px，那么会在元素左边创建 50 像素的空间，也就是将元素向右移动。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">			.relative_left&#123;</div><div class="line">				position:relative;</div><div class="line">				left:50px;</div><div class="line">			&#125;</div><div class="line">			.relative_top&#123;</div><div class="line">				position:relative;</div><div class="line">				top:100px;</div><div class="line">			&#125;</div><div class="line">			div&#123;</div><div class="line">				background:yellow;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"relative_left"</span>&gt;</span> 这是一个相对定位的段落，left:50<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个普通段落<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"relative_top"</span>&gt;</span> 这是一个相对定位的段落，top:100px<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://otbrtx8bw.bkt.clouddn.com/css_%E5%AE%9A%E4%BD%8D1_2.png" alt=""></p>
<h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><p><strong>绝对定位的元素的位置相对于最近的已定位祖先元素，如果元素没有已定位的祖先元素，那么它的位置相对于最初的包含块。</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">			.absolute&#123;</div><div class="line">				position:absolute;</div><div class="line">				left:200px;</div><div class="line">				top:200px;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"absolute"</span>&gt;</span>这是一个绝对定位的段落,他的位置是相对于原点(200,200)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"position:absolute;left:100px;top:100px;"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"absolute"</span>&gt;</span>这是一个绝对定位的段落，他相对于div的位置是(200,200),实际位置应该是(300,300)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://otbrtx8bw.bkt.clouddn.com/css_%E5%AE%9A%E4%BD%8D3.png" alt=""></p>
<p><em>所以绝对定位的位置也是相对的，相对于父元素的位置</em></p>
<h3 id="z-index-属性"><a href="#z-index-属性" class="headerlink" title="z-index 属性"></a>z-index 属性</h3><p><em>z-index 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。</em><br><em>定位元素沿 z 轴的位置，z 轴定义为垂直延伸到显示区的轴。如果为正数，则离用户更近，为负数则表示离用户更远。</em><br><strong>元素可拥有负的 z-index 属性值。</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">			.z-index&#123;</div><div class="line">				position:absolute;</div><div class="line">				left:10px;</div><div class="line">				z-index:-1;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">img</span>  <span class="attr">class</span>=<span class="string">"z-index"</span> <span class="attr">src</span>=<span class="string">"素材/1.png"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个普通段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://otbrtx8bw.bkt.clouddn.com/css_%E5%AE%9A%E4%BD%8D4.png" alt=""></p>
<h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><p>可能的值：<br>|值|描述|<br>|:—-:|:—–:|<br>|<strong>left：</strong> |向左浮动|<br>|<strong>right：</strong> |向右浮动|<br>|<strong>none：</strong> |不浮动，默认值|<br>|<strong>inherit：</strong>| 继承|</p>
<h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p><em>clear 属性规定元素的哪一侧不允许其他浮动元素。</em></p>
<table>
<thead>
<tr>
<th style="text-align:center">值</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">left</td>
<td style="text-align:center">在左侧不允许浮动元素。</td>
</tr>
<tr>
<td style="text-align:center">right</td>
<td style="text-align:center">在右侧不允许浮动元素。</td>
</tr>
<tr>
<td style="text-align:center">both</td>
<td style="text-align:center">在左右两侧均不允许浮动元素。</td>
</tr>
<tr>
<td style="text-align:center">none</td>
<td style="text-align:center">默认值。允许浮动元素出现在两侧。</td>
</tr>
<tr>
<td style="text-align:center">inherit</td>
<td style="text-align:center">规定应该从父元素继承 clear 属性的值。</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">			.a&#123;</div><div class="line">				float:left;</div><div class="line">				clear:both;</div><div class="line">				width:200;</div><div class="line">				height:200;</div><div class="line">				background-color:green;</div><div class="line">			&#125;</div><div class="line">			.b&#123;</div><div class="line">				float:left;</div><div class="line">				clear:both;</div><div class="line">				width:200;</div><div class="line">				height:200;</div><div class="line">				background-color:blue;</div><div class="line">			&#125;</div><div class="line">			.d&#123;</div><div class="line">				float:left;</div><div class="line">				clear:both;</div><div class="line">				width:200;</div><div class="line">				height:200;</div><div class="line">				background-color:gray;</div><div class="line">			&#125;</div><div class="line">		&lt;/style&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line">	&lt;body&gt;</div><div class="line">	&lt;div class=&quot;a&quot;&gt;&lt;/div&gt;</div><div class="line">	&lt;div class=&quot;b&quot;&gt;&lt;/div&gt;</div><div class="line">	&lt;div class=&quot;d&quot;&gt;&lt;/div&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><img src="http://otbrtx8bw.bkt.clouddn.com/css_%E5%AE%9A%E4%BD%8D5.png" alt=""></p>
<p>如果需要完成以下的效果，可以在第二段之前加上一个外边距，将第二段挤到下方区域<br><img src="http://otbrtx8bw.bkt.clouddn.com/css_%E5%AE%9A%E4%BD%8D6.png" alt=""></p>
<p>当div中的元素都是浮动的时，因为内部元素不占据空间，所以div会变得非常小，并且不可见，为了看到div的效果，需要加上一个看不见的clear标记<br>效果如图：<br><img src="http://otbrtx8bw.bkt.clouddn.com/css_%E5%AE%9A%E4%BD%8D7.png" alt=""></p>
<p>不过，还有一种法法可以避免这种问题，就是讲div进行浮动，这样div中就会显示出真实的大小。但是这样会影响下一个元素的样式。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--使用没有意义的clear元素--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">			.news &#123;</div><div class="line">				 background-color: yellow;</div><div class="line">				 border: solid 1px black;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			.news img &#123;</div><div class="line">				float: left;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			.news p &#123;</div><div class="line">				 float: right;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"news"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"素材/1.png"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>some text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!--没有意义的标记，但是可以看到浮动的div--&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"clear:both"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="display显示属性"><a href="#display显示属性" class="headerlink" title="display显示属性"></a>display显示属性</h2><p><em>定义建立布局时元素生成的显示框类型</em></p>
<p>可能的值：</p>
<blockquote>
<p><strong>none:</strong> 此元素不会被显示。<br><strong>block:</strong> 此元素将显示为块级元素，此元素前后会带有换行符。<br><strong>inline:</strong> 此元素会被显示为内联元素，元素前后没有换行符。<strong>默认</strong>。<br><strong>inline-block:</strong> 行内块元素。（CSS2.1 新增的值）<br><strong>list-item:</strong> 此元素会作为列表显示。<br><strong>run-in:</strong> 此元素会根据上下文作为块级元素或内联元素显示。<br><strong>compact:</strong> CSS 中有值 compact，不过由于缺乏广泛支持，已经从 CSS2.1 中删除。<br><strong>marker:</strong> CSS 中有值 marker，不过由于缺乏广泛支持，已经从 CSS2.1 中删除。<br><strong>table:</strong> 此元素会作为块级表格来显示（类似 &lt;table&gt;），表格前后带有换行符。<br><strong>inline-table:</strong> 此元素会作为内联表格来显示（类似&lt;table&gt;），表格前后没有换行符。<br><strong>table-row-group: </strong>此元素会作为一个或多个行的分组来显示（类似 &lt;tbody&gt;）。<br><strong>table-header-group:</strong> 此元素会作为一个或多个行的分组来显示（类似 &lt;thead&gt;）。<br><strong>table-footer-group:</strong> 此元素会作为一个或多个行的分组来显示（类似 &lt;tfoot&gt;）。<br><strong>table-row: </strong>此元素会作为一个表格行显示（类似 &lt;tr&gt;）。<br><strong>table-column-group:</strong> 此元素会作为一个或多个列的分组来显示（类似 &lt;colgroup&gt;）。<br><strong>table-column: </strong> 此元素会作为一个单元格列显示（类似 &lt;col&gt;）<br><strong>table-cell:</strong> 此元素会作为一个表格单元格显示（类似 &lt;td&gt; 和 &lt;th&gt;）<br><strong>table-caption: </strong>此元素会作为一个表格标题显示（类似 &lt;caption&gt;）<br><strong>inherit:</strong> 规定应该从父元素继承 display 属性的值。 </p>
</blockquote>
<p><strong>常见的块级元素有 DIV, FORM, TABLE, P, PRE, H1~H6, DL, OL, UL 等。</strong><br><strong>常见的内联元素有 SPAN, A, STRONG, EM, LABEL, INPUT, SELECT, TEXTAREA, IMG, BR 等。</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">		.s&#123;</div><div class="line">			display:block;</div><div class="line">		&#125;</div><div class="line">		.s2&#123;</div><div class="line">			display:inline;</div><div class="line">		&#125;</div><div class="line">		p&#123;</div><div class="line">			background:green;</div><div class="line">		&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span> &gt;</span>这是一个普通的段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"s"</span>&gt;</span>这是一个块级段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"s2"</span>&gt;</span>这是一个内联段落<span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://otbrtx8bw.bkt.clouddn.com/css_%E5%AE%9A%E4%BD%8D8.png" alt=""><br>可见p元素是一个块级元素</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">		.s&#123;</div><div class="line">			display:block;</div><div class="line">		&#125;</div><div class="line">		.s2&#123;</div><div class="line">			display:inline;</div><div class="line">		&#125;</div><div class="line">		span&#123;</div><div class="line">			background:green;</div><div class="line">		&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">span</span> &gt;</span>这是一个普通的段落<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"s"</span>&gt;</span>这是一个块级段落<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"s2"</span>&gt;</span>这是一个内联段落<span class="tag">&lt;<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一个普通段落<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://otbrtx8bw.bkt.clouddn.com/css_%E5%AE%9A%E4%BD%8D9.png" alt=""></p>
<p><strong>块级段落前后会自带换行，而内联元素不会，他们会显示在一行</strong><br><strong>内联元素不能定义宽度</strong><br><strong>inline-block与block的区别在于inline-block可以控制大小，而且显示时像内联元素一样没有换行，排列在同一行中。</strong></p>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS_列表]]></title>
      <url>/2017/01/25/CSS-%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h2 id="list-style-type"><a href="#list-style-type" class="headerlink" title="list-style-type"></a>list-style-type</h2><p>改变列表项的标志。以下的所有的标志类型：</p>
<p>none 无标记<br>disc 实心圆，默认<br>circle 空心圆<br>square 方块<br>decimal 数字 <a id="more"></a><br>decimal-leading-zero 0开头的数字标记。(01, 02, 03, 等。)<br>lower-roman 小写罗马数字(i, ii, iii, iv, v, 等。)<br>upper-roman 大写罗马数字(I, II, III, IV, V, 等。)<br>lower-alpha 小写英文字母(a, b, c, d, e, 等。)<br>upper-alpha 大写英文字母(A, B, C, D, E, 等。)<br>lower-greek 小写希腊字母(alpha, beta, gamma, 等。)<br>lower-latin 小写拉丁字母(a, b, c, d, e, 等。)<br>upper-latin 大写拉丁字母(A, B, C, D, E, 等。)<br>hebrew 传统的希伯来编号方式<br>armenian 传统的亚美尼亚编号方式<br>georgian 传统的乔治亚编号方式(an, ban, gan, 等。)<br>cjk-ideographic 简单的表意数字<br>hiragana 标记是：a, i, u, e, o, ka, ki, 等。（日文片假名）<br>katakana 标记是：A, I, U, E, O, KA, KI, 等。（日文片假名）<br>hiragana-iroha 标记是：i, ro, ha, ni, ho, he, to, 等。（日文片假名）<br>katakana-iroha 标记是：I, RO, HA, NI, HO, HE, TO, 等。（日文片假名） </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">			.disc&#123;</div><div class="line">				list-style-type:disc;</div><div class="line">			&#125;</div><div class="line">			.circle&#123;</div><div class="line">				list-style-type:circle;</div><div class="line">			&#125;</div><div class="line">			.square&#123;</div><div class="line">				list-style-type:square;</div><div class="line">			&#125;</div><div class="line">			.decimal&#123;</div><div class="line">				list-style-type:decimal;</div><div class="line">			&#125;</div><div class="line">			.lower-roman&#123;</div><div class="line">				list-style-type:lower-roman;</div><div class="line">			&#125;</div><div class="line">			.lower-alpha&#123;</div><div class="line">				list-style-type:lower-alpha;</div><div class="line">			&#125;</div><div class="line">			.lower-greek&#123;</div><div class="line">				list-style-type:lower-greek;</div><div class="line">			&#125;</div><div class="line">			.lower-latin&#123;</div><div class="line">				list-style-type:lower-latin;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"disc"</span>&gt;</span>disc 实心圆，默认<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"circle"</span>&gt;</span>circle 空心圆<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"square"</span>&gt;</span>square 方块<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"decimal"</span>&gt;</span>decimal 数字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"lower-roman"</span>&gt;</span>lower-roman 小写罗马数字(i, ii, iii, iv, v, 等。) <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"lower-alpha"</span>&gt;</span>lower-alpha 小写英文字母(a, b, c, d, e, 等。)  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"lower-greek"</span>&gt;</span>lower-greek 小写希腊字母(alpha, beta, gamma, 等。) <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"lower-latin"</span>&gt;</span>lower-latin 小写拉丁字母(a, b, c, d, e, 等。) <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/584041/2cb9d19a043ce401.png" alt=""></p>
<h2 id="list-style-position"><a href="#list-style-position" class="headerlink" title="list-style-position"></a>list-style-position</h2><p>inside 列表项目标记放置在文本以内，且环绕文本根据标记对齐。<br>outside <strong>默认值</strong>。保持标记位于文本的左侧。列表项目标记放置在文本以外，且环绕文本不根据标记对齐。 </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">			.inside&#123;</div><div class="line">				list-style-position:inside;</div><div class="line">			&#125;</div><div class="line">			.outside&#123;</div><div class="line">				list-style-position:outside;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"inside"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>inside inside inside<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>inside inside inside<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>inside inside inside<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>normal normal normal<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>normal normal normal<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>normal normal normal<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"outside"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>outside outside outside<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>outside outside outside<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>outside outside outside<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/584041/cb0641d68a8659ce.png" alt="列表位置"></p>
<h2 id="list-style-image"><a href="#list-style-image" class="headerlink" title="list-style-image"></a>list-style-image</h2><p>以图片作为标志</p>
<blockquote>
<p>list-style-image:url(url);</p>
</blockquote>
<p>none 无<br>inherit 继承</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">			.image&#123;</div><div class="line">				list-style-image:url("素材/五角星.png");</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"image"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>图片 图片 图片 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>图片 图片 图片 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>图片 图片 图片 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/584041/fc9fca8d124f7aaa.png" alt="图片"></p>
<h2 id="list-style"><a href="#list-style" class="headerlink" title="list-style"></a>list-style</h2><p>简写，将所有属性按照一定顺序写在list-style后，可以不设置某个值，未设置的值将采用默认值。</p>
<blockquote>
<p>li {list-style : url(example.gif) square inside}</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS_边框样式]]></title>
      <url>/2017/01/25/CSS-%E8%BE%B9%E6%A1%86%E6%A0%B7%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>CSS 框模型 (Box Model) 规定了元素框处理元素内容、内边距、边框 和 外边距 的方式。</p>
<p><strong>element :</strong> 元素。<br><strong>padding :</strong> 内边距，也有资料将其翻译为填充。<br><strong>border :</strong> 边框。<br><strong>margin :</strong> 外边距，也有资料将其翻译为空白或空白边。<br><a id="more"></a><br><img src="http://p1.bqimg.com/584041/427b252eb4f96737.png" alt="边框模型"></p>
<h2 id="padding-内边距"><a href="#padding-内边距" class="headerlink" title="padding 内边距"></a>padding 内边距</h2><p>padding 属性接受长度值或百分比值，但不允许使用负值。</p>
<p>可以按照上、右、下、左的顺序分别设置各边的内边距，各边均可以使用不同的单位或百分比值（相对父元素的width）：</p>
<blockquote>
<p>h1 {padding: 10px 0.25em 2ex 20%;}</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">1个值</th>
<th style="text-align:center">表示4条边的边距</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">2个值</td>
<td style="text-align:center">上 下</td>
</tr>
<tr>
<td style="text-align:center">3个值</td>
<td style="text-align:center">上 左右 下</td>
</tr>
<tr>
<td style="text-align:center">4个值</td>
<td style="text-align:center">上 下 左 右</td>
</tr>
</tbody>
</table>
<p>也可以通过单独的属性指定： <strong>padding-方向(top/right/bottom/left) </strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">			.padding&#123;</div><div class="line">				padding:10px 20px 30px 40px;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"padding"</span>&gt;</span>这个表格的内边距设置为padding:10px 20px 30px 40px; <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://p1.bqimg.com/584041/22a7f4cb5de36e6e.png" alt="内边距"></p>
<h2 id="margin-外边距"><a href="#margin-外边距" class="headerlink" title="margin 外边距"></a>margin 外边距</h2><p>围绕在元素边框的空白区域是外边距。设置外边距会在元素外创建额外的“空白”。margin 属性接受任何长度单位，可以是像素、英寸、毫米或 em。可以设置为 auto。更常见的做法是为外边距设置长度值</p>
<p>也可使用单个属性来表示外边距：<br>margin-top<br>margin-right<br>margin-bottom<br>margin-left </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">			p.s&#123;</div><div class="line">				margin : 0 100px 20px 0px;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"s"</span>&gt;</span> 这个段落的外边距为： 0 100px 20px 0px;这个段落的外边距为： 0 100px 20px 0px;这个段落的外边距为： 0 100px 20px 0px;这个段落的外边距为： 0 100px 20px 0px;这个段落的外边距为： 0 100px 20px 0px;这个段落的外边距为： 0 100px 20px 0px;这个段落的外边距为： 0 100px 20px 0px;这个段落的外边距为： 0 100px 20px 0px;这个段落的外边距为： 0 100px 20px 0px;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/584041/8b68a7b18f357444.png" alt="外边距"></p>
<h2 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h2><p>外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。</p>
<p>1.当一个元素出现在另一个元素上面时，第一个元素的下外边距与第二个元素的上外边距会发生合并。请看下图：</p>
<p><img src="http://i1.piimg.com/584041/8ecc2750ca1a263d.png" alt=""></p>
<p>2.当一个元素包含在另一个元素中时（假设没有内边距或边框把外边距分隔开），它们的上和/或下外边距也会发生合并。请看下图：</p>
<p><img src="http://i1.piimg.com/584041/f94ab96bb893a529.png" alt=""></p>
<p>3.假设有一个空元素，它有外边距，但是没有边框或填充。在这种情况下，上外边距与下外边距就碰到了一起，它们会发生合并：</p>
<p><img src="http://i1.piimg.com/584041/d2ddb6a8bd4f89e9.png" alt=""></p>
<h2 id="border-style-边框风格"><a href="#border-style-边框风格" class="headerlink" title="border-style 边框风格"></a>border-style 边框风格</h2><p>单独定义的</p>
<p>none 无边框<br>hidden 对于表,可用于解决边框冲突。<br>solid 实线<br>dashed 虚线<br>dotted 点状<br>double 双线<br>groove 凹槽边框<br>ridge 垄状边框<br>insert<br>outsert<br>inherit 继承</p>
<p>使用单独属性表示样式：<strong>border-方向-style(left/right/bottom/top)</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">	p.dotted &#123;border-style: dotted&#125;</div><div class="line">	p.dashed &#123;border-style: dashed&#125;</div><div class="line">	p.solid &#123;border-style: solid&#125;</div><div class="line">	p.double &#123;border-style: double&#125;</div><div class="line">	p.groove &#123;border-style: groove&#125;</div><div class="line">	p.ridge &#123;border-style: ridge&#125;</div><div class="line">	p.inset &#123;border-style: inset&#125;</div><div class="line">	p.outset &#123;border-style: outset&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"dotted"</span>&gt;</span>A dotted border<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"dashed"</span>&gt;</span>A dashed border<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"solid"</span>&gt;</span>A solid border<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"double"</span>&gt;</span>A double border<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"groove"</span>&gt;</span>A groove border<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"ridge"</span>&gt;</span>A ridge border<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"inset"</span>&gt;</span>An inset border<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"outset"</span>&gt;</span>An outset border<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://p1.bqimg.com/584041/78a5e8c4e48e5ea9.png" width="600" height="500"></p>
<h2 id="border-width-边框宽度"><a href="#border-width-边框宽度" class="headerlink" title="border-width 边框宽度"></a>border-width 边框宽度</h2><p>thin 细<br>medium 中等<br>thick 粗边框<br>数字px 固定值<br>inherit 继承</p>
<h2 id="border-color-边框颜色"><a href="#border-color-边框颜色" class="headerlink" title="border-color 边框颜色"></a>border-color 边框颜色</h2><p>rgb()<br>rgba()<br>transparent 透明<br>inherit 继承</p>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS_文本样式]]></title>
      <url>/2017/01/24/css_%E6%96%87%E6%9C%AC%E6%A0%B7%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="text-align-水平对齐"><a href="#text-align-水平对齐" class="headerlink" title="text-align 水平对齐"></a>text-align 水平对齐</h2><p>left/center/right左中右<br>justify 两端对齐<br>inherit 继承</p>
<a id="more"></a>
<h2 id="line-height-文本行间距"><a href="#line-height-文本行间距" class="headerlink" title="line-height 文本行间距"></a>line-height 文本行间距</h2><p>行高不够时，行与行之间后重叠<br>数字px 数字em<br>数字% 基于字体大小的百分比</p>
<h2 id="text-indent-缩进文本"><a href="#text-indent-缩进文本" class="headerlink" title="text-indent 缩进文本"></a>text-indent 缩进文本</h2><p>数字% 父元素的百分比<br>数字px/数字em 固定值默认为0<br>inherit继承</p>
<h2 id="letter-spacing-字母间距"><a href="#letter-spacing-字母间距" class="headerlink" title="letter-spacing 字母间距"></a>letter-spacing 字母间距</h2><p>normal 默认<br>数字px 固定值（可为负值）<br>inherit 继承</p>
<h2 id="word-spacing-单词间距"><a href="#word-spacing-单词间距" class="headerlink" title="word-spacing 单词间距"></a>word-spacing 单词间距</h2><p>normal 标准间距<br>数字px 固定值（可正可负）<br>inherit 继承</p>
<h2 id="direction-文本方向"><a href="#direction-文本方向" class="headerlink" title="direction 文本方向"></a>direction 文本方向</h2><p>ltr 从左到右<br>rtl 从右到左（类似右对齐）<br>inherit 继承</p>
<h2 id="text-transform-字符转换"><a href="#text-transform-字符转换" class="headerlink" title="text-transform 字符转换"></a>text-transform 字符转换</h2><p>capitalize 每个单词首字母大写<br>uppercase 全部大写<br>lowercase 全部小写<br>none 不做改动</p>
<h2 id="text-decoration-文本装饰"><a href="#text-decoration-文本装饰" class="headerlink" title="text-decoration 文本装饰"></a>text-decoration 文本装饰</h2><p>underline 下划线<br>overline 上划线<br>line-through 在文本中间的贯穿线<br>blink 文本闪烁<br>none 关闭原本应用到一个元素上的所有装饰</p>
<h2 id="white-space-处理空白符"><a href="#white-space-处理空白符" class="headerlink" title="white-space 处理空白符"></a>white-space 处理空白符</h2><p>normal 像正常的方式那样忽略换行和多余的空格<br>pre 可以实现pre标签的样式，不忽略空格和换行<br>nowrap 防止元素换行<br>pre-wrap 不仅会保留空白符并保留换行符，还允许自动换行<br>pre-line 保留换行符，并允许自动换行，但是会合并空白符，这是与 pre-wrap 值的不同之处。</p>
<p>他们的区别总结如下：<br><img src="http://p1.bpimg.com/584041/61d367ed719cb9e7.png" alt=""></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">			p.normal&#123;</div><div class="line">				white-space:normal;</div><div class="line">			&#125;</div><div class="line">			p.pre&#123;</div><div class="line">				white-space:pre;</div><div class="line">			&#125;</div><div class="line">			p.nowrap&#123;</div><div class="line">				white-space:nowrap;</div><div class="line">			&#125;</div><div class="line">			p.pre-wrap&#123;</div><div class="line">				white-space:pre-wrap;</div><div class="line">			&#125;</div><div class="line">			p.pre-line&#123;</div><div class="line">				white-space:pre-line;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"normal"</span> &gt;</span>normal: This is a normal line </div><div class="line">	This     paragraph has    many</div><div class="line">    spaces           in it <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"pre"</span> &gt;</span>pre: This is a normal line </div><div class="line">	This     paragraph has    many</div><div class="line">    spaces           in it <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"nowrap"</span> &gt;</span>newrap: This is a normal line </div><div class="line">	This     paragraph has    many</div><div class="line">    spaces           in it <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"pre-wrap"</span> &gt;</span>pre-wrap: This is a normal line </div><div class="line">	This     paragraph has    many</div><div class="line">    spaces           in it <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"pre-line"</span> &gt;</span>pre-line: This is a normal line </div><div class="line">	This     paragraph has    many</div><div class="line">    spaces           in it <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://p1.bqimg.com/584041/4364b08894a516d8.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS_背景]]></title>
      <url>/2017/01/24/CSS-%E8%83%8C%E6%99%AF/</url>
      <content type="html"><![CDATA[<h2 id="background-color-背景颜色"><a href="#background-color-背景颜色" class="headerlink" title="background-color 背景颜色"></a><strong>background-color 背景颜色</strong></h2><p>可以用padding指定颜色的边距<br><a id="more"></a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">text</span>/<span class="attr">css</span>"&gt;</span><span class="undefined"></span></div><div class="line">			.s1&#123;</div><div class="line">				background-color:red;</div><div class="line">			&#125;</div><div class="line">			.s2&#123;</div><div class="line">				background-color:blue;</div><div class="line">				padding:20px;</div><div class="line">			&#125;</div><div class="line">			.s3&#123;</div><div class="line">				background-color:yellow;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"s3"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"s1"</span>&gt;</span>红色的段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"s2"</span>&gt;</span>蓝色的段落，20px的外边距<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><img src="http://i1.piimg.com/584041/bb759c56e25b4eb7.png" alt="背景颜色"></p>
<h2 id="background-image-背景图片"><a href="#background-image-背景图片" class="headerlink" title="background-image 背景图片"></a><strong>background-image 背景图片</strong></h2><p>background-image:url(路径)</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">			.s1&#123;</div><div class="line">				background-image:url("素材/1.png");</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"s1"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://p1.bpimg.com/584041/6f7f38c733e1a05b.png" alt="背景图片"></p>
<h3 id="background-repeat-重复"><a href="#background-repeat-重复" class="headerlink" title="background-repeat 重复"></a><strong>background-repeat 重复</strong></h3><p>repeat 全部重复<br>repeat-x 沿着x重复<br>repeat-y 沿着y重复<br>no-repeat</p>
<p><img src="http://p1.bpimg.com/584041/19a595bd8ab8d6b0.png" alt="沿着x重复"></p>
<h3 id="background-position-重复位置"><a href="#background-position-重复位置" class="headerlink" title="background-position 重复位置"></a><strong>background-position 重复位置</strong></h3><p>top 上<br>bottom 下<br>left 左<br>right 右<br>center 中间<br>用数值表示位置：mpx npx(x,y)<br>用百分数表示</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--表示图片位置在水平2/3，竖直1/3处--&gt;</span></div><div class="line">			.s1&#123;</div><div class="line">				background-image:url("素材/1.png");</div><div class="line">				background-repeat:no-repeat;</div><div class="line">				background-position: 66% 33%;</div><div class="line">			&#125;</div></pre></td></tr></table></figure>
<p><img src="http://p1.bpimg.com/584041/3decdd44830e3709.png" alt="图片位置"></p>
<h3 id="background-attachment-背景图像是否固定或者随着页面的其余部分滚动。"><a href="#background-attachment-背景图像是否固定或者随着页面的其余部分滚动。" class="headerlink" title="background-attachment 背景图像是否固定或者随着页面的其余部分滚动。"></a><strong>background-attachment 背景图像是否固定或者随着页面的其余部分滚动。</strong></h3><p>当background-attachment 的值为fixed时，随着页面的滚动图片的位置不会改变</p>
<p><img src="http://i1.piimg.com/584041/e2682afff8ee4c45.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS(颜色_字体)]]></title>
      <url>/2017/01/24/CSS-%E9%A2%9C%E9%A2%9C%E8%89%B2-%E5%AD%97%E4%BD%93/</url>
      <content type="html"><![CDATA[<h2 id="颜色样式"><a href="#颜色样式" class="headerlink" title="颜色样式"></a><strong>颜色样式</strong></h2><h3 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a><strong>十六进制</strong></h3><p><em>十六进制颜色是这样规定的：#RRGGBB，其中的 RR（红色）、GG（绿色）、BB（蓝色）十六进制整数规定了颜色的成分。所有值必须介于 0 与 FF 之间。</em><br>所有浏览器都支持十六进制颜色值。</p>
<h3 id="RGB"><a href="#RGB" class="headerlink" title="RGB"></a><strong>RGB</strong></h3><p><em>RGB 颜色值是这样规定的：rgb(red, green, blue)。每个参数 (red、green 以及 blue) 定义颜色的强度，可以是介于 0 与 255 之间的整数，或者是百分比值（从 0% 到 100%）。</em><br>所有浏览器都支持 RGB 颜色值。<br><a id="more"></a></p>
<blockquote>
<p>rgb(0,0,255) 和 rgb(0%,0%,100%)。同样表示蓝色</p>
</blockquote>
<h3 id="RGBA"><a href="#RGBA" class="headerlink" title="RGBA"></a><strong>RGBA</strong></h3><p>RGBA 颜色值是这样规定的：rgba(red, green, blue, alpha)。alpha 参数是介于 0.0（完全透明）与 1.0（完全不透明）的数字。</p>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a><strong>字体</strong></h2><h3 id="font-size-字体大小"><a href="#font-size-字体大小" class="headerlink" title="font-size: 字体大小"></a><strong>font-size: 字体大小</strong></h3><p>数字px(像素);<br>数字%(父元素的百分比,可以大于100%)<br>数字em（与父元素的百分比，浏览器默认是16px。1em表示与父元素相同）<br>smaller 比父元素更小<br>larger 比父元素大<br>inherit 及集成父元素的大小</p>
<p>如图：<br><img src="http://p1.bpimg.com/584041/0c5e09a70c9d23b0.png" alt=""></p>
<h3 id="font-family-字体"><a href="#font-family-字体" class="headerlink" title="font-family: 字体"></a><strong>font-family: 字体</strong></h3><p>后可以加上多个字体，字体与字体之间用逗号隔开。按从左往右的顺序读取，当左边不存在时使用右边的字体。<br>为避免乱码时无法读取汉字，最好使用英文字体名</p>
<p>如图：<br><img src="http://p1.bpimg.com/584041/ecd9235fdfe61819.png" alt="华文行楷"></p>
<h3 id="font-weight-加粗"><a href="#font-weight-加粗" class="headerlink" title="font-weight: 加粗"></a><strong>font-weight: 加粗</strong></h3><p>normal 400 默认值<br>bold 700 粗<br>bolder 更粗<br>lighter 更细<br>100~900的整百数字</p>
<p>如图：<br><img src="http://p1.bpimg.com/584041/bb7d6c072835a22c.png" alt=""></p>
<h3 id="font-style-字体样式（主要用来倾斜字体）"><a href="#font-style-字体样式（主要用来倾斜字体）" class="headerlink" title="font-style: 字体样式（主要用来倾斜字体）"></a><strong>font-style: 字体样式（主要用来倾斜字体）</strong></h3><p>normal 正常<br>italic 斜体<br>oblique 倾斜(与italic效果类似)<br>inherit 继承</p>
<p>如图：<br><img src="http://p1.bpimg.com/584041/8d6cf7ccdd4eca50.png" alt="style"></p>
<h3 id="font-variant-小型大写字体或者正常字体显示文本。"><a href="#font-variant-小型大写字体或者正常字体显示文本。" class="headerlink" title="font-variant:  小型大写字体或者正常字体显示文本。"></a><strong>font-variant:  小型大写字体或者正常字体显示文本。</strong></h3><p>normal 正常<br>small-caps<br>inhert 继承</p>
<p>如图：<br><img src="http://i1.piimg.com/584041/8faeabcc99fe6782.png" alt="variant"></p>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS_选择器]]></title>
      <url>/2017/01/23/CSS-%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      <content type="html"><![CDATA[<h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2><p><em>class 属性规定元素的类名（classname）</em><br>类选择器以一个点号显示</p>
<blockquote>
<p>.center {text-align: center}</p>
</blockquote>
<p>class类似一个标记。<br><strong>“p.类名”表示标记了该类的p标签的样式，这个类的样式只能被p使用。即 </strong></p>
<blockquote>
<p>p class=”标记名”<br><a id="more"></a><br><strong>而”.类名”表示元素也可以基于它们的类而被选择，所有标签都可以包含这个类</strong><br>*.important {color:red;}<br>.important {color:red;}<br>以上两者相等</p>
</blockquote>
<p><strong>一个标签可以包含多个类，包含多个类时用空格隔开，不分先后</strong></p>
<p><strong>当两个类有各自的样式，可以有同时包含两个类时才出现的样式</strong></p>
<blockquote>
<p>.important.warning {background:silver;}</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--实例--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"type/html;charset=htf-8"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="xml"></span></div><div class="line">			<span class="comment">&lt;!--元素基于它们的类而被选择--&gt;</span></div><div class="line">			p.try1 &#123;</div><div class="line">				color:blue;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="comment">&lt;!--所有元素都可使用--&gt;</span></div><div class="line">			.try2 &#123;</div><div class="line">				text-align:center;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>这是单独的段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"try1 try2"</span>&gt;</span>这是在"class=try1 try2"的段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"try2"</span>&gt;</span>这是标题，class=try2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://p1.bpimg.com/584041/740f3797cbdd9593.png" alt="class"></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--两个标记同时存在时的特殊样式--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"type/html;charset=htf-8"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">		.s1&#123;</div><div class="line">			color:red;</div><div class="line">		&#125;</div><div class="line">		.s2&#123;</div><div class="line">			font-size:20px;</div><div class="line">		&#125;</div><div class="line">		.s1.s2&#123;</div><div class="line">			font-style:italic;</div><div class="line">		&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"s1"</span>&gt;</span> 段落s1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"s2"</span>&gt;</span> 段落s2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"s1 s2"</span>&gt;</span> 段落s1 s2 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://p1.bpimg.com/584041/d542b9a3ced13e38.png" alt=""></p>
<p>class 也可被用作派生选择器：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">	.s1 h1 &#123;</div><div class="line">		font-size:10px;</div><div class="line">	&#125;</div><div class="line">	.s1 h2 &#123;</div><div class="line">			background: #666;</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h2><p><em>id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。</em><br>id 选择器以 “#” 来定义。例如：</p>
<blockquote>
<p>#red {color:red;}<br>#green {color:green;}</p>
</blockquote>
<p>在现代布局中，id 选择器常常用于建立派生选择器。</p>
<blockquote>
<p>#sidebar p {<br>   font-style: italic;<br>   text-align: right;<br>   margin-top: 0.5em;<br>   }</p>
</blockquote>
<p>上面的样式只会应用于出现在 id 是 sidebar 的元素内的段落。<br>ID区分大小写<br>即使被标注为特定ID的元素只能在文档中出现一次，这个 id 选择器作为派生选择器也可以被使用很多次：<br>例如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">#s h2&#123;</div><div class="line">	color:red;</div><div class="line">&#125;</div><div class="line">#s h1&#123;</div><div class="line">	color:blue;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"type/html;charset=htf-8"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">		#red &#123;</div><div class="line">			color:red;</div><div class="line">		&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"red"</span>&gt;</span>这是ID=red的段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>这是普通段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://p1.bqimg.com/584041/1f6f8b89a41097d0.png" alt="id选择器"></p>
<h2 id="选择器的分组"><a href="#选择器的分组" class="headerlink" title="选择器的分组"></a>选择器的分组</h2><p>同时控制多个标签<br>h1,h2,p{}</p>
<h2 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h2><p>a:link 正常样式<br>a:hover 鼠标放上的样式<br>a:active 鼠标按下时的样式<br>a:visited 访问过的样式</p>
<h2 id="优先级问题"><a href="#优先级问题" class="headerlink" title="优先级问题"></a>优先级问题</h2><p>ID &gt; class &gt; html</p>
<h2 id="派生选择器"><a href="#派生选择器" class="headerlink" title="派生选择器"></a>派生选择器</h2><h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">li strong &#123;</div><div class="line">    font-style: italic;</div><div class="line">    font-weight: normal;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p><strong>以上的代码表示在列表（li）中的strong标记所具有的样式。当strong单独使用时不具有以上样式。</strong><br>类似于</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"type/html;charset=htf-8"</span>/&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">		li strong &#123;</div><div class="line">			font-style: italic;</div><div class="line">			font-weight: normal;</div><div class="line">		&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">strong</span>&gt;</span>This is a normal Strong<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>This is a Strong in li<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://i1.piimg.com/584041/e160d95752562bce.png" alt="后代选择器"></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"type/html;charset=htf-8"</span>/&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">		strong &#123;</div><div class="line">			 color: red;</div><div class="line">			 &#125;</div><div class="line"></div><div class="line">		h2 &#123;</div><div class="line">			 color: red;</div><div class="line">			 &#125;</div><div class="line"></div><div class="line">		h2 strong &#123;</div><div class="line">			 color: blue;</div><div class="line">			 &#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">strong</span>&gt;</span>这是普通的strong<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是普通的h2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>这是h2中的strong<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://p1.bpimg.com/584041/24a034a75660c639.png" alt="后代选择器2"></p>
<h3 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h3><p>h1 &gt; strong {color:red;}<br>只将h1下一层的strong使用该样式。”&gt;”两端可以没有空格</p>
<p><strong>与后代选择器的区别：</strong><br>个人认为可以将所有标签看成一个树结构<br>后代选择器的范围包含孩子和孙子节点。<br>子元素选择器的范围只包含孩子节点。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"type/html;charset=htf-8"</span>/&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">			h1 &gt; strong &#123;</div><div class="line">				color:red;</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是<span class="tag">&lt;<span class="name">strong</span>&gt;</span>第一个<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>第二个<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>strong<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://p1.bqimg.com/584041/2d04f9ff6b3f8c6e.png" alt="子元素选择器"></p>
<h3 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a>相邻兄弟选择器</h3><p>h1+p{clolr:blue;}<br>二者有相同父元素则称为兄弟。<br>紧贴在h1后的p，并且h1和p具有相同父节点。则使用该样式</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">h1 + p &#123;color:blue;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a heading.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://p1.bpimg.com/584041/89d3777f15ecba02.png" alt="相邻兄弟选择器"></p>
<p>Tips</p>
<h2 id="HTML-div标签"><a href="#HTML-div标签" class="headerlink" title="HTML div标签"></a>HTML div标签</h2><p>可定义文档中的分区或节（division/section）,把文档分割为独立的、不同的部分。它可以用作严格的组织工具，并且不使用任何格式与其关联。</p>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[html_表单]]></title>
      <url>/2017/01/21/html-%E8%A1%A8%E5%8D%95/</url>
      <content type="html"><![CDATA[<p><em>客户端和服务端信息交流的途径</em></p>
<h2 id="form"><a href="#form" class="headerlink" title="form"></a>form</h2><p><strong>创建一个表单，容器，表单元素必须在form种才能起作用。</strong><br><b><br>action: 规定当提交表单时，向何处发送表单数据。action=URL(传递目标，处理表单信息的服务器端应用程序)<br><a id="more"></a><br>method: 规定如何发送表单数据(POST/GET)<br>name: 规定表单的名称。<br>target: _blank/_parent/_self/_top/framename 规定在何处打开 action URL。<br></b></p>
<blockquote>
<p>post 传递大量信息<br>get将值附加在URL后适合传递少量信息</p>
</blockquote>
<h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><p>定义输入域，用户可在其中输入数据。<br>type和name属性是必须的，其他属性是可选的（所有表单元素都是这样）<br>没有结束标签</p>
<hr>
<h3 id="单行文本框"><a href="#单行文本框" class="headerlink" title="单行文本框"></a><font color="red">单行文本框</font></h3><p><strong><i>input name=’text’</i></strong><br><b><br>value=’初始值’<br>size=’显示字符数’<br>maxlength=’最多容纳字符数’<br>readonly=’readonly’只能读，不可修改<br>disabled=’disabled’不可操作<br></b></p>
<h3 id="密码框"><a href="#密码框" class="headerlink" title="密码框"></a><font color="red">密码框</font></h3><p><strong><em>input type=’password’ value=’初始值’ size=’显示字符数’</em></strong><br><em>与文本框类似</em></p>
<p><img src="http://p1.bpimg.com/1949/4ee0521f322779c1.png" alt="密码框"></p>
<h3 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a><font color="red">单选框</font></h3><p>input type=’radio’ </p>
<p><b><br>value 单选框的值<br>name 名称，不同的选项名称必须相同<br>checked 默认选中(checked=’checked’)<br></b></p>
<p><img src="http://p1.bpimg.com/1949/536d9aa343d67db9.png" alt="单选框"></p>
<h3 id="下拉框"><a href="#下拉框" class="headerlink" title="下拉框"></a><font color="red">下拉框</font></h3><p>&lt;select name=’下拉框名称’&gt;<br>&lt;option selected=’selected’ value=’项目的值’&gt;列表显示的值&lt;/option&gt;<br>&lt;/select&gt;</p>
<p><img src="http://p1.bpimg.com/1949/8ee3f1231fb6e78b.png" alt="下拉框"></p>
<p>下拉分组: &lt;optgroup label=’分组名称’&gt;&lt;/optgroup&gt;</p>
<p><img src="http://p1.bpimg.com/584041/82b3fef162504e12.png" alt="分组下拉框"></p>
<p>size 显示的行数<br>multiple是否允许多选</p>
<p><img src="http://p1.bpimg.com/584041/4cd5ae57cd848146.png" alt="下拉多选"></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> 籍贯：</div><div class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">size</span>=<span class="string">'3'</span> <span class="attr">multiple</span>=<span class="string">'multiple'</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>合肥<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>南京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>合肥<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>南京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="多选框"><a href="#多选框" class="headerlink" title="多选框"></a><font color="red">多选框</font></h3><p>input type=”checkbox” name=”Car”</p>
<p>value 项目的值<br>name必须相同</p>
<h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a><font color="red">文件上传</font></h3><p>input type=’file’</p>
<p><img src="http://p1.bpimg.com/584041/fcf5c3ae02675865.png" alt="文件上传"></p>
<h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a><font color="red">按钮</font></h3><p>input type=’submit’ 提交<br>input type=’reset’重置(清空所有输入的内容)<br>input type=’button’普通按钮</p>
<p><img src="http://p1.bpimg.com/584041/0800aba25566b1e4.png" alt="按钮"></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'submit'</span> <span class="attr">value</span>=<span class="string">'提交2'</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'reset'</span> <span class="attr">value</span>=<span class="string">'重置2'</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'button'</span><span class="attr">value</span>=<span class="string">'普通按钮'</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="文本域"><a href="#文本域" class="headerlink" title="文本域"></a><font color="red">文本域</font></h3><p>&lt;textarea&gt;… &lt;/textarea&gt;<br>cols =’每行显示的字符数’<br>rows =’每列显示的字符数’</p>
<p><img src="http://p1.bpimg.com/584041/561ee832b76e6e3c.png" alt="文本域"></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">'15'</span> <span class="attr">rows</span>=<span class="string">'6'</span>&gt;</span> <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="隐藏域"><a href="#隐藏域" class="headerlink" title="隐藏域"></a><font color="red">隐藏域</font></h3><p>input type=’hidden’<br>看不见的组件</p>
<h3 id="表单外框"><a href="#表单外框" class="headerlink" title="表单外框"></a><font color="red">表单外框</font></h3><p>fieldset 定义围绕在表单周围的边框<br>legend 标题</p>
<p><img src="http://p1.bpimg.com/584041/16a51f5e11076235.png" alt="外框"></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">legend</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">'man'</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'radio'</span> <span class="attr">value</span>=<span class="string">'man'</span> <span class="attr">id</span>=<span class="string">'man'</span> <span class="attr">name</span>=<span class="string">'sex'</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">'women'</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'radio'</span> <span class="attr">value</span>=<span class="string">'women'</span> <span class="attr">id</span>=<span class="string">'women'</span> <span class="attr">name</span>=<span class="string">'sex'</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="标注内容"><a href="#标注内容" class="headerlink" title="标注内容"></a><font color="red">标注内容</font></h3><p>label 元素不会向用户呈现任何特殊效果。不过，它为鼠标用户改进了可用性。如果您在 label 元素内点击文本，就会触发此控件。就是说，当用户选择该标签时，浏览器就会自动将焦点转到和标签相关的表单控件上。</p>
<p><strong>label标签的 for 属性应当与相关元素的 id 属性相同。</strong></p>
<p><img src="http://p1.bpimg.com/584041/8597005875a38950.png" alt="label"></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">性别:</div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">'man'</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'radio'</span> <span class="attr">value</span>=<span class="string">'man'</span> <span class="attr">name</span>=<span class="string">'sex'</span> <span class="attr">id</span>=<span class="string">'man'</span> <span class="attr">checked</span>=<span class="string">'checked'</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">'women'</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'radio'</span> <span class="attr">value</span>=<span class="string">'women'</span> <span class="attr">name</span>=<span class="string">'sex'</span> <span class="attr">id</span>=<span class="string">'women'</span> &gt;</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> HTML </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML_meta_body]]></title>
      <url>/2016/12/29/html_meta_body/</url>
      <content type="html"><![CDATA[<h1 id="文档结构"><a href="#文档结构" class="headerlink" title="文档结构"></a>文档结构</h1><p>&lt; html\&gt;…&lt;/html&gt; 表示网页的开始和结束<br>&lt;head\&gt;…&lt;/head&gt; 网页文件的头部信息：标题、搜索引擎关键字<br><a id="more"></a><br>&lt;body\&gt;…&lt;/body&gt; 网站主体</p>
<pre><code>title 表示网页顶端的网页标题
</code></pre><h1 id="meta标记"><a href="#meta标记" class="headerlink" title="meta标记"></a>meta标记</h1><p>用于定义文件信息，置于head 和 /head之间<br><strong>&lt;meta name=”keywords” content=”value”&gt;</strong><br><em>表示关键字</em><br><strong>&lt;meta name=”description” content=”value”&gt;</strong><br><em>描述网页的内容，是上面keywords的扩展</em><br><strong>&lt;meta name=”autor” content=”作者名”&gt;</strong><br><strong>&lt;meta http-equiv=”content-type” content=”text/html;charset=gb2312”&gt;</strong><br><em>国内网站用GB2312，国际用utf-8</em><br><em>text/html;charset=gb2312一个声明代码，指明这个是文本方式的网页文件，语言是 中文</em><br><strong>&lt;meta http-equiv=”refresh” content=”2;URL=<a href="http://www.baidu.com&quot;/&amp;gt" target="_blank" rel="external">http://www.baidu.com&quot;/&amp;gt</a>;</strong><br><em>自动刷新 ，2表示时间</em></p>
<blockquote>
<p><strong>http-equiv中的属性：</strong><br>content-type 规定文档的字符编码。<br>default-style 规定要使用的预定义的样式表?<br>refresh 定义文档自动刷新的时间间隔。</p>
</blockquote>
<h1 id="body"><a href="#body" class="headerlink" title="body"></a>body</h1><p>注释：&lt;!–注释–&gt;</p>
<p>html元素-html标签-html标记</p>
<p><em>不推荐使用：</em><br>bgcolor 背景颜色<br>background 背景照片<br>text 文字颜色<br>leftmargin 左边距<br>rightmargin 右边距<br>topmargin 上边距<br>bottommargin 下边距</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"type/html;charset-htf-8"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span> <span class="attr">background</span>=<span class="string">'1.png'</span> <span class="attr">bgcolor</span>=<span class="string">'black'</span> <span class="attr">background</span> <span class="attr">text</span>=<span class="string">'white'</span></span></div><div class="line">	<span class="attr">leftmargin</span>=<span class="string">"0"</span></div><div class="line">	<span class="attr">rightmargin</span>=<span class="string">"0"</span></div><div class="line">	<span class="attr">topmargin</span>=<span class="string">"0"</span></div><div class="line">	<span class="attr">bottommargin</span>=<span class="string">'0'</span></div><div class="line">	&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a pharagraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20161229195021499?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHdpbGlnaHRfa2FybA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="background"></p>
<p><strong><font color="red" size="6">Tips</font></strong></p>
<p>标记的属性：&lt;标记 属性1=参数1属性2=参数2 。。。&gt;内容&lt;/标记&gt;<br>属性之间用空格分隔，属性不分先后且不是必须的。<br>html不区分大小写，xhtml全部小写</p>
<blockquote>
<p>属性和属性之间用空格隔开<br>所有的标记都要关闭<br>&lt;b&gt;加粗<br>&lt;font color=”red” size=”7”&gt;内容 &lt;/font&gt;<br><em>size(1~7)</em></p>
<p>&lt;hr width=”50%” /&gt; 水平线</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> HTML </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[初识JavaScript]]></title>
      <url>/2016/12/21/%E5%88%9D%E8%AF%86JavaScript/</url>
      <content type="html"><![CDATA[<p><strong>1.</strong> 以 &lt; script&gt;开头，以&lt;/script&gt;结尾,老式的浏览器中需要加上language，如： &lt; script language = “javascript” /script&gt; 表示该脚本是JavaScript，<br>也可以写上其他脚本的名字。</p>
<a id="more"></a>
<p><strong>2.</strong> JavaScript每条语句必须以冒号结尾。<br>document.write();向页面上输出内容。<br>    document.write(“hello!”);</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 在屏幕中输出加粗的hello</div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="xml"></span></div><div class="line">	document.write("<span class="tag">&lt;<span class="name">strong</span>&gt;</span>hello <span class="tag">&lt;/<span class="name">strong</span>&gt;</span>");</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>3.变量</strong><br>用    var+变量名   声明一个变量 可以不考虑变量的类型。所有类型都用var来声明。<br>常用的类型有：</p>
<blockquote>
<p>var a = 16;  //数字<br>var falg = true; //布尔型<br>var s = “hello”//字符串型</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//字符串的相加运算</div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">	var a = "abc";</div><div class="line">	a += 'd';</div><div class="line">	document.write(a);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>结果是abcd。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//html中将多个空格当成一个来处理</div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">	var s = 'hello   ';</div><div class="line">	s += '   world';</div><div class="line">	document.write(s);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>结果是: hello world</p>
</blockquote>
<p><strong>4.运算</strong> <br><br>常见的运算符在JavaScript中都有，例如：<br>加减乘除： +-*\ %<br>自加自减：++ –<br>加法：+= -=<br>逻辑： &amp;&amp; ||  ？： ！<br>判断： ==（类似于C语言）<br>字符串比较大小： &gt; &lt; == (小写字母大于大写字母)</p>
<p><strong>5.注释 </strong><br>和C语言一样用//或/* */ 表示</p>
<p><strong>6.判断</strong><br>与C语言基本相同</p>
<blockquote>
<p>建议每一条if语句都加上{}</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//不加括号时，else属于较近的if</div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">	var s = 'hello';</div><div class="line">	</div><div class="line">	if (s == 'hello')</div><div class="line">		if(s == 'world')</div><div class="line">			document.write('world');</div><div class="line">			else</div><div class="line">			document.write(s);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>7.循环</strong><br>和c语言一样<br>for(;;)<br>while()<br>do while()    </p>
<p><strong>8.函数</strong><br>function fun_name(形参){函数体}<br><em>函数也被当成是一种类型，有时可以像变量一样使用</em></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//定义一个函数</div><div class="line">function add(a,b)&#123;</div><div class="line">	return a+b;</div><div class="line">&#125;</div><div class="line">//使用函数</div><div class="line">alert('加:'+add(1,2))</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//将函数类似于变量的用法</div><div class="line"></div><div class="line">function add(a,b)&#123;</div><div class="line">	return a+b;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function cal(x,y,z)&#123;</div><div class="line">	return x(y,z);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//将函数作为参数</div><div class="line">alert(cal(add,1,2));</div></pre></td></tr></table></figure>
<p><strong>9.数组</strong><br>数组可以使用以下方法建立：<br>1 var a = new Array();<br>2 var b = new Array(10);<br>3 var c = new Array(1,2,3,4,5);<br>4 var d = [6,7,8,9,10];                </p>
<p>数组的特点：<br>1，数组中的元素使用时才会被创建，即使创建了a[1]和a[10]，中间的元素依然是空。<br>2，数组的长度a.length为最大的下标加1，不管中间的元素是否存在。<br>3，数组的长度是可以人为修改的。修改后不属于长度内的元素会被清除。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">var a = new Array();</div><div class="line">a[1] = 10;</div><div class="line">a[10] = 20;</div><div class="line">document.write(a[9]+"<span class="tag">&lt;<span class="name">br</span>/&gt;</span>");</div><div class="line">document.write(a.length);</div></pre></td></tr></table></figure>
<p>在这里会输出：<br><em>undefined</em><br><em>11</em> </p>
<p>  <em>换行只能在输出后面加上&lt; br/&gt; ，c中的\n在这里不起作用</em></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//人为改变数组长度，等同于截取数组中的一段</div><div class="line"></div><div class="line">var a = new Array(1,2,3,4,5);</div><div class="line">document.write(a.length+"<span class="tag">&lt;<span class="name">br</span>/&gt;</span>");</div><div class="line">a.length = 3;</div><div class="line">document.write(a+"<span class="tag">&lt;<span class="name">br</span>/&gt;</span>");</div><div class="line">a.length = 5;</div><div class="line">document.write(a);</div></pre></td></tr></table></figure>
<p>结果如下：<br><em>5</em><br><em>1,2,3</em><br><em>1,2,3,,</em>     </p>
<p>join(“&amp;”) 表示认为的改变输出时元素的分隔符如：</p>
<blockquote>
<p>document.write(a.join(“%”));</p>
</blockquote>
<p>会输出 <em>1%2%3</em></p>
<p><strong>10.栈和队列</strong> </p>
<p>对于数组a</p>
<pre><code>栈：                    
    a.push();    入栈        
    a.pop();    出栈        
队列：                
    a.push()     入队        
    a.pop()     出队        
</code></pre><p><em>一些方法：</em></p>
<pre><code>a.sort([可以自定义方法])  排序        
a.reserve()    倒序输出                
a.concat()    连接                    
splice(开始位置，删除个数，插入位置)  ???        
</code></pre><blockquote>
<p>例：<br>a.concat(6,7,8,9);</p>
</blockquote>
<p><strong>11.对象</strong> </p>
<p><strong>声明</strong>：<br>var o = new Object();<br>var cidr = {x:2,y:0,radius:2};    </p>
<p><em>对象的元素是在使用时添加进类中的，第一次使用时就会自动为该类创建这个成员</em></p>
<p><strong>删除属性：</strong><br>delete book.name;<br>book.name=null;        </p>
<p><strong>遍历属性：</strong><br>for(var x in book ){<br>   x是成员的名字，用法类似于数组的下标<br>}                                        </p>
<p><strong>构造函数:</strong><br>….</p>
<p><strong>共享成员：</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">var book = new Object();</div><div class="line">book.name = '百年孤独';</div><div class="line">book.about = &#123;name:'马尔克斯',price:100&#125;;</div><div class="line">document.write(book.name+'<span class="tag">&lt;<span class="name">br</span>/&gt;</span>');</div><div class="line">document.write(book.about.name);</div></pre></td></tr></table></figure>
<p>结果：<br><em>百年孤独</em><br><em>马尔克斯 </em>        </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">var book = new Object();</div><div class="line">book.name = '百年孤独';</div><div class="line">book.about = &#123;name:'马尔克斯',price:100&#125;;</div><div class="line"></div><div class="line">//遍历</div><div class="line">for (var x in book )&#123;</div><div class="line">	document.write(book[x]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>12.window</strong> </p>
<p>外部javascript文件<br>&lt; script src = “url”&gt;  &lt; /script&gt; </p>
<p>1&gt;</p>
<blockquote>
<p>&lt; p onMouseOver=”alert(‘Hi’);”\&gt;abc&lt;/p&gt;<br>&lt;p onMouseOut=”alert(‘bye’);”\&gt;abc&lt;/p&gt;</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">//鼠标移入段落时弹出in，移出段落时弹出out</div><div class="line"><span class="tag">&lt;<span class="name">pre</span> <span class="attr">onmouseover</span>=<span class="string">"alert('in');"</span> <span class="attr">onmouseout</span>=<span class="string">"alert('out');"</span>&gt;</span></div><div class="line">This is a pharagraph</div><div class="line">This is a pharagraph</div><div class="line">This is a pharagraph</div><div class="line">This is a pharagraph</div><div class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></div></pre></td></tr></table></figure>
<p>onLoad加载完后<br>onUnload关闭之前</p>
<p>confirm(“string”)<br>var name = prompt(“name is :”);<br>确定则返回输入的内容，取消则返回空</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">if(confirm("要不要继续?"))&#123;</div><div class="line">	alert("欢迎");</div><div class="line">&#125;else</div><div class="line">alert("再见");</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20161223204624352?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHdpbGlnaHRfa2FybA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="confirm"></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var name = prompt("name:");</div><div class="line">alert(name);</div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20161223205312675?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHdpbGlnaHRfa2FybA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="prompt"></p>
<p>status = “str” 在现实url的地方显示str<br>defaultStatus</p>
<p>setInterval(函数,时间);</p>
<p>window.open();    打开一个新的窗口<br>var w = window.open(“内容”,“窗口名字”，“参数”);//返回一个window对象，先判断浏览器中是否已经存在这个网页就直接跳转过去<br>window.close();关掉自己<br>w.moveTo(0,0);</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if(confirm("new one ?"))&#123;</div><div class="line">	open("D:/Code/HTML/图片.html","new");</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>window.location当前文档的url 可以改写他，改写过后当前窗口会跳转到新的url</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var s ="https://" + prompt("请输入要跳转的页面:");</div><div class="line">location(s);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java网络编程]]></title>
      <url>/2016/12/10/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h4 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h4><p>两个字节，范围0~65535</p>
<p>1、在同一个协议下端口号不能重复<br>2、1024以下的端口号不要使用</p>
<a id="more"></a>
<h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p>统一资源定位符</p>
<blockquote>
<p>URI 统一资源</p>
</blockquote>
<h4 id="数据的传输"><a href="#数据的传输" class="headerlink" title="数据的传输"></a>数据的传输</h4><p>1、协议  TCP/UDP<br>    1) TCP（transfer control protocol） 面向连接 安全可靠，效率低下<br><br>    2) UDP（userDatagram Protocol） 非面向连接 效率高 数据可能丢失</p>
<p>2、数据<br>    先封装/后拆分</p>
<hr>
<p>1、InetAddress InetSockAddress<br>2、URL<br>3、TCP：serverSocker Socket<br>4、UDP：DatagramSocket DatagramPacket</p>
<h4 id="InetAddress-表示互联网的IP地址"><a href="#InetAddress-表示互联网的IP地址" class="headerlink" title="InetAddress 表示互联网的IP地址"></a><strong>InetAddress 表示互联网的IP地址</strong></h4><p>getHostAddress()返回IP地址<br>getHostName() 返回域名/本机为计算机名<br>InetAddress.getLocalHost()返回本机地址<br>InetAddress.getByName(“192.168.1.1”); ip/域名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// InetAddress</div><div class="line">	public static void main (String [] args) throws UnknownHostException&#123;</div><div class="line">		InetAddress inet = InetAddress.getLocalHost();</div><div class="line">		System.out.println(inet.getHostName());</div><div class="line">		System.out.println(inet.getHostAddress());</div><div class="line">		</div><div class="line">		inet = InetAddress.getByName(&quot;twilight.net.cn&quot;);</div><div class="line">		System.out.println(inet.getHostName());</div><div class="line">		System.out.println(inet.getHostAddress());</div><div class="line">		</div><div class="line">		inet = InetAddress.getByName(&quot;151.101.16.133&quot;);</div><div class="line">		System.out.println(inet.getHostName());</div><div class="line">		System.out.println(inet.getHostAddress());</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>InetSocketAddress 套接字（ip + 端口号）</p>
<blockquote>
<p>SocketAddress是一个抽象类，类中没有方法</p>
</blockquote>
<p>1、创建对象</p>
<blockquote>
<p>InetSocketAddress(InetAddress addr,int port)<br>根据主机名和端口号创建套接字地址。<br>InetSocketAddress(InetAddress addr, int port)<br>根据 IP 地址和端口号创建套接字地址。<br>InetSocketAddress(int port)<br>创建套接字地址，其中 IP 地址为通配符地址，端口号为指定值。</p>
</blockquote>
<p>2、方法</p>
<blockquote>
<p>getAddress() 获取InetAddress<br>getHostName() 计算机名<br>getHostAddress() 返回地址<br>getPort() 获得端口号</p>
</blockquote>
<pre><code>//InetSocketAddress
public static void main(String[] args) throws UnknownHostException {
    InetSocketAddress net = new InetSocketAddress(&quot;127.0.0.1&quot;, 2000);
    System.out.println(net.getPort());
    System.out.println(net.getHostName());
    System.out.println(net.getAddress().getHostAddress());
}
</code></pre><h4 id="URL-1"><a href="#URL-1" class="headerlink" title="URL"></a><strong>URL</strong></h4><p>组成： 协议+存放资源的主机域名+端口+资源名</p>
<p>创建：<br>URL(String apec)  绝对路径构建<br>URL (URL context,String s) 相对路径构建<br>URL(String protocol, String host, int port, String file) 根据指定 协议、主机号、端口号、和文件创建 URL 对象。</p>
<p>getProtocol() 获取协议<br>getHost() 获取主机名<br>getPort() 获取端口<br>getFile() 获取文件名<br>getPath() 获取<br>getRef()  锚点锚点<br>getQuery() 获取查询部分（参数存在锚点返回null，不存在返回正确）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String [] args)</span> <span class="keyword">throws</span> MalformedURLException</span>&#123;</div><div class="line">	URL address = <span class="keyword">new</span> URL(<span class="string">"http://www.baidu.com:80/index.html#abc"</span>);</div><div class="line">	System.out.println(<span class="string">"协议"</span> + address.getProtocol());</div><div class="line">	System.out.println(<span class="string">"文件名"</span>+address.getFile());</div><div class="line">	System.out.println(<span class="string">"主机"</span>+address.getHost());</div><div class="line">	System.out.println(<span class="string">"端口"</span>+address.getPort());</div><div class="line">	System.out.println(<span class="string">"路径"</span>+address.getPath());</div><div class="line">	System.out.println(<span class="string">"锚点"</span>+address.getRef());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>运行结果：</em><br><em>协议 http</em><br><em>文件名 /index.html</em><br><em>主机 www.baidu.com</em><br><em>端口 80</em><br><em>路径 /index.html</em><br><em>锚点 abc</em></p>
<p>获取资源：<br><em>主页/默认资源</em><br>InputStream openStream() 获取网络流</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String [] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">	URL address = <span class="keyword">new</span> URL(<span class="string">"https://www.baidu.com/index.html"</span>);</div><div class="line">	BufferedReader input = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(address.openStream(),<span class="string">"utf-8"</span>));</div><div class="line">	BufferedWriter output = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"url_1.html"</span>),<span class="string">"utf-8"</span>));</div><div class="line">	<span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">	<span class="keyword">byte</span> [] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">100</span>];</div><div class="line">	String s = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">while</span>(<span class="keyword">null</span> != (s = input.readLine()))&#123;</div><div class="line">		output.append(s);</div><div class="line">		output.newLine();</div><div class="line">		output.flush();</div><div class="line">	&#125;</div><div class="line">	input.close();</div><div class="line">	output.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>对于乱码，目前两种解决方法：<br>1：用InputStreamReader转换流 InputStreamReader( inputstream s ,charset )</p>
<blockquote>
<p>例： BufferedReader input = new BufferedReader(new InputStreamReader(address.openStream(),”utf-8”));</p>
</blockquote>
<p>2：用String的构造函数String(byte[] ,charset )将字符数组转化成对应的编码</p>
<blockquote>
<p>例：System.out.println(new String (data,”utf-8”));</p>
</blockquote>
<hr>
<h4 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a><strong>UDP</strong></h4><p><em>UDP以数据为中心，不安全，数据可能丢失，效率高</em></p>
<p>DatagramSocket DatagramPacket<br>1 客户端</p>
<blockquote>
<p>1&gt;创建DatagramSocket类 + 指定端口<br>2&gt;数据 字节数组<br>3&gt;打包 DatagramPacket 服务器地址端口<br>4&gt;发送<br>5&gt;释放资源</p>
</blockquote>
<p>2 服务器端</p>
<blockquote>
<p>1&gt;创建服务端 DatagramSocket<br>2&gt;准备接受容器，字节数组，封装DatagramPacket<br>3&gt;包接受数据<br>4&gt;分析<br>5&gt;释放</p>
</blockquote>
<hr>
<p>DatagramSocket构造函数：<br><em>此类表示用来发送和接收数据报包的套接字。</em></p>
<blockquote>
<p>DatagramSocket()<br>构造数据报套接字并将其绑定到本地主机上任何可用的端口。<br>DatagramSocket(int port)<br>创建数据报套接字并将其绑定到本地主机上的指定端口。<br>DatagramSocket(int port, InetAddress laddr)<br>创建数据报套接字，将其绑定到指定的本地地址。<br>DatagramSocket(SocketAddress bindaddr)<br>创建数据报套接字，将其绑定到指定的本地套接字地址。 </p>
</blockquote>
<p>DatagramPacket 构造函数:<br><em>此类表示数据报包。</em></p>
<blockquote>
<p>接收：<br>DatagramPacket(byte[] buf, int length)<br>构造 DatagramPacket，用来接收长度为 length 的数据包。 </p>
<p>发送:<br>DatagramPacket(byte[] buf, int length, InetAddress address, int port)<br>构造数据报包，用来将长度为 length 的包发送到指定主机上的指定端口号。<br>DatagramPacket(byte[] buf, int length, SocketAddress address)<br>构造数据报包，用来将长度为 length 的包发送到指定主机上的指定端口号</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 客户端</span></div><div class="line">    ublic <span class="class"><span class="keyword">class</span> <span class="title">testUDPclient</span> </span>&#123;</div><div class="line">    	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    		DatagramSocket output = <span class="keyword">new</span> DatagramSocket(<span class="number">1234</span>);</div><div class="line">    		<span class="keyword">byte</span> [] data = <span class="string">"UDP数据"</span>.getBytes();</div><div class="line">    		DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(data,data.length,<span class="keyword">new</span> InetSocketAddress(<span class="string">"localhost"</span>,<span class="number">2000</span>));</div><div class="line">    		output.send(packet);</div><div class="line">    		output.close();</div><div class="line">    	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">// 服务器端</span></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testUDPserver</span> </span>&#123;</div><div class="line">    	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String [] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">    		DatagramSocket input = <span class="keyword">new</span> DatagramSocket(<span class="number">2000</span>);</div><div class="line">    		<span class="keyword">byte</span> [] data =  <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">    		DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(data,data.length);</div><div class="line">    		input.receive(packet);</div><div class="line">    		<span class="keyword">byte</span> [] info = <span class="keyword">new</span> <span class="keyword">byte</span> [<span class="number">1024</span>] ;</div><div class="line">    		info = packet.getData();</div><div class="line">    		<span class="keyword">int</span> len = packet.getLength();</div><div class="line">    		System.out.println(<span class="string">"已收到："</span>+<span class="keyword">new</span> String (info,<span class="number">0</span>,len));</div><div class="line">    		</div><div class="line">    		input.close();</div><div class="line">    	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>发送double类型的数据：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//服务器端，将接受的流转换为double型</span></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">convert</span> <span class="params">(<span class="keyword">byte</span> [] data)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		DataInputStream input = <span class="keyword">new</span> DataInputStream( <span class="keyword">new</span> ByteArrayInputStream(data));</div><div class="line">		<span class="keyword">double</span> s = input.readDouble();</div><div class="line">		<span class="keyword">return</span> s;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//客户端，将带发送的double型转换为byte数组</span></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span> [] convert(<span class="keyword">double</span> num ) <span class="keyword">throws</span> IOException&#123;</div><div class="line">		<span class="keyword">byte</span> [] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">		ByteArrayOutputStream a = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">		DataOutputStream b = <span class="keyword">new</span> DataOutputStream(a);</div><div class="line">		b.writeDouble(num);</div><div class="line">		data = a.toByteArray();</div><div class="line">		<span class="keyword">return</span> data;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p><strong>ByteArrayInputStream 和 ByteArrayOutputStream 将一个字节数组当作流输入、输出的来源</strong></p>
<blockquote>
<p><br><br>ByteArrayInputStream 将字节数组转换为流     byte[]—&gt;流<br>—-read() 将字节数组读取到流中</p>
<p>ByteArrayOutputStream 将将流转换为字节数组  流—&gt; byte[]<br>—-toByteArray() 返回数组<br>—-write(byte [],int off,int len ) 将数组中的数据写入到流中</p>
<p>DataOutputStream 将double类型写入到流中。   double—&gt; 流<br>—-writeXXX() </p>
<p>DataInputStream  从流中读取数据，并转换为相应的类型  流—&gt;double<br>—-readXXX()</p>
</blockquote>
<p>Socket通讯 （基于TCP）<br><em>面向连接，安全可靠，效率低</em></p>
<p>1、面向连接： 请求-相应 request-response<br>2、Socket编程</p>
<p>1&gt;服务器端<br>创建服务器 指定端口 ServerSocket(int port)<br>接受客户连接 accept() 返回Socket类型<br>传递数据</p>
<p>2&gt;客户端<br>创建客户端 指定服务器端+端口 Socket(String s ,int port )<br>传递数据</p>
<p>发送信息：<br>Socket.getOutputStream();<br>write()<br>flush()</p>
<p>接受数据：<br>client.getInputStream();<br>read()</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 客户端</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testTCPclient</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException, IOException </span>&#123;</div><div class="line">		Socket socket = <span class="keyword">new</span> Socket(<span class="string">"localhost"</span>,<span class="number">2000</span>);</div><div class="line">		String data = <span class="string">"TCP信息"</span>;</div><div class="line"><span class="comment">//		OutputStream output = socket.getOutputStream();</span></div><div class="line">		DataOutputStream output =  <span class="keyword">new</span> DataOutputStream(socket.getOutputStream());</div><div class="line">		</div><div class="line">		output.writeUTF(data);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//服务器端</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">		ServerSocket socket = <span class="keyword">new</span> ServerSocket(<span class="number">2000</span>);</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Socket server = socket.accept();</div><div class="line">			System.out.println(<span class="string">"已连接"</span>);</div><div class="line"><span class="comment">//			InputStream input = server.getInputStream();</span></div><div class="line">			DataInputStream input = <span class="keyword">new</span> DataInputStream(server.getInputStream());</div><div class="line">			String s = input.readUTF();</div><div class="line">			System.out.println(s);</div><div class="line">			</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			System.out.println(<span class="string">"连接失败"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p><em>不同的协议之间端口号可以重复，同一个协议中端口号不能重复</em></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java线程]]></title>
      <url>/2016/12/04/Java%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p><strong>Callable 可以返回值</strong></p>
<blockquote>
<p>ExecutorServers<br>ExecutorServers ser = ExevuteServers.newFixedThread()<br>Future result = sesr.submit(类);<br>ser.shutdownNow();<br>停止线程</p>
</blockquote>
<a id="more"></a>
<p>线程类中定义线程体使用的标志<br>线程提内使用该标志<br>提供对外的方法改变该标识<br>外部调用方法改变标识</p>
<blockquote>
<p>run (){<br>while(flag){<br>}<br>}</p>
</blockquote>
<p><strong>阻塞</strong><br></p>
<blockquote>
<p>join()合并线程<br><br>yeild()暂停当前正在执行的线程，执行其他线程static<br><br>sleep()暂停，不释放锁<br><br>–&gt;    与时间相关<br><br>–&gt;    模拟网络延时<br><br>system.currentTimeMillis()当前时间</p>
</blockquote>
<hr>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line">    //join 合并线程，执行当前线程时加入另一个线程，并等待另一个线程执行完毕</div><div class="line">    </div><div class="line">    import java.util.Locale.Category;</div><div class="line">    </div><div class="line">    public class Test1 &#123;</div><div class="line">    	public static void main(String [] args) throws InterruptedException&#123;</div><div class="line">    		home m = new home();</div><div class="line">    		</div><div class="line">    		Thread cat = new Thread(m);	</div><div class="line">    		cat.setName("cat");</div><div class="line">    		cat.start();</div><div class="line">    		</div><div class="line">    		for(int i = 0 ; i&lt; 10; i++)&#123;</div><div class="line">    			cat.join();</div><div class="line">    			System.out.println("main");</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    &#125;</div><div class="line">    class home implements Runnable&#123;</div><div class="line">    	public void run() &#123;</div><div class="line">    		for (int i = 0 ; i &lt; 10 ; i++)&#123;</div><div class="line">    			System.out.println("This is "+Thread.currentThread().getName()+i);</div><div class="line">    			try &#123;</div><div class="line">    				Thread.sleep(200);</div><div class="line">    			&#125; catch (InterruptedException e) &#123;</div><div class="line">    				// TODO Auto-generated catch block</div><div class="line">    				e.printStackTrace();</div><div class="line">    			&#125;</div><div class="line">    </div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">-------------------------------------------------------------------------------</div><div class="line">    // yield 暂停本线程执行其他线程（虽然在我电脑上试没有任何反应。。。）</div><div class="line">    		for(int i = 0 ; i&lt; 10; i++)&#123;</div><div class="line">    //			if(i%2==0)</div><div class="line">    			Thread.yield();</div><div class="line">    			System.out.println("main");</div><div class="line">    		&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">#### 优先级</div><div class="line"></div><div class="line">*MAX_PRIOIRTY 10&lt;br/&gt;</div><div class="line">NORM_PRIOIRTY 5&lt;br/&gt;</div><div class="line">MIN_PRIOIRTY 1*</div><div class="line"></div><div class="line">&gt;isAlive() 判断线程是否还活着</div><div class="line">&gt;Thread.currentThread()当前线程 static</div><div class="line">&gt;getName() </div><div class="line"></div><div class="line">*setPriority()</div><div class="line">优先级代表概率，不是绝对的先后顺序*</div><div class="line"></div><div class="line"></div><div class="line">####**线程的同步与锁定**</div><div class="line">多个线程访问同一资源：线程安全</div><div class="line"></div><div class="line">StringBuffer--append</div><div class="line">hashtable</div><div class="line">1.同步块/同步方法</div><div class="line"></div><div class="line">同步方法：</div><div class="line"></div><div class="line">```java</div><div class="line">    package 线程;</div><div class="line">    </div><div class="line">    import java.util.*;</div><div class="line">    </div><div class="line">    import One.sss;</div><div class="line">    </div><div class="line">    public class tongbu &#123;</div><div class="line">    	public static void main(String [] args) throws InterruptedException&#123;</div><div class="line">    		a m = new a();</div><div class="line">    		</div><div class="line">    		Thread cat = new Thread(m);</div><div class="line">    		Thread dog = new Thread(m);</div><div class="line">    		</div><div class="line">    		cat.setName("cat");</div><div class="line">    		dog.setName("dog");</div><div class="line">    		</div><div class="line">    		cat.start();</div><div class="line">    		dog.start();</div><div class="line">    		</div><div class="line">    	&#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    class a implements Runnable&#123;</div><div class="line">    	int s =10;</div><div class="line">    	@Override</div><div class="line">    	public  void run() &#123;</div><div class="line">    		// TODO Auto-generated method stub</div><div class="line">    			test1();</div><div class="line">    	&#125;</div><div class="line">    	</div><div class="line">    	private synchronized void test1()&#123;</div><div class="line">    		for (int i = 0 ; i &lt; 10 ; i++)&#123;</div><div class="line">    			if (s&lt;=0)</div><div class="line">    				break;</div><div class="line">    			System.out.println(Thread.currentThread().getName()+"get"+s--);</div><div class="line">    			try &#123;</div><div class="line">    				Thread.sleep(200);</div><div class="line">    			&#125; catch (InterruptedException e) &#123;</div><div class="line">    				// TODO Auto-generated catch block</div><div class="line">    				e.printStackTrace();</div><div class="line">    			&#125;</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<hr>
<p>同步块：<br><br>synchronize(引用类型)<br><br>{ 同步的部分 }</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">//同步块，参数为引用`</span></div><div class="line"><span class="function"><span class="keyword">private</span>  <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i++)&#123;</div><div class="line">			<span class="keyword">if</span> (s&lt;=<span class="number">0</span>)</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">			System.out.println(Thread.currentThread().getName()+<span class="string">"get"</span>+s--);</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				Thread.sleep(<span class="number">200</span>);</div><div class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>锁定范围难把握<br><br>线程安全的效率相对低下</p>
</blockquote>
<h3 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h3><p>一个类只有一个对象<br>双重检查<br>1、懒汉式：<br>将构造器设为私有。避免外部直接创建对象<br>声明私有的静态属性<br>对外部提供访问属性的静态方法，确保对象的存在<br>锁定静态的信息（XXX.class）</p>
<p>2、饿汉式<br>将构造器设为私有。避免外部直接创建对象<br>声明私有的静态属性，同时创建对象<br>对外部提供访问属性的静态方法<br>RunTime</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">    <span class="comment">//懒汉式</span></div><div class="line">    <span class="comment">//可以满足要求但是效率不高</span></div><div class="line">    <span class="keyword">package</span> 线程;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 单例 </span>&#123;</div><div class="line">    	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">    		test s1 = <span class="keyword">new</span> test();</div><div class="line">    		test s2 = <span class="keyword">new</span> test();</div><div class="line">    		</div><div class="line">    		s1.start();</div><div class="line">    		s2.start();</div><div class="line">    	&#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Single</span> </span>&#123;</div><div class="line">    </div><div class="line">    	<span class="keyword">private</span> <span class="keyword">static</span> Single data = <span class="keyword">null</span>;</div><div class="line">    	<span class="comment">// 私有的构造函数</span></div><div class="line">    	<span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span></span>&#123;</div><div class="line">    	&#125;</div><div class="line">    	</div><div class="line">    	<span class="comment">//提供外界访问的函数</span></div><div class="line">    	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Single <span class="title">getInstance</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</div><div class="line">    		<span class="keyword">if</span>(<span class="keyword">null</span> == data)&#123;</div><div class="line">    			Thread.sleep(<span class="number">1000</span>);</div><div class="line">    			data = <span class="keyword">new</span> Single();</div><div class="line">    		&#125;</div><div class="line">    		<span class="keyword">return</span> data;</div><div class="line">    	&#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">test</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">    	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">    		<span class="keyword">try</span> &#123;</div><div class="line">    			System.out.println(Single.getInstance());</div><div class="line">    		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">    			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">    			e.printStackTrace();</div><div class="line">    		&#125;</div><div class="line">    <span class="comment">//		System.out.println(b);</span></div><div class="line">    	&#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">--------------------------------------------------------------</div><div class="line"></div><div class="line">    <span class="comment">//可以使用块同步</span></div><div class="line">    	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</div><div class="line">    		<span class="keyword">synchronized</span>(Single.class)&#123;</div><div class="line">    			<span class="keyword">if</span>(<span class="keyword">null</span> == data)&#123;</div><div class="line">    				Thread.sleep(<span class="number">1000</span>);</div><div class="line">    				data = <span class="keyword">new</span> Single();</div><div class="line">    			&#125;</div><div class="line">    			<span class="keyword">return</span> data;</div><div class="line">    		&#125;</div><div class="line">    	&#125;</div><div class="line"></div><div class="line">--------------------------------------------------------------</div><div class="line"></div><div class="line">    <span class="comment">//双重检查</span></div><div class="line">    	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance3</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">    		<span class="keyword">if</span> (<span class="keyword">null</span> == data) &#123;</div><div class="line">    			<span class="keyword">synchronized</span> (Single.class) &#123;</div><div class="line">    				<span class="keyword">if</span> (<span class="keyword">null</span> == data) &#123;</div><div class="line">    					Thread.sleep(<span class="number">1000</span>);</div><div class="line">    					data = <span class="keyword">new</span> Single();</div><div class="line">    				&#125;</div><div class="line">    			&#125;</div><div class="line">    		&#125;</div><div class="line">    		<span class="keyword">return</span> data;</div><div class="line">    	&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>饿汉式<br><br>private static Single data = new Single();<br><br>声明时创建</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IO流（2）]]></title>
      <url>/2016/11/30/IO%E6%B5%81(2)/</url>
      <content type="html"><![CDATA[<h4 id="节点流："><a href="#节点流：" class="headerlink" title="节点流："></a><strong>节点流</strong>：</h4><p>字节数组输入流 ByteArrayInputStream<br>字节数组输出流 ByteArrayOutputStream<br><a id="more"></a></p>
<blockquote>
<p>将字节数组转化成流<br>ByteArrayInputStream(byte [] )<br>不用关闭<br>toByteArray() 输出到字节数组</p>
</blockquote>
<h4 id="处理流"><a href="#处理流" class="headerlink" title="处理流"></a><strong>处理流</strong></h4><p>输入流：DataInputStream(InputStream x)  readXXX()<br>输出流：DataOutputStream(OutputStream x) writeXXX() </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// DataInputStream/DataOutputStream 写入到文件/从文件读取</div><div class="line">	public static void main (String [] args) throws IOException&#123;</div><div class="line">		File file = new File(&quot;D:/桌面/DataInputStream.txt&quot;);</div><div class="line">		DataInputStream input = new DataInputStream(new FileInputStream(file));</div><div class="line">//		DataOutputStream output = new DataOutputStream(new FileOutputStream(file));</div><div class="line">		int a = 100;</div><div class="line">		double b = 200;</div><div class="line">		String c = &quot;string&quot;;</div><div class="line">//		output.writeInt(a);</div><div class="line">//		output.writeDouble(b);</div><div class="line">//		output.writeUTF(c);</div><div class="line">		int d = input.readInt();</div><div class="line">		double e = input.readDouble();</div><div class="line">		String f = input.readUTF();</div><div class="line">		System.out.println(d);</div><div class="line">		System.out.println(e);</div><div class="line">		System.out.println(f);</div><div class="line">//		output.close();</div><div class="line">//		input.close();</div><div class="line">		</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h4 id="对象序列化："><a href="#对象序列化：" class="headerlink" title="对象序列化："></a><strong>对象序列化</strong>：</h4><p>ObjectInputStream -&gt;  readObject()<br>ObjectOutputStream -&gt; writeObject()<br>先序列化后反序列化,对象必须使用java.io.Seriallizable接口<br>不是所有属性都需要序列化，用transient表示不需要序列化的属性</p>
<blockquote>
<p>可变参数只能放在新蔡的最后一个位置（Closeable …）<br>…可变参数，处理方式与数组一致<br>try- with-resource</p>
</blockquote>
<hr>
<p>####<strong>打印流和输入流</strong><br>system.out<br>system.in<br>printStream<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PrintStream ps = System.out</div><div class="line">ps.println();</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ps = new PrintStream(new BufferedOutputStream(new FileOutputStream(src)))</div><div class="line">ps.println(); //输出到文件</div></pre></td></tr></table></figure>
<blockquote>
<p>System.out<br>System.err<br>System.in 键盘输入</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PrintStream output = new PrintStream(new FileOutputStream(new File(&quot;D:/桌面/2.txt&quot;)));</div><div class="line">output.print(&quot;printStream&quot;);</div></pre></td></tr></table></figure>
<blockquote>
<p>InputStream in = System.in;//system.in 实际上是一个InputStream流</p>
</blockquote>
<h5 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a><strong>重定向</strong></h5><p>setIn()<br>setOut()<br>setErr()</p>
<blockquote>
<p>System.setOut(new PrintStream(new FileOutputStream(“”)));<br>System.out.println(“2333”);<br>System.setOut(new PrintStream(new FileOutputStream(new FileDescripter.out)));//返回控制台</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">System.setOut(new PrintStream(new FileOutputStream(&quot;D:/桌面/3.txt&quot;)));</div><div class="line">System.out.println(&quot;重定向&quot;);</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IO流]]></title>
      <url>/2016/11/30/IO%E6%B5%81/</url>
      <content type="html"><![CDATA[<h3 id="File"><a href="#File" class="headerlink" title="File"></a>File</h3><p>路径分隔符–File.pathSeparator<br>文件分隔符–File.seprarator</p>
<a id="more"></a>
<p>路径表示形式</p>
<blockquote>
<p>path = “E://xp//test/2.jpg”<br>path =”E:”+File.separator+”xp”+File.separator….课跨平台的路径<br>path = “E:\xp\test\2.jpg”–&gt;path = “E:/xp/test/2.jpg”(推荐的方式)</p>
</blockquote>
<p>常用的方法：</p>
<blockquote>
<p>getName()<br>getParent()返回上一级目录，没有上一级返回空<br>exists()文件是否存在<br>canRead()文件是否可读<br>isFile()<br>isDirectory() 判断<br>length()长度，字节数/文件夹无法读出长度<br>creatNewFile()创建文件(返回boolean类型)（若文件已经存在返回false）<br>delete()删除文件返回（boolean）<br>creatTempFile() 创建临时文件<br>deleteOnExit() 退出时自动删除<br>mkdir()创建目录，必须确保父目录存在<br>makirs()创建目录，递归创建目录。<br>String [] list()返回文件名称<br>File [] listFiles() 返回目录中的文件<br>listRoots() 根路径<br>FilenameFilter 过滤器</p>
</blockquote>
<hr>
<p>1 字节流：</p>
<blockquote>
<p>输入流: InputStream ,read(byte[]),read(byte[],int off,int len),close()<br>    FileInputStream()<br>输出流: OutputStream,write(byte[]),write(char [] ,int off,int len),flush(),close()<br>    FileOutputStream()</p>
</blockquote>
<p>2 字符流:</p>
<blockquote>
<p>输入流: Reader read(char []) ,read(char [] ,int off,int len),close()<br>    FileReader()<br>输出流: Writer write(char []),writer(char [] ,int off,int len),flush(),close()<br>    FileWriter()</p>
</blockquote>
<h4 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a><strong>字节流</strong></h4><ol>
<li>建立联系 File</li>
<li>选择流 文件输入流</li>
<li>操作</li>
<li>关闭</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 读取文件</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</div><div class="line">	File f = <span class="keyword">new</span> File(<span class="string">"D:/桌面/a.txt"</span>);</div><div class="line">	<span class="keyword">byte</span> [] file = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">	InputStream in = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		in = <span class="keyword">new</span> FileInputStream(f);</div><div class="line">		<span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span>(-<span class="number">1</span> != (len = in.read(file)))&#123;</div><div class="line">			String s = <span class="keyword">new</span> String(file, <span class="number">0</span>, len);</div><div class="line">			System.out.print(s);</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">		e.printStackTrace();</div><div class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">		<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">		e.printStackTrace();</div><div class="line">	&#125;<span class="keyword">finally</span> &#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">if</span> (in!=<span class="keyword">null</span>)</div><div class="line">			in.close();</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>建立联系 File</li>
<li>选择流 文件输出流 OutputStream FileOutputStream</li>
<li>操作 write() flush()</li>
<li>关闭</li>
</ol>
<blockquote>
<p>OutputStream 将数据写入到文件中，FileOutputStream将数据写入到流中<br>InputStream 将数据从文件中读取，FileInputStream将从六中读取数据<br>FileOutputStream(File , true)将数据追加到文件中，默认为false<br><strong><em>一定一定一定要记得关闭流</em></strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//写入到文件</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</div><div class="line">		File file = <span class="keyword">new</span> File(<span class="string">"D:/桌面/b.txt"</span>);</div><div class="line">		OutputStream out = <span class="keyword">null</span>;</div><div class="line">		</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			out = <span class="keyword">new</span> FileOutputStream(file,<span class="keyword">false</span>);</div><div class="line">			String s = <span class="string">"写入文件操作\r\n"</span>;</div><div class="line">			<span class="keyword">byte</span> []  s2 = s.getBytes();</div><div class="line">			out.write(s2);</div><div class="line">			</div><div class="line">			</div><div class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;<span class="keyword">finally</span>&#123;</div><div class="line">			<span class="keyword">if</span> (out!=<span class="keyword">null</span>)&#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					out.close();</div><div class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">					<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//复制文件</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String [] args)</span></span>&#123;</div><div class="line">		File file1 = <span class="keyword">new</span> File(<span class="string">"D:/桌面/tree.jpg"</span>);</div><div class="line">		File file2 = <span class="keyword">new</span> File(<span class="string">"D:/桌面/trees.jpg"</span>);</div><div class="line">		InputStream input = <span class="keyword">null</span>;</div><div class="line">		OutputStream output = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			input = <span class="keyword">new</span> FileInputStream(file1);</div><div class="line">			output = <span class="keyword">new</span> FileOutputStream(file2);</div><div class="line">			<span class="keyword">byte</span> [] data = <span class="keyword">new</span> <span class="keyword">byte</span> [<span class="number">1024</span>*<span class="number">4</span>];</div><div class="line">			<span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">			</div><div class="line">			<span class="keyword">while</span>(-<span class="number">1</span> != (len = input.read(data)))&#123;</div><div class="line">				output.write(data,<span class="number">0</span>, len);</div><div class="line">				System.out.println(data);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">			System.out.println(<span class="string">"没有找到文件"</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;<span class="keyword">finally</span>&#123;</div><div class="line">			</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				output.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				input.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">			System.out.println(<span class="string">"写入成功"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<hr>
<p>字符流:只能处理纯文本.txt .html<br>Writer FileWriter<br>Reader FileReader<br>1 建立联系<br>2 选择流 Writer FileWriter<br>3 读取char[] dlush<br>4 关闭</p>
<blockquote>
<p>FileWriter(File ,true) 追加<br>append()追加</p>
</blockquote>
<hr>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//FileReader 读取文件</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testFileReader</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String  []  args)</span></span>&#123;</div><div class="line">		File file = <span class="keyword">new</span> File(<span class="string">"D:/桌面/switch.txt"</span>);</div><div class="line">		File file2 = <span class="keyword">new</span> File(<span class="string">"D:/桌面/switch2.txt"</span>);</div><div class="line">		</div><div class="line">		Reader input = <span class="keyword">null</span>;</div><div class="line">		Writer output = <span class="keyword">null</span>;</div><div class="line">		</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			input = <span class="keyword">new</span> FileReader(file);</div><div class="line">			<span class="keyword">char</span> [] data = <span class="keyword">new</span> <span class="keyword">char</span> [<span class="number">1024</span>];</div><div class="line">			<span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">			<span class="keyword">while</span> (-<span class="number">1</span> != (len = input.read(data)))&#123;</div><div class="line">				String s = <span class="keyword">new</span> String(data, <span class="number">0</span>, len);</div><div class="line">				System.out.println(s);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">			System.out.println(<span class="string">"文件读取失败"</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;<span class="keyword">finally</span>&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				input.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">				System.out.println(<span class="string">"关闭失败"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//FileWriter复制文件</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testFileReader</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String  []  args)</span></span>&#123;</div><div class="line">		File file = <span class="keyword">new</span> File(<span class="string">"D:/桌面/switch.txt"</span>);</div><div class="line">		File file2 = <span class="keyword">new</span> File(<span class="string">"D:/桌面/switch2.txt"</span>);</div><div class="line">		</div><div class="line">		Reader input = <span class="keyword">null</span>;</div><div class="line">		Writer output = <span class="keyword">null</span>;</div><div class="line">		</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			input = <span class="keyword">new</span> FileReader(file);</div><div class="line">			output = <span class="keyword">new</span> FileWriter(file2);</div><div class="line">			</div><div class="line">			<span class="keyword">char</span> [] data = <span class="keyword">new</span> <span class="keyword">char</span> [<span class="number">1024</span>];</div><div class="line">			<span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">			<span class="keyword">while</span> (-<span class="number">1</span> != (len = input.read(data)))&#123;</div><div class="line">				String s = <span class="keyword">new</span> String(data, <span class="number">0</span>, len);</div><div class="line">				output.write(s);</div><div class="line">	<span class="comment">//			System.out.println(s);</span></div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">			System.out.println(<span class="string">"文件读取失败"</span>);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;<span class="keyword">finally</span>&#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				input.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">				System.out.println(<span class="string">"关闭失败"</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				output.close();</div><div class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">				<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">				e.printStackTrace();</div><div class="line">				System.out.println(<span class="string">"关闭输出流失败"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h4 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a><strong>缓冲流</strong></h4><p>1，字节缓冲流</p>
<blockquote>
<p>BufferedInputStream<br>BufferedOutputStream</p>
</blockquote>
<p>2,字符缓冲流</p>
<blockquote>
<p>BufferedReader ReadLine()<br>BufferedWriter newLine()换行<br>字节流文件拷贝+缓冲流，提高性能<br>缓冲流(节点流)<br>//使用新增方法不能发生多态</p>
</blockquote>
<hr>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//用BufferedReader包装</span></div><div class="line">		BufferedReader input = <span class="keyword">null</span>;</div><div class="line">		BufferedWriter output = <span class="keyword">null</span>;</div><div class="line">		</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			input = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(file));</div><div class="line">			output = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(file2));</div><div class="line">			String temp ;</div><div class="line">			<span class="keyword">while</span>(<span class="keyword">null</span> != (temp = input.readLine()))&#123;</div><div class="line">				System.out.println(temp);</div><div class="line">			&#125;</div><div class="line">。。。。。。</div><div class="line"><span class="comment">//输出方式同理，writer（String s ）</span></div></pre></td></tr></table></figure>
<hr>
<p>转换流 ： 字节流转字符流 处理乱码（编码集、解码集）</p>
<blockquote>
<p>String(byte [] bytes,Charset charset) 使用charset编码来编码byte数组<br>String(byte [] bytes,int offset, int length,Charset charset) 编码byte数组的子数组<br>getbytes()使用默认的编码方式返回字节数组<br>getBytes(Charset charset)使用指定的编码方式返回字节数组</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//处理文件编码</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String [] args)</span> <span class="keyword">throws</span> UnsupportedEncodingException</span>&#123;</div><div class="line">		String str1 = <span class="string">"字符串"</span>;</div><div class="line">		<span class="keyword">byte</span> [] data = str1.getBytes(<span class="string">"utf-8"</span>);</div><div class="line">		String str2 = <span class="keyword">new</span> String(data, <span class="string">"utf-8"</span>);</div><div class="line">		System.out.println(str2);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>字节转为字符:（转换流）<br><strong>InputStreamReader()</strong><br><strong>OutputStreamWriter()</strong></p>
<blockquote>
<p>//InputStreamReader(new FileInputStream(new File()))</p>
</blockquote>
<hr>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//字节流转字符流</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String [] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">		File file1 = <span class="keyword">new</span> File(<span class="string">"D:/桌面/1.txt"</span>);</div><div class="line">		File file2 = <span class="keyword">new</span> File(<span class="string">"D:/桌面/2.txt"</span>);</div><div class="line">		</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			BufferedReader input = <span class="keyword">new</span> BufferedReader(</div><div class="line">					<span class="keyword">new</span> InputStreamReader(</div><div class="line">							<span class="keyword">new</span> FileInputStream(file1),<span class="string">"utf-8"</span>)</div><div class="line">					);</div><div class="line">			String len ;</div><div class="line">			<span class="keyword">while</span> (<span class="keyword">null</span> != (len = input.readLine()))&#123;</div><div class="line">				System.out.println(len);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java异常]]></title>
      <url>/2016/11/16/%E5%BC%82%E5%B8%B8/</url>
      <content type="html"><![CDATA[<p>1.可以自定义一个异常，方法是继承Throwable类或者是继承Exception类。其实Exception类就是Throwable的子类。<br></p>
<a id="more"></a>
<p>2.当有一个函数会抛出我们自定义的异常，需要声明这个函数会抛出什么样的异常 例如：</p>
<blockquote>
<p>public static  void a() throws wrong{</p>
</blockquote>
<p>这里，throw是抛出一个异常，而Throws是声明一个函数会抛出异常</p>
<blockquote>
<p>e.getMessage()             异常中的信息<br><br>println（e）                异常的名字和异常中储存的值<br><br>e.printStacktrace()        跟踪异常出现位置<br></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">wrong</span> <span class="keyword">extends</span> <span class="title">Throwable</span></span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 异常 </span>&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> [] a = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">10</span>];</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</div><div class="line">		<span class="keyword">try</span>&#123;</div><div class="line">			a();</div><div class="line">		&#125;<span class="keyword">catch</span>(wrong e )&#123;</div><div class="line">			System.out.println(<span class="string">"这是自定义的异常"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> <span class="keyword">throws</span> wrong</span>&#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> wrong();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>1.当一个异常继承于另一个异常时，捕捉父类异常时就可以同时捕捉子类的异常。<br>也就是说因为Exception是所有异常的父类，所以捕捉Exception异常时就可以捕捉所有的异常</p>
<p>2.当同时捕捉多个异常时，只会有一个异常被捕捉到。</p>
<p>3.当语句中先捕捉父类异常再捕捉子类异常时会报错。提示这是一个永远不会执行到的异常。</p>
<blockquote>
<p> <em>Unreachable catch block for wrong2</em></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">wrong</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;	<span class="comment">//父类异常</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">wrong2</span> <span class="keyword">extends</span> <span class="title">wrong</span></span>&#123;		<span class="comment">//子类异常</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 异常 </span>&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> [] a = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">10</span>];</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</div><div class="line">		<span class="keyword">try</span>&#123;</div><div class="line">			a();</div><div class="line">		&#125;<span class="keyword">catch</span>(wrong e )&#123;</div><div class="line">			System.out.println(<span class="string">"这是异常wrong"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> <span class="keyword">throws</span> wrong2</span>&#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> wrong2();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1.当覆盖函数的时候，子类不能声明抛出比父类的版本更多的异常。<br>2.在子类的构造函数中，必须声明父类可能抛出的全部异常。</p>
<p>如果有以下三种异常</p>
<pre><code>class wrong1 extends Exception {}    //父类异常
class wrong2 extends wrong1{}        //子类异常
class wrong3 extends Exception{}     
</code></pre><p>当父类的函数f()抛出异常wrong1时，子类中覆盖它的函数的异常不能比它抛出更多的异常,但是子类的构造函数必须包含父类的所有异常</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">   <span class="comment">//父类</span></div><div class="line">   <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</div><div class="line">   	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">throws</span> wrong1,wrong3</span>&#123;&#125;</div><div class="line">   	test()<span class="keyword">throws</span> wrong1&#123;&#125;</div><div class="line">   &#125;</div><div class="line"><span class="comment">//子类</span></div><div class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 异常 <span class="keyword">extends</span> <span class="title">test</span> </span>&#123;</div><div class="line">	<span class="comment">//构造函数</span></div><div class="line">   	异常()<span class="keyword">throws</span> wrong1,wrong3&#123;&#125;</div><div class="line"></div><div class="line">	<span class="comment">//子类覆盖的函数</span></div><div class="line">   	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span><span class="keyword">throws</span> wrong1 ,wrong3</span></div><div class="line">   	&#123;&#125;</div><div class="line">   	</div><div class="line">   	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</div><div class="line">   		<span class="keyword">try</span>&#123;</div><div class="line">   			a();</div><div class="line">   		&#125;<span class="keyword">catch</span>(wrong1 e )&#123;</div><div class="line">   			System.out.println(<span class="string">"这是异常wrong1"</span>);</div><div class="line">   		&#125;<span class="keyword">catch</span>(wrong3 e)&#123;&#125;</div><div class="line">   	&#125;</div><div class="line">   	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> <span class="keyword">throws</span> wrong1,wrong3</span>&#123;</div><div class="line">   		test s = <span class="keyword">new</span> test();</div><div class="line">   		s.f();</div><div class="line">   	&#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux常用命令]]></title>
      <url>/2016/09/11/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p><img src="http://img.blog.csdn.net/20161206234342055?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdHdpbGlnaHRfa2FybA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="Linux"><br>Linux ：</p>
<p>1 打开shell显示的第一行 twilight @ twilight ~ $分为三部分，第一部分是@前代表当前的登录用户，@后面的是电脑的主机名 ，~是当前所在的位置，表示家目录,我的家目录是/home/twilight。$是普通用户的提示符，root用户是#、</p>
<a id="more"></a>
<p>2 用ls –lh查看当前目录下的文件的详细信息时第一列的内容：</p>
<p>-rw-r- -r–   第一个-表示文件类型（-表示普通类型、d表示目录、l表示软连接），后面九个字符分三个一组分别表示：文件所属者的权限、同组用户的权限、其他组用户的权限。-rw-r- -r- -也可以表示成644，Chmod 644 test.txt 表示把以上权限赋给test.txt文件。</p>
<p>3    mkdir +目录名称 表示创建一个分组，。但是mkdir a/b/会报错，因为这时候需要用到递归创建（mkdir -p），递归创建可以同时创建路径中的子目录和上层的目录。</p>
<p>4   pwd 显示当前所在目录</p>
<p>5     rm –rf 强制删除目录和文件，rm –rf mt/* 表示删除目录中的文件。</p>
<p>6     cp /路径/文件名 /路径/文件名    复制命令，</p>
<pre><code>-r 复制目录

-a 复制完全相同的文件，包括创建时间和权限
</code></pre><p>7  mv 剪切命令  （将文件剪切到源目录可以改文件名）</p>
<p>8     locate +文件名    按文件名搜索以该文件名开头的文件，不是完全匹配，在数据库中搜索，速度快，数据库位置 /var/lib/mlocate 该数据库一天一更新，但是可以用updatedb强制更新 </p>
<p>9 whereis 搜索命令的位置</p>
<pre><code>-b 只查找可执行文件

-m 只查找帮助文件
</code></pre><p>10  find + 文件名 （完全匹配）                      find / -name   filename按名称查找文件</p>
<pre><code>find / -inamefilename 不分大小写

find / -userusername 按所有者查找

find /-nouser 查找没有所有者的文件

find /-mtime+10 查找10天外的文件

（-mtime修改内容 -ctime修改属性 -atime 访问时间）

find / -size+25k 查找大于25k的文件

（25k小写，25M大写；）

find / -size+20k -a -size  -30k 查找大于20k小于30k文件

find / -size+20k -a -size -30k -exec ls -hl {} \;查找并输出

（exec+命令+ {} \; 对搜索结果操作）
</code></pre><p>11        grep 字符串 文件名    查找文件内容中的字符串，</p>
<pre><code>-i 忽略大小写 

-v排除字符串
</code></pre><p>12   man -f /whatis   +命令   查看命令级别和作用                 </p>
<p>13    man  -k/apropos     查看包含该命令名的命令</p>
<p>14               zip 压缩文件名 源文件        压缩文件</p>
<pre><code>zip -r 压缩文件名 源文件      压缩目录

unzip 文件名                                解压
</code></pre><p>15       gzip 源文件       压缩源文件消失</p>
<pre><code>gzip -r                            压缩目录下的文件

gzip -c 源文件 &gt; 压缩文件（源文件不消失 ）

(   &gt;  把命令结果写入指定文件  ）

gzip -d / gunzip   解压文件
</code></pre><p>16               bzip2 源文件    压缩（源文件消失）</p>
<pre><code>bzip2 -k 源文件 （保留源文件）

bzip -d/bunzip   解压
</code></pre><p>17               tar -cvf 打包文件名 源文件      打包</p>
<pre><code>tar -cvf 打包文件名                       解打包
</code></pre><p>18               tar -zcvf 压缩包名（tar .gz) 源文件            打包并压缩</p>
<pre><code>tar -zxvf 压缩包名（tar .gz) 源文件              解打包并解压

tar -jcvf压缩包名（tar .bz2) 源文件            打包并压缩

tar -jxvf 压缩包名（tar .bz2)  源文件      解打包并解压
</code></pre><p>19    shutdown    【选项】   时间</p>
<pre><code>（        -c  取消                         -h关机                   -r 重启  ）
</code></pre><p>28    mount  【-t    文件系统】 【-o   特殊选项】  设备文件名  挂载点</p>
<pre><code>mount -a      所有设备自动挂载
</code></pre><p>（  文件系统  ext3.   Ext4   .ios9600 ）</p>
<p>（  挂载点     已存在的空白目录           ）</p>
<p>29  挂载光盘：</p>
<pre><code>       1 mkdir    /mnt/cdrom/

       2mount     /dev/sr0   /mnt/cdrom（sr0是光驱代号）

卸载光盘：

       umount     /mnt/cdrom/    或者   /dev/sr0
</code></pre><p>30  挂载u盘  </p>
<pre><code>mount  -t vfat   /dev/sdb1  /mnt/usb          (vfat是fat32)
</code></pre><p>31   echo   内容 （当内容中有空格时 加”  “ ）</p>
<pre><code>-e          支持反斜杠的字符转换 
</code></pre><p>32         echo -e “\e[1;34m”                 开启颜色</p>
<pre><code>echo -e “\e[0m“            关闭颜色
</code></pre><p>（30 红 ，32绿，34蓝）</p>
<p>33     脚本（输出hello world）</p>
<p>#！/bin/bash                       （用bin/下的bash执行脚本）</p>
<p>echo “ abcd”</p>
<p>执行方式 ：</p>
<pre><code>1   bash   hello.sh

2   chmod 755 hello.sh

        ./hello.sh
</code></pre><p>34         alias                                 查看系统所有别名</p>
<pre><code>alias 别名=”原名” （临时生效，重启失效）

unalias                            临时删除别名

（将文件写入/.bashrc中重启永久生效）

（source   .bashrc 不重启直接生效）
</code></pre><p>35   输出重定向</p>
<p>正确命令：</p>
<p>1命令 &gt; 文件    命令结果输入到文件中（覆盖源文件）</p>
<p>2命令 &gt;&gt;文件     命令结果追加到文件中 （追加）</p>
<p>错误命令：</p>
<p>1命令 2&gt;文件     命令结果输入到文件中（覆盖源文件） （无空格）</p>
<p>2命令 2&gt;&gt;文件   命令结果追加到文件中 （追加）          （无空格）</p>
<p>正确&amp;错误：</p>
<p>1 命令  &gt;&gt; 文件 2&gt;&amp;1  </p>
<p>2 命令 &amp;&gt;&gt; 文件</p>
<p>3命令 &gt;&gt;文件1    2&gt;&gt;文件2    </p>
<p>36   多命令顺序执行</p>
<p>1     ;            命令1  ; 命令2              命令之间无关</p>
<p>2     &amp;&amp;           命令1 &amp;&amp;命令2          1正确执行2 ，1错误不执行2</p>
<p>3    ||            命令1 || 命令2          1错误执行2 ，1正确不执行2</p>
<p>37   管道符 </p>
<pre><code>命令1 | 命令2   （1的结果作为2 的对象）
</code></pre>]]></content>
      
        <categories>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[日期类]]></title>
      <url>/2016/09/11/%E6%97%A5%E6%9C%9F%E7%B1%BB/</url>
      <content type="html"><![CDATA[<h4 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h4><p>从1970.1.1.0点开始到某个时刻的毫秒数，类型是long<br>1970年之前用负数表示</p>
<a id="more"></a>
<blockquote>
<p>toGMTString()不建议使用<br><br>getTime() 返回时间的毫秒数<br><br>setTime() 设置时间，毫秒数<br><br>DateFormat(父类) , SimpleDateFormat(子类)字符串和时间类的转化<br><br>new Date() 返回当前的时间<br></p>
</blockquote>
<p>将时间类转化为字符串:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">DateFormat df  = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日"</span>);</div><div class="line">Date d = <span class="keyword">new</span> Date(<span class="number">1234567L</span>);</div><div class="line">String str = df.format(d);</div><div class="line">print;</div></pre></td></tr></table></figure>
<blockquote>
<p>yyyy-MM-dd hh:mm:ss 年月日时分秒</p>
</blockquote>
<p>字符串转化为时间类:</p>
<pre><code>String str2 = &quot;1997-7-7&quot;;
DateFormt df2 = new SimpleDateFormt(&quot;yyyy-MM-dd&quot;);
Date d2 = df2.parse(str2);
</code></pre><blockquote>
<p>字符串中的格式必须和SimDateFormat中的格式相同，否则会报错</p>
</blockquote>
<hr>
<h4 id="Calendar-类（抽象类）–GregorianCalendar-子类"><a href="#Calendar-类（抽象类）–GregorianCalendar-子类" class="headerlink" title="Calendar 类（抽象类）–GregorianCalendar(子类)"></a>Calendar 类（抽象类）–GregorianCalendar(子类)</h4><p>一月是0 二月是1,12月是11。周日是1，周一是2，周六是7.<br>Calendar c = Calendar.getInstance();创建Calendar对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Calendar c = <span class="function">ne	w <span class="title">GregorianCalendar</span><span class="params">()</span></span>;</div><div class="line">c.set(<span class="number">2001</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">34</span>);</div><div class="line">Date d = c.getTime();</div><div class="line"><span class="comment">//c.set(Calendar.YEAR,2001);单独定义一个属性，使用当前时刻的时分秒</span></div><div class="line"><span class="comment">//c.setTime(new Date());</span></div><div class="line"><span class="comment">//c.add(Calendar.YEAR,30);增加30年（-30表示减法）</span></div><div class="line"><span class="comment">//getActualMaximun(Calendar.Date);返回一个月大最大天数</span></div><div class="line">print;</div></pre></td></tr></table></figure>
<p><em>一个简单的日历程序：</em></p>
<p><em>源代码如下：</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"><span class="keyword">import</span> java.text.DateFormat;</div><div class="line"><span class="keyword">import</span> java.text.ParseException;</div><div class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDate</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String [] args)</span></span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			System.out.println(<span class="string">"请输入时间：（YYYY-MM-dd）"</span>);</div><div class="line">			Scanner input = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">			String time = input.nextLine();</div><div class="line">			DateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</div><div class="line">			Date date = format.parse(time);</div><div class="line">			Calendar c = <span class="keyword">new</span> GregorianCalendar();</div><div class="line">			c.setTime(date);</div><div class="line">			c.set(Calendar.DATE, <span class="number">1</span>);</div><div class="line">			System.out.println(<span class="string">"日\t一\t二\t三\t四\t五\t六"</span>);</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j &lt; c.get(Calendar.DAY_OF_WEEK); j++)&#123;</div><div class="line">				System.out.print(<span class="string">"\t"</span>);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; c.getMaximum(Calendar.DATE); i++)&#123;</div><div class="line">				System.out.print(i+<span class="string">"\t"</span>);</div><div class="line">				<span class="keyword">if</span>(c.get(Calendar.DAY_OF_WEEK)==Calendar.SATURDAY)&#123;</div><div class="line">					System.out.println();</div><div class="line">				&#125;</div><div class="line">				c.add(Calendar.DATE, <span class="number">1</span>);</div><div class="line">			&#125;</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			<span class="comment">// TODO Auto-generated catch block</span></div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[不同编码类型的总结]]></title>
      <url>/2016/09/11/%E4%B8%8D%E5%90%8C%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="1-ASCII"><a href="#1-ASCII" class="headerlink" title="1.ASCII"></a>1.ASCII</h2><p>计算机一开始在美国使用，字符编码也只包括英文字母。ANSCII编码由一个字节表示所有符号。一个字节可以表示的所有可能是256（2的8次方）种，对于美国人来说，26个英文字母，加上常用的符号，也只是用了127个。如果大家都用英文，那这套编码完全够用。<a id="more"></a>但是不同国家的文字不同，如果加上其他国家的语言符号，那一个字节是不够的，之后ASCII做出了改进，将256种情况剩余的可能用来表示其他字符。一直排到了第255种可能，从128到255表示的字符成为“扩展字符集”，然而，新增的字符并不能解决所有问题。<br><img src="http://i.imgur.com/Ks9A740.jpg" alt=""></p>
<h2 id="2-GB2312"><a href="#2-GB2312" class="headerlink" title="2.GB2312"></a>2.GB2312</h2><p>计算机开始在我国普及时，ASCII中已经没有可以利用的字节状态来表示汉字。于是，我们将扩展字符集删除，将127后的字符状态重新编码。小于127的字符状态的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节称之为高字节，后面一个字节称之为低字节，这样我们就可以组合出大约7000多个简体汉字了。在这些编码里，我们还把数学符号、罗马希腊的字母、日文的假名们都编进去了，连在 ASCII 里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。 </p>
<p>后来GB2312也无法满足人们的需要，随后出现了GBK标准，再后来，还是不够用，于是出现了GB18030。这个标准几乎可以表示所有的中文字符，此标准在2006年5月1日被作为在中国境内所有软件产品支持的强制规格。 </p>
<h2 id="3-Unicode"><a href="#3-Unicode" class="headerlink" title="3.Unicode"></a>3.Unicode</h2><p>不只是我国，很多国家都制定了相应的符合本国文化的字符编码标准。这些标准再本国内可以正常使用，但是如果是不同国家之间通过文本文件的交流，就很有可能导致乱码。这时，国际标准化组织（osi）出现了，OSI致力于将全世界所有的字符用统一的标准编码，消除不同国家之间交流的障碍。</p>
<p>OSI将所有字符用两个字节表示，包括ANCSI中的前127个字符，所以对于钱127个字符来说，本来8位就可以表示的字符现在用16位来表示，这其实是一种资源的浪费。</p>
<h2 id="4-UTF-8"><a href="#4-UTF-8" class="headerlink" title="4.UTF-8"></a>4.UTF-8</h2><p>可以看出，Unicode虽然是一个很好的字符编码方式，但由于所有字符都用两个字节表示导致的资源的浪费，促使了UTF-8的出现，UTF-8编码中的第一个字节仍与ASCII兼容，这使得原来处理ASCII字符的软件无须或只须做少部份修改，即可继续使用。因此，它逐渐成为电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码。互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。<br>UTF-8有如下特点： </p>
<blockquote>
<p><1>  前128个US-ASCII字符只需一个字节编码（与ANCSI相同）。 </1></p>
<p><2>  带有附加符号的拉丁文、希腊文、西里尔字母、亚美尼亚语、希伯来文、阿拉伯文、叙利亚文及它拿字母则需要二个字节编码。 </2></p>
<p><3>  其他基本多文种平面（BMP）中的字符（这包含了大部分常用字）使用三个字节编码。 </3></p>
<p><4>  其他极少使用的Unicode辅助平面的字符使用四字节编码。 </4></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
